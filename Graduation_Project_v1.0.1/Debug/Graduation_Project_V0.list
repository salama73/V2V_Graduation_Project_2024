
Graduation_Project_V0.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003924  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08003a54  08003a54  00013a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c0c  08003c0c  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  08003c0c  08003c0c  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c0c  08003c0c  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c0c  08003c0c  00013c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c10  08003c10  00013c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08003c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  200000d4  08003ce8  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  08003ce8  00020634  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb96  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032c9  00000000  00000000  0002fc93  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000788  00000000  00000000  00032f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000540  00000000  00000000  000336e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006624  00000000  00000000  00033c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000868c  00000000  00000000  0003a24c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00015a40  00000000  00000000  000428d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00058318  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000160c  00000000  00000000  00058394  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000d4 	.word	0x200000d4
 800014c:	00000000 	.word	0x00000000
 8000150:	08003a3c 	.word	0x08003a3c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000d8 	.word	0x200000d8
 800016c:	08003a3c 	.word	0x08003a3c

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <__aeabi_fmul>:
 800094c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000950:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000954:	bf1e      	ittt	ne
 8000956:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800095a:	ea92 0f0c 	teqne	r2, ip
 800095e:	ea93 0f0c 	teqne	r3, ip
 8000962:	d06f      	beq.n	8000a44 <__aeabi_fmul+0xf8>
 8000964:	441a      	add	r2, r3
 8000966:	ea80 0c01 	eor.w	ip, r0, r1
 800096a:	0240      	lsls	r0, r0, #9
 800096c:	bf18      	it	ne
 800096e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000972:	d01e      	beq.n	80009b2 <__aeabi_fmul+0x66>
 8000974:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000978:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800097c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000980:	fba0 3101 	umull	r3, r1, r0, r1
 8000984:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000988:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800098c:	bf3e      	ittt	cc
 800098e:	0049      	lslcc	r1, r1, #1
 8000990:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000994:	005b      	lslcc	r3, r3, #1
 8000996:	ea40 0001 	orr.w	r0, r0, r1
 800099a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800099e:	2afd      	cmp	r2, #253	; 0xfd
 80009a0:	d81d      	bhi.n	80009de <__aeabi_fmul+0x92>
 80009a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009aa:	bf08      	it	eq
 80009ac:	f020 0001 	biceq.w	r0, r0, #1
 80009b0:	4770      	bx	lr
 80009b2:	f090 0f00 	teq	r0, #0
 80009b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009ba:	bf08      	it	eq
 80009bc:	0249      	lsleq	r1, r1, #9
 80009be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80009c6:	3a7f      	subs	r2, #127	; 0x7f
 80009c8:	bfc2      	ittt	gt
 80009ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009d2:	4770      	bxgt	lr
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	f04f 0300 	mov.w	r3, #0
 80009dc:	3a01      	subs	r2, #1
 80009de:	dc5d      	bgt.n	8000a9c <__aeabi_fmul+0x150>
 80009e0:	f112 0f19 	cmn.w	r2, #25
 80009e4:	bfdc      	itt	le
 80009e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80009ea:	4770      	bxle	lr
 80009ec:	f1c2 0200 	rsb	r2, r2, #0
 80009f0:	0041      	lsls	r1, r0, #1
 80009f2:	fa21 f102 	lsr.w	r1, r1, r2
 80009f6:	f1c2 0220 	rsb	r2, r2, #32
 80009fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80009fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a02:	f140 0000 	adc.w	r0, r0, #0
 8000a06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a0a:	bf08      	it	eq
 8000a0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a10:	4770      	bx	lr
 8000a12:	f092 0f00 	teq	r2, #0
 8000a16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a1a:	bf02      	ittt	eq
 8000a1c:	0040      	lsleq	r0, r0, #1
 8000a1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a22:	3a01      	subeq	r2, #1
 8000a24:	d0f9      	beq.n	8000a1a <__aeabi_fmul+0xce>
 8000a26:	ea40 000c 	orr.w	r0, r0, ip
 8000a2a:	f093 0f00 	teq	r3, #0
 8000a2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a32:	bf02      	ittt	eq
 8000a34:	0049      	lsleq	r1, r1, #1
 8000a36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a3a:	3b01      	subeq	r3, #1
 8000a3c:	d0f9      	beq.n	8000a32 <__aeabi_fmul+0xe6>
 8000a3e:	ea41 010c 	orr.w	r1, r1, ip
 8000a42:	e78f      	b.n	8000964 <__aeabi_fmul+0x18>
 8000a44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a48:	ea92 0f0c 	teq	r2, ip
 8000a4c:	bf18      	it	ne
 8000a4e:	ea93 0f0c 	teqne	r3, ip
 8000a52:	d00a      	beq.n	8000a6a <__aeabi_fmul+0x11e>
 8000a54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a58:	bf18      	it	ne
 8000a5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a5e:	d1d8      	bne.n	8000a12 <__aeabi_fmul+0xc6>
 8000a60:	ea80 0001 	eor.w	r0, r0, r1
 8000a64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a68:	4770      	bx	lr
 8000a6a:	f090 0f00 	teq	r0, #0
 8000a6e:	bf17      	itett	ne
 8000a70:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000a74:	4608      	moveq	r0, r1
 8000a76:	f091 0f00 	teqne	r1, #0
 8000a7a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000a7e:	d014      	beq.n	8000aaa <__aeabi_fmul+0x15e>
 8000a80:	ea92 0f0c 	teq	r2, ip
 8000a84:	d101      	bne.n	8000a8a <__aeabi_fmul+0x13e>
 8000a86:	0242      	lsls	r2, r0, #9
 8000a88:	d10f      	bne.n	8000aaa <__aeabi_fmul+0x15e>
 8000a8a:	ea93 0f0c 	teq	r3, ip
 8000a8e:	d103      	bne.n	8000a98 <__aeabi_fmul+0x14c>
 8000a90:	024b      	lsls	r3, r1, #9
 8000a92:	bf18      	it	ne
 8000a94:	4608      	movne	r0, r1
 8000a96:	d108      	bne.n	8000aaa <__aeabi_fmul+0x15e>
 8000a98:	ea80 0001 	eor.w	r0, r0, r1
 8000a9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_fdiv>:
 8000ab4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ab8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000abc:	bf1e      	ittt	ne
 8000abe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ac2:	ea92 0f0c 	teqne	r2, ip
 8000ac6:	ea93 0f0c 	teqne	r3, ip
 8000aca:	d069      	beq.n	8000ba0 <__aeabi_fdiv+0xec>
 8000acc:	eba2 0203 	sub.w	r2, r2, r3
 8000ad0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ad4:	0249      	lsls	r1, r1, #9
 8000ad6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ada:	d037      	beq.n	8000b4c <__aeabi_fdiv+0x98>
 8000adc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ae0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ae4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ae8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000aec:	428b      	cmp	r3, r1
 8000aee:	bf38      	it	cc
 8000af0:	005b      	lslcc	r3, r3, #1
 8000af2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000af6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000afa:	428b      	cmp	r3, r1
 8000afc:	bf24      	itt	cs
 8000afe:	1a5b      	subcs	r3, r3, r1
 8000b00:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b08:	bf24      	itt	cs
 8000b0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b16:	bf24      	itt	cs
 8000b18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b24:	bf24      	itt	cs
 8000b26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b2e:	011b      	lsls	r3, r3, #4
 8000b30:	bf18      	it	ne
 8000b32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b36:	d1e0      	bne.n	8000afa <__aeabi_fdiv+0x46>
 8000b38:	2afd      	cmp	r2, #253	; 0xfd
 8000b3a:	f63f af50 	bhi.w	80009de <__aeabi_fmul+0x92>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b54:	327f      	adds	r2, #127	; 0x7f
 8000b56:	bfc2      	ittt	gt
 8000b58:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b60:	4770      	bxgt	lr
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	f04f 0300 	mov.w	r3, #0
 8000b6a:	3a01      	subs	r2, #1
 8000b6c:	e737      	b.n	80009de <__aeabi_fmul+0x92>
 8000b6e:	f092 0f00 	teq	r2, #0
 8000b72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b76:	bf02      	ittt	eq
 8000b78:	0040      	lsleq	r0, r0, #1
 8000b7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b7e:	3a01      	subeq	r2, #1
 8000b80:	d0f9      	beq.n	8000b76 <__aeabi_fdiv+0xc2>
 8000b82:	ea40 000c 	orr.w	r0, r0, ip
 8000b86:	f093 0f00 	teq	r3, #0
 8000b8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b8e:	bf02      	ittt	eq
 8000b90:	0049      	lsleq	r1, r1, #1
 8000b92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b96:	3b01      	subeq	r3, #1
 8000b98:	d0f9      	beq.n	8000b8e <__aeabi_fdiv+0xda>
 8000b9a:	ea41 010c 	orr.w	r1, r1, ip
 8000b9e:	e795      	b.n	8000acc <__aeabi_fdiv+0x18>
 8000ba0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ba4:	ea92 0f0c 	teq	r2, ip
 8000ba8:	d108      	bne.n	8000bbc <__aeabi_fdiv+0x108>
 8000baa:	0242      	lsls	r2, r0, #9
 8000bac:	f47f af7d 	bne.w	8000aaa <__aeabi_fmul+0x15e>
 8000bb0:	ea93 0f0c 	teq	r3, ip
 8000bb4:	f47f af70 	bne.w	8000a98 <__aeabi_fmul+0x14c>
 8000bb8:	4608      	mov	r0, r1
 8000bba:	e776      	b.n	8000aaa <__aeabi_fmul+0x15e>
 8000bbc:	ea93 0f0c 	teq	r3, ip
 8000bc0:	d104      	bne.n	8000bcc <__aeabi_fdiv+0x118>
 8000bc2:	024b      	lsls	r3, r1, #9
 8000bc4:	f43f af4c 	beq.w	8000a60 <__aeabi_fmul+0x114>
 8000bc8:	4608      	mov	r0, r1
 8000bca:	e76e      	b.n	8000aaa <__aeabi_fmul+0x15e>
 8000bcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000bd0:	bf18      	it	ne
 8000bd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000bd6:	d1ca      	bne.n	8000b6e <__aeabi_fdiv+0xba>
 8000bd8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000bdc:	f47f af5c 	bne.w	8000a98 <__aeabi_fmul+0x14c>
 8000be0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000be4:	f47f af3c 	bne.w	8000a60 <__aeabi_fmul+0x114>
 8000be8:	e75f      	b.n	8000aaa <__aeabi_fmul+0x15e>
 8000bea:	bf00      	nop

08000bec <__aeabi_f2uiz>:
 8000bec:	0042      	lsls	r2, r0, #1
 8000bee:	d20e      	bcs.n	8000c0e <__aeabi_f2uiz+0x22>
 8000bf0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bf4:	d30b      	bcc.n	8000c0e <__aeabi_f2uiz+0x22>
 8000bf6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bfa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bfe:	d409      	bmi.n	8000c14 <__aeabi_f2uiz+0x28>
 8000c00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c08:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0c:	4770      	bx	lr
 8000c0e:	f04f 0000 	mov.w	r0, #0
 8000c12:	4770      	bx	lr
 8000c14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c18:	d101      	bne.n	8000c1e <__aeabi_f2uiz+0x32>
 8000c1a:	0242      	lsls	r2, r0, #9
 8000c1c:	d102      	bne.n	8000c24 <__aeabi_f2uiz+0x38>
 8000c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c22:	4770      	bx	lr
 8000c24:	f04f 0000 	mov.w	r0, #0
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <MCAL_CAN_Get_TX_Mailboxes_Empty>:
* 					 Transmi_mailbox_0,Transmi_mailbox_1 or Transmi_mailbox_2
* @retval 			-Can_Status_t	The number of an empty transmit mailbox (Transmi_mailbox_0,Transmi_mailbox_1 or Transmi_mailbox_2)
* Note				-None
*/
uint8 MCAL_CAN_Get_TX_Mailboxes_Empty(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
	if(CAN_TSR & 1<<26)
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MCAL_CAN_Get_TX_Mailboxes_Empty+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MCAL_CAN_Get_TX_Mailboxes_Empty+0x14>
		return Transmi_mailbox_0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e010      	b.n	8000c62 <MCAL_CAN_Get_TX_Mailboxes_Empty+0x36>
	else if (CAN_TSR & 1<<27)
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <MCAL_CAN_Get_TX_Mailboxes_Empty+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MCAL_CAN_Get_TX_Mailboxes_Empty+0x24>
		return Transmi_mailbox_1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e008      	b.n	8000c62 <MCAL_CAN_Get_TX_Mailboxes_Empty+0x36>
	else if (CAN_TSR & 1<<28)
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MCAL_CAN_Get_TX_Mailboxes_Empty+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MCAL_CAN_Get_TX_Mailboxes_Empty+0x34>
		return Transmi_mailbox_2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	e000      	b.n	8000c62 <MCAL_CAN_Get_TX_Mailboxes_Empty+0x36>
	else
		return Transmi_mailbox_Full;
 8000c60:	2303      	movs	r3, #3
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40006408 	.word	0x40006408

08000c70 <MCAL_CAN_Add_TX_Message>:
* @param [output] 	-pMailbox: Pointer to a variable that will store the assigned transmit mailbox number.
* @retval 			-Can_Status_t	status of Can hardware (CAN_OK,CAN_ERROR,...)
* Note				-None
*/
Std_ReturnType MCAL_CAN_Add_TX_Message(MessageObject* Message_Info, uint8 Mailbox)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b087      	sub	sp, #28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	Std_ReturnType status;
	status=E_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	75fb      	strb	r3, [r7, #23]
	CAN_TX_mailbox_TypeDef* Current_Mailboxe=NULL_PTR;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
	switch (Mailbox)
 8000c84:	78fb      	ldrb	r3, [r7, #3]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d006      	beq.n	8000c98 <MCAL_CAN_Add_TX_Message+0x28>
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d007      	beq.n	8000c9e <MCAL_CAN_Add_TX_Message+0x2e>
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d108      	bne.n	8000ca4 <MCAL_CAN_Add_TX_Message+0x34>
	{
		case Transmi_mailbox_0:
			Current_Mailboxe=CAN_TX_mailbox_0;
 8000c92:	4b4b      	ldr	r3, [pc, #300]	; (8000dc0 <MCAL_CAN_Add_TX_Message+0x150>)
 8000c94:	613b      	str	r3, [r7, #16]
			break;
 8000c96:	e008      	b.n	8000caa <MCAL_CAN_Add_TX_Message+0x3a>
		case Transmi_mailbox_1:
			Current_Mailboxe=CAN_TX_mailbox_1;
 8000c98:	4b4a      	ldr	r3, [pc, #296]	; (8000dc4 <MCAL_CAN_Add_TX_Message+0x154>)
 8000c9a:	613b      	str	r3, [r7, #16]
			break;
 8000c9c:	e005      	b.n	8000caa <MCAL_CAN_Add_TX_Message+0x3a>
		case Transmi_mailbox_2:
			Current_Mailboxe=CAN_TX_mailbox_2;
 8000c9e:	4b4a      	ldr	r3, [pc, #296]	; (8000dc8 <MCAL_CAN_Add_TX_Message+0x158>)
 8000ca0:	613b      	str	r3, [r7, #16]
			break;
 8000ca2:	e002      	b.n	8000caa <MCAL_CAN_Add_TX_Message+0x3a>
		default:
			status=E_NOT_OK;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	75fb      	strb	r3, [r7, #23]
			break;
 8000ca8:	bf00      	nop
	}
	//reset Current Mailboxe
	Current_Mailboxe->CAN_TDHxR=0X00000000;
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
	Current_Mailboxe->CAN_TDLxR=0X00000000;
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
	Current_Mailboxe->CAN_TDTxR=0X00000000;
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	605a      	str	r2, [r3, #4]
	Current_Mailboxe->CAN_TIxR=0X00000000;
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
	//set the type of frame
	switch (Message_Info->RTR)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7b5b      	ldrb	r3, [r3, #13]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d008      	beq.n	8000cdc <MCAL_CAN_Add_TX_Message+0x6c>
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d10d      	bne.n	8000cea <MCAL_CAN_Add_TX_Message+0x7a>
	{
		case CAN_RTR_Remote_Frame:
			Current_Mailboxe->CAN_TIxR |=(1<<1);
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f043 0202 	orr.w	r2, r3, #2
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	601a      	str	r2, [r3, #0]
			break;
 8000cda:	e009      	b.n	8000cf0 <MCAL_CAN_Add_TX_Message+0x80>
		case CAN_RTR_Data_Frame:
			Current_Mailboxe->CAN_TIxR &=~(1<<1);
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f023 0202 	bic.w	r2, r3, #2
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	601a      	str	r2, [r3, #0]
			break;
 8000ce8:	e002      	b.n	8000cf0 <MCAL_CAN_Add_TX_Message+0x80>
		default:
			status=E_NOT_OK;
 8000cea:	2301      	movs	r3, #1
 8000cec:	75fb      	strb	r3, [r7, #23]
			break;
 8000cee:	bf00      	nop
	}
	//set the identifier
	switch (Message_Info->IDE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7b9b      	ldrb	r3, [r3, #14]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <MCAL_CAN_Add_TX_Message+0x8e>
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d00f      	beq.n	8000d1c <MCAL_CAN_Add_TX_Message+0xac>
 8000cfc:	e01d      	b.n	8000d3a <MCAL_CAN_Add_TX_Message+0xca>
	{
		case CAN_IDE_Standard:
			Current_Mailboxe->CAN_TIxR &=~(1<<2);
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f023 0204 	bic.w	r2, r3, #4
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	601a      	str	r2, [r3, #0]
			Current_Mailboxe->CAN_TIxR |=(uint32)(Message_Info->ID<<21);
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	055b      	lsls	r3, r3, #21
 8000d14:	431a      	orrs	r2, r3
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	601a      	str	r2, [r3, #0]
			break;
 8000d1a:	e011      	b.n	8000d40 <MCAL_CAN_Add_TX_Message+0xd0>
		case CAN_IDE_Extended:
			Current_Mailboxe->CAN_TIxR |=(1<<2);
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f043 0204 	orr.w	r2, r3, #4
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	601a      	str	r2, [r3, #0]
			Current_Mailboxe->CAN_TIxR |=(uint32)(Message_Info->ID<<3);
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	431a      	orrs	r2, r3
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	601a      	str	r2, [r3, #0]
			break;
 8000d38:	e002      	b.n	8000d40 <MCAL_CAN_Add_TX_Message+0xd0>
		default:
			status=E_NOT_OK;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	75fb      	strb	r3, [r7, #23]
			break;
 8000d3e:	bf00      	nop
	}
	//length of the frame
	Current_Mailboxe->CAN_TDTxR |=(Message_Info->DLC<<0);
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	7912      	ldrb	r2, [r2, #4]
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	605a      	str	r2, [r3, #4]
	//Data
	for(uint8 i=0 ; i<(uint8)Message_Info->DLC ; i++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	e023      	b.n	8000d9c <MCAL_CAN_Add_TX_Message+0x12c>
	{
		if(i<4)
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d80e      	bhi.n	8000d78 <MCAL_CAN_Add_TX_Message+0x108>
		{
			Current_Mailboxe->CAN_TDLxR |=Message_Info->SDU[i]<<(8*i);
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	7bfa      	ldrb	r2, [r7, #15]
 8000d60:	6879      	ldr	r1, [r7, #4]
 8000d62:	440a      	add	r2, r1
 8000d64:	7952      	ldrb	r2, [r2, #5]
 8000d66:	4611      	mov	r1, r2
 8000d68:	7bfa      	ldrb	r2, [r7, #15]
 8000d6a:	00d2      	lsls	r2, r2, #3
 8000d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d70:	431a      	orrs	r2, r3
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	e00e      	b.n	8000d96 <MCAL_CAN_Add_TX_Message+0x126>
		}
		else
		{
			Current_Mailboxe->CAN_TDHxR |=Message_Info->SDU[i]<<(8*(i-4));
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	7bfa      	ldrb	r2, [r7, #15]
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	440a      	add	r2, r1
 8000d82:	7952      	ldrb	r2, [r2, #5]
 8000d84:	4611      	mov	r1, r2
 8000d86:	7bfa      	ldrb	r2, [r7, #15]
 8000d88:	3a04      	subs	r2, #4
 8000d8a:	00d2      	lsls	r2, r2, #3
 8000d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d90:	431a      	orrs	r2, r3
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	60da      	str	r2, [r3, #12]
	for(uint8 i=0 ; i<(uint8)Message_Info->DLC ; i++)
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	791b      	ldrb	r3, [r3, #4]
 8000da0:	7bfa      	ldrb	r2, [r7, #15]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d3d6      	bcc.n	8000d54 <MCAL_CAN_Add_TX_Message+0xe4>
		}
	}
	// Transmit mailbox request
	Current_Mailboxe->CAN_TIxR |=(1<<0);
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f043 0201 	orr.w	r2, r3, #1
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	601a      	str	r2, [r3, #0]
	return status;
 8000db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	371c      	adds	r7, #28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40006580 	.word	0x40006580
 8000dc4:	40006590 	.word	0x40006590
 8000dc8:	400065a0 	.word	0x400065a0

08000dcc <Can_Init>:
 * Parameters (out)  	: None
 * Return value     	: None
 * Description       	: This function initializes the module.
 */
void Can_Init (const Can_ConfigType* Config)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint32 CAN_BTR_temp=0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
	uint32 Prescaler=0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
	uint32 BaudRate=0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	613b      	str	r3, [r7, #16]
	uint32 Bits_Timing=0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
	#if(CanDevErrorDetect==STD_ON)
		if(NULL_PTR==Config)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d105      	bne.n	8000df6 <Can_Init+0x2a>
			Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_Init_ID,CAN_E_PARAM_POINTER);
 8000dea:	2301      	movs	r3, #1
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	200b      	movs	r0, #11
 8000df2:	f000 fdc7 	bl	8001984 <Det_ReportError>
		/*
		 [SWS_Can_00174] [ If development error detection for the Can module is enabled:
		  The function Can_Init shall raise the error CAN_E_TRANSITION if the driver is not in
		  state CAN_UNINIT ]
		 */
		if(CanDriverState!=CAN_UNINIT)
 8000df6:	4b6d      	ldr	r3, [pc, #436]	; (8000fac <Can_Init+0x1e0>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d005      	beq.n	8000e0a <Can_Init+0x3e>
			Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_Init_ID,CAN_E_TRANSITION);
 8000dfe:	2306      	movs	r3, #6
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	200b      	movs	r0, #11
 8000e06:	f000 fdbd 	bl	8001984 <Det_ReportError>
		/*
		 [SWS_Can_00408] [ If development error detection for the Can module is enabled:
		  The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
		  controllers are not in state UNINIT]
		*/
		if(Can_Controller_State!=CAN_CS_UNINIT)
 8000e0a:	4b69      	ldr	r3, [pc, #420]	; (8000fb0 <Can_Init+0x1e4>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d005      	beq.n	8000e1e <Can_Init+0x52>
			Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_Init_ID,CAN_E_TRANSITION);
 8000e12:	2306      	movs	r3, #6
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	200b      	movs	r0, #11
 8000e1a:	f000 fdb3 	bl	8001984 <Det_ReportError>
	#endif
	/*
	 The Can module configuration defines the global CAN HW Unit settings and
	 references to the default CAN controller configuration sets.
	 */
	CAN_HW_Unit_settings=*Config;
 8000e1e:	4a65      	ldr	r2, [pc, #404]	; (8000fb4 <Can_Init+0x1e8>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4610      	mov	r0, r2
 8000e24:	4619      	mov	r1, r3
 8000e26:	237c      	movs	r3, #124	; 0x7c
 8000e28:	461a      	mov	r2, r3
 8000e2a:	f002 fdfb 	bl	8003a24 <memcpy>
	//CAN controller is used in the configuration.
	if(TRUE==Config->CanConfigSet.CanController.CanControllerActivation)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	785b      	ldrb	r3, [r3, #1]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	f040 80a1 	bne.w	8000f7a <Can_Init+0x1ae>
	{
		// Enable Can peripheral clock
		RCC_CAN_CLK_Enable();
 8000e38:	4b5f      	ldr	r3, [pc, #380]	; (8000fb8 <Can_Init+0x1ec>)
 8000e3a:	69db      	ldr	r3, [r3, #28]
 8000e3c:	4a5e      	ldr	r2, [pc, #376]	; (8000fb8 <Can_Init+0x1ec>)
 8000e3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e42:	61d3      	str	r3, [r2, #28]
		//Software sets this bit to request the CAN hardware to enter initialization mode.
		CAN_MCR &=~(1<<1);
 8000e44:	4b5d      	ldr	r3, [pc, #372]	; (8000fbc <Can_Init+0x1f0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a5c      	ldr	r2, [pc, #368]	; (8000fbc <Can_Init+0x1f0>)
 8000e4a:	f023 0302 	bic.w	r3, r3, #2
 8000e4e:	6013      	str	r3, [r2, #0]
		CAN_MCR |=(1<<0);
 8000e50:	4b5a      	ldr	r3, [pc, #360]	; (8000fbc <Can_Init+0x1f0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a59      	ldr	r2, [pc, #356]	; (8000fbc <Can_Init+0x1f0>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6013      	str	r3, [r2, #0]
		//CAN bit timing register (baud Rate)
		CAN_BTR_temp=CAN_BTR;
 8000e5c:	4b58      	ldr	r3, [pc, #352]	; (8000fc0 <Can_Init+0x1f4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	61bb      	str	r3, [r7, #24]
		CAN_BTR_temp &=0XC0000000;
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000e68:	61bb      	str	r3, [r7, #24]
		//set Prescaler
		Bits_Timing=Config->CanConfigSet.CanController.CanControllerDefaultBaudrate->CanControllerPropSeg;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6e:	88db      	ldrh	r3, [r3, #6]
 8000e70:	60fb      	str	r3, [r7, #12]
		Bits_Timing+=Config->CanConfigSet.CanController.CanControllerDefaultBaudrate->CanControllerSeg1;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e76:	7a1b      	ldrb	r3, [r3, #8]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]
		Bits_Timing+=Config->CanConfigSet.CanController.CanControllerDefaultBaudrate->CanControllerSeg2;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e84:	7a5b      	ldrb	r3, [r3, #9]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
		BaudRate=Config->CanConfigSet.CanController.CanControllerDefaultBaudrate->CanControllerBaudRate;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fea9 	bl	8000bec <__aeabi_f2uiz>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	613b      	str	r3, [r7, #16]
		Prescaler=(8000000)/(Bits_Timing*1000*BaudRate);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eaa:	fb02 f303 	mul.w	r3, r2, r3
 8000eae:	4a45      	ldr	r2, [pc, #276]	; (8000fc4 <Can_Init+0x1f8>)
 8000eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb4:	617b      	str	r3, [r7, #20]
		CAN_BTR_temp |=(Prescaler-1)<<0;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
		//set TimeSeg1
		CAN_BTR_temp |=(Config->CanConfigSet.CanController.CanControllerDefaultBaudrate->CanControllerSeg1-1)<<16;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec4:	7a1b      	ldrb	r3, [r3, #8]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	041b      	lsls	r3, r3, #16
 8000eca:	461a      	mov	r2, r3
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
		//set TimeSeg2
		CAN_BTR_temp |=(Config->CanConfigSet.CanController.CanControllerDefaultBaudrate->CanControllerSeg2-1)<<20;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed6:	7a5b      	ldrb	r3, [r3, #9]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	051b      	lsls	r3, r3, #20
 8000edc:	461a      	mov	r2, r3
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
		CAN_BTR=CAN_BTR_temp;
 8000ee4:	4a36      	ldr	r2, [pc, #216]	; (8000fc0 <Can_Init+0x1f4>)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	6013      	str	r3, [r2, #0]
		/*
		 Configure CAN operating mode
		 */
		//CAN_MODE_Loop_back_Silent for test
		CAN_BTR |=(1<<31);
 8000eea:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <Can_Init+0x1f4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a34      	ldr	r2, [pc, #208]	; (8000fc0 <Can_Init+0x1f4>)
 8000ef0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ef4:	6013      	str	r3, [r2, #0]
		CAN_BTR |=(1<<30);
 8000ef6:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <Can_Init+0x1f4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a31      	ldr	r2, [pc, #196]	; (8000fc0 <Can_Init+0x1f4>)
 8000efc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000f00:	6013      	str	r3, [r2, #0]
		/*
		 enable Transmit interrupt
		 */
		CAN_IER |=(1<<0);
 8000f02:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <Can_Init+0x1fc>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a30      	ldr	r2, [pc, #192]	; (8000fc8 <Can_Init+0x1fc>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6013      	str	r3, [r2, #0]
		NVIC_IRQ19_CAN_TX_Enable();
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <Can_Init+0x200>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a2e      	ldr	r2, [pc, #184]	; (8000fcc <Can_Init+0x200>)
 8000f14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f18:	6013      	str	r3, [r2, #0]
		/*
		 enable Receive Fifo 0 interrupt
		 */
		//FIFO message pending interrupt enable
		CAN_IER |=(1<<1);
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <Can_Init+0x1fc>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a2a      	ldr	r2, [pc, #168]	; (8000fc8 <Can_Init+0x1fc>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6013      	str	r3, [r2, #0]
		//FIFO full interrupt enable
		CAN_IER |=(1<<2);
 8000f26:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <Can_Init+0x1fc>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <Can_Init+0x1fc>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	6013      	str	r3, [r2, #0]
		//FIFO overrun interrupt enable
		CAN_IER |=(1<<3);
 8000f32:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <Can_Init+0x1fc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a24      	ldr	r2, [pc, #144]	; (8000fc8 <Can_Init+0x1fc>)
 8000f38:	f043 0308 	orr.w	r3, r3, #8
 8000f3c:	6013      	str	r3, [r2, #0]
		NVIC_IRQ20_CAN_RX0_Enable();
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <Can_Init+0x200>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a22      	ldr	r2, [pc, #136]	; (8000fcc <Can_Init+0x200>)
 8000f44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f48:	6013      	str	r3, [r2, #0]
		/*
		 enable Receive Fifo 1 interrupt
		 */
		//FIFO message pending interrupt enable
		CAN_IER |=(1<<4);
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <Can_Init+0x1fc>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <Can_Init+0x1fc>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	6013      	str	r3, [r2, #0]
		//FIFO full interrupt enable
		CAN_IER |=(1<<5);
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <Can_Init+0x1fc>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <Can_Init+0x1fc>)
 8000f5c:	f043 0320 	orr.w	r3, r3, #32
 8000f60:	6013      	str	r3, [r2, #0]
		//FIFO overrun interrupt enable
		CAN_IER |=(1<<6);
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <Can_Init+0x1fc>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <Can_Init+0x1fc>)
 8000f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f6c:	6013      	str	r3, [r2, #0]
		NVIC_IRQ21_CAN_RX1_Enable();
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <Can_Init+0x200>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a16      	ldr	r2, [pc, #88]	; (8000fcc <Can_Init+0x200>)
 8000f74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f78:	6013      	str	r3, [r2, #0]
	else
	{
		//
	}
    // Hardware Object
    for (int i = 0; i < Max_Num_HOH ; i++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	e007      	b.n	8000f90 <Can_Init+0x1c4>
    {
    	// Set Message Objects as Free
    	Message_ObjectStatus[i].Object_Free= TRUE;
 8000f80:	4a13      	ldr	r2, [pc, #76]	; (8000fd0 <Can_Init+0x204>)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	2101      	movs	r1, #1
 8000f86:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < Max_Num_HOH ; i++)
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	ddf4      	ble.n	8000f80 <Can_Init+0x1b4>
    }
    /*
    [SWS_Can_00246] The function Can_Init shall change the module state to
    CAN_READY, after initializing all controllers inside the HW Unit.
    */
    CanDriverState=CAN_READY;
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <Can_Init+0x1e0>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
	Can_Controller_State=CAN_CS_STOPPED;
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <Can_Init+0x1e4>)
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	701a      	strb	r2, [r3, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	3720      	adds	r7, #32
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200000f0 	.word	0x200000f0
 8000fb0:	200000f1 	.word	0x200000f1
 8000fb4:	20000190 	.word	0x20000190
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40006400 	.word	0x40006400
 8000fc0:	4000641c 	.word	0x4000641c
 8000fc4:	007a1200 	.word	0x007a1200
 8000fc8:	40006414 	.word	0x40006414
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	20000138 	.word	0x20000138

08000fd4 <Can_SetControllerMode>:
               	   	      E_OK (request accepted)
               	   	   	  E_NOT_OK (request not accepted)
 * Description			: This service reports about the current status of the requested CAN controller.
*******************************************************************************/
Std_ReturnType Can_SetControllerMode (uint8 Controller,Can_ControllerStateType Transition)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	71fb      	strb	r3, [r7, #7]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	71bb      	strb	r3, [r7, #6]
	Std_ReturnType Status=E_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]
	/*
	[SWS_Can_00198]  If development error detection for the Can module is enabled: if
	the module is not yet initialized, the function Can_SetControllerMode shall raise
	development error CAN_E_UNINIT and return E_NOT_OK.
	*/
	if(CanDriverState!=CAN_READY)
 8000fe8:	4b4f      	ldr	r3, [pc, #316]	; (8001128 <Can_SetControllerMode+0x154>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d009      	beq.n	8001004 <Can_SetControllerMode+0x30>
	{
		Status=E_NOT_OK;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
		Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_SetControllerMode_ID,CAN_E_UNINIT);
 8000ff4:	2305      	movs	r3, #5
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	200b      	movs	r0, #11
 8000ffc:	f000 fcc2 	bl	8001984 <Det_ReportError>
		return Status;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	e08d      	b.n	8001120 <Can_SetControllerMode+0x14c>
	/*
	 The function Can_SetControllerMode(CAN_CS_STARTED)
	 shall set the hardware registers in a way that makes the CAN controller participating
	 on the network
	 */
	if(Transition==CAN_CS_STARTED)
 8001004:	79bb      	ldrb	r3, [r7, #6]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d12e      	bne.n	8001068 <Can_SetControllerMode+0x94>
		/*
		 When the function Can_SetControllerMode
		 (CAN_CS_STARTED) is entered and the CAN controller is not in state STOPPED it
		 shall detect a invalid state transition
		 */
		if(Can_Controller_State==CAN_CS_STOPPED)
 800100a:	4b48      	ldr	r3, [pc, #288]	; (800112c <Can_SetControllerMode+0x158>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d120      	bne.n	8001054 <Can_SetControllerMode+0x80>
		{
			if(CAN_HW_Unit_settings.CanConfigSet.CanController.CanBusoffProcessing==INTERRUPT||CAN_HW_Unit_settings.CanConfigSet.CanController.CanTxProcessing==INTERRUPT||CAN_HW_Unit_settings.CanConfigSet.CanController.CanRxProcessing==INTERRUPT)
 8001012:	4b47      	ldr	r3, [pc, #284]	; (8001130 <Can_SetControllerMode+0x15c>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d007      	beq.n	800102a <Can_SetControllerMode+0x56>
 800101a:	4b45      	ldr	r3, [pc, #276]	; (8001130 <Can_SetControllerMode+0x15c>)
 800101c:	7a9b      	ldrb	r3, [r3, #10]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d003      	beq.n	800102a <Can_SetControllerMode+0x56>
 8001022:	4b43      	ldr	r3, [pc, #268]	; (8001130 <Can_SetControllerMode+0x15c>)
 8001024:	7a5b      	ldrb	r3, [r3, #9]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d103      	bne.n	8001032 <Can_SetControllerMode+0x5e>
			{
				Can_EnableControllerInterrupts(Controller);
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f9cd 	bl	80013cc <Can_EnableControllerInterrupts>
			 [SWS_Can_00261] ⌈ The function Can_SetControllerMode(CAN_CS_STARTED)
			 shall set the hardware registers in a way that makes the CAN controller participating
			 on the network
			 */
			// enter STARTED mode
			CAN_MCR &=~(1<<0);
 8001032:	4b40      	ldr	r3, [pc, #256]	; (8001134 <Can_SetControllerMode+0x160>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a3f      	ldr	r2, [pc, #252]	; (8001134 <Can_SetControllerMode+0x160>)
 8001038:	f023 0301 	bic.w	r3, r3, #1
 800103c:	6013      	str	r3, [r2, #0]
			/*
			 This bit is cleared by hardware when the CAN hardware has left the initialization mode (to
			 be synchronized on the CAN bus). To be synchronized the hardware has to monitor a
			 sequence of 11 consecutive recessive bits on the CAN RX signal.
			 */
			while(CAN_MSR & (1<<0));
 800103e:	bf00      	nop
 8001040:	4b3d      	ldr	r3, [pc, #244]	; (8001138 <Can_SetControllerMode+0x164>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f9      	bne.n	8001040 <Can_SetControllerMode+0x6c>
			Can_Controller_State=CAN_CS_STARTED;
 800104c:	4b37      	ldr	r3, [pc, #220]	; (800112c <Can_SetControllerMode+0x158>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	e05d      	b.n	8001110 <Can_SetControllerMode+0x13c>
			 [SWS_Can_00409] When the function Can_SetControllerMode
			 (CAN_CS_STARTED) is entered and the CAN controller is not in state STOPPED it
			 shall detect a invalid state transition
			 */
		#if(CanDevErrorDetect==STD_ON)
			Status=E_NOT_OK;
 8001054:	2301      	movs	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
			Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_SetControllerMode_ID,CAN_E_TRANSITION);
 8001058:	2306      	movs	r3, #6
 800105a:	2203      	movs	r2, #3
 800105c:	2100      	movs	r1, #0
 800105e:	200b      	movs	r0, #11
 8001060:	f000 fc90 	bl	8001984 <Det_ReportError>
			return Status;
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	e05b      	b.n	8001120 <Can_SetControllerMode+0x14c>
		#endif

		}
	}
	else if(Transition==CAN_CS_STOPPED)
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d12b      	bne.n	80010c6 <Can_SetControllerMode+0xf2>
	{
		if(Can_Controller_State==CAN_CS_SLEEP||Can_Controller_State==CAN_CS_STARTED)
 800106e:	4b2f      	ldr	r3, [pc, #188]	; (800112c <Can_SetControllerMode+0x158>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b03      	cmp	r3, #3
 8001074:	d003      	beq.n	800107e <Can_SetControllerMode+0xaa>
 8001076:	4b2d      	ldr	r3, [pc, #180]	; (800112c <Can_SetControllerMode+0x158>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d119      	bne.n	80010b2 <Can_SetControllerMode+0xde>
			/*
			 [SWS_Can_00263] ⌈ The function Can_SetControllerMode(CAN_CS_STOPPED)
			 shall set the bits inside the CAN hardware such that the CAN controller stops
			 participating on the network.
			 */
			CAN_MCR |=(1<<0);
 800107e:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <Can_SetControllerMode+0x160>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a2c      	ldr	r2, [pc, #176]	; (8001134 <Can_SetControllerMode+0x160>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6013      	str	r3, [r2, #0]
			if(CAN_HW_Unit_settings.CanConfigSet.CanController.CanBusoffProcessing==INTERRUPT||CAN_HW_Unit_settings.CanConfigSet.CanController.CanTxProcessing==INTERRUPT||CAN_HW_Unit_settings.CanConfigSet.CanController.CanRxProcessing==INTERRUPT)
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <Can_SetControllerMode+0x15c>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d007      	beq.n	80010a2 <Can_SetControllerMode+0xce>
 8001092:	4b27      	ldr	r3, [pc, #156]	; (8001130 <Can_SetControllerMode+0x15c>)
 8001094:	7a9b      	ldrb	r3, [r3, #10]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d003      	beq.n	80010a2 <Can_SetControllerMode+0xce>
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <Can_SetControllerMode+0x15c>)
 800109c:	7a5b      	ldrb	r3, [r3, #9]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d103      	bne.n	80010aa <Can_SetControllerMode+0xd6>
			{
				Can_DisableControllerInterrupts(Controller);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 f927 	bl	80012f8 <Can_DisableControllerInterrupts>
			}
			else
			{
				//
			}
			Can_Controller_State=CAN_CS_STOPPED;
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <Can_SetControllerMode+0x158>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	701a      	strb	r2, [r3, #0]
 80010b0:	e02e      	b.n	8001110 <Can_SetControllerMode+0x13c>
		}
		else
		{
			Status=E_NOT_OK;
 80010b2:	2301      	movs	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
			Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_SetControllerMode_ID,CAN_E_TRANSITION);
 80010b6:	2306      	movs	r3, #6
 80010b8:	2203      	movs	r2, #3
 80010ba:	2100      	movs	r1, #0
 80010bc:	200b      	movs	r0, #11
 80010be:	f000 fc61 	bl	8001984 <Det_ReportError>
			return Status;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	e02c      	b.n	8001120 <Can_SetControllerMode+0x14c>
		}
	}
	else if(Transition==CAN_CS_SLEEP)
 80010c6:	79bb      	ldrb	r3, [r7, #6]
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d117      	bne.n	80010fc <Can_SetControllerMode+0x128>
	{
		if(Can_Controller_State==CAN_CS_STOPPED)
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <Can_SetControllerMode+0x158>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d109      	bne.n	80010e8 <Can_SetControllerMode+0x114>
			/*
			 This bit is set by software to request the CAN hardware to enter the Sleep mode. Sleep
			 mode will be entered as soon as the current CAN activity (transmission or reception of a
			 CAN frame) has been completed.
			 */
			CAN_MCR |=(1<<1);
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <Can_SetControllerMode+0x160>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a16      	ldr	r2, [pc, #88]	; (8001134 <Can_SetControllerMode+0x160>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	6013      	str	r3, [r2, #0]
			Can_Controller_State=CAN_CS_SLEEP;
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <Can_SetControllerMode+0x158>)
 80010e2:	2203      	movs	r2, #3
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e013      	b.n	8001110 <Can_SetControllerMode+0x13c>
			/*
			  When the function Can_SetControllerMode(CAN_CS_SLEEP)
			 is entered and the CAN controller is neither in state STOPPED nor in state SLEEP, it
			 shall detect a invalid state transition
			 */
			Status=E_NOT_OK;
 80010e8:	2301      	movs	r3, #1
 80010ea:	73fb      	strb	r3, [r7, #15]
			Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_SetControllerMode_ID,CAN_E_TRANSITION);
 80010ec:	2306      	movs	r3, #6
 80010ee:	2203      	movs	r2, #3
 80010f0:	2100      	movs	r1, #0
 80010f2:	200b      	movs	r0, #11
 80010f4:	f000 fc46 	bl	8001984 <Det_ReportError>
			return Status;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	e011      	b.n	8001120 <Can_SetControllerMode+0x14c>
		[SWS_Can_00200] ⌈ If development error detection for the Can module is enabled: if
		an invalid transition has been requested, the function Can_SetControllerMode shall
		raise the error CAN_E_TRANSITION and return E_NOT_OK.
		*/
	#if(CanDevErrorDetect==STD_ON)
		Status=E_NOT_OK;
 80010fc:	2301      	movs	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
		Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_SetControllerMode_ID,CAN_E_TRANSITION);
 8001100:	2306      	movs	r3, #6
 8001102:	2203      	movs	r2, #3
 8001104:	2100      	movs	r1, #0
 8001106:	200b      	movs	r0, #11
 8001108:	f000 fc3c 	bl	8001984 <Det_ReportError>
		return Status;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	e007      	b.n	8001120 <Can_SetControllerMode+0x14c>
	}
	/*
	 The Can module notifies the upper layer (CanIf_ControllerModeIndication) after a
	 successful state transition about the new state.
	 */
	CanIf_ControllerModeIndication(Controller,Can_Controller_State);
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <Can_SetControllerMode+0x158>)
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fb09 	bl	8001730 <CanIf_ControllerModeIndication>
	return Status;
 800111e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200000f0 	.word	0x200000f0
 800112c:	200000f1 	.word	0x200000f1
 8001130:	20000190 	.word	0x20000190
 8001134:	40006400 	.word	0x40006400
 8001138:	40006404 	.word	0x40006404

0800113c <Can_Write>:
                          CAN_BUSY (No TX hardware buffer available or pre-emptive call
                          of Can_Write that can't be implemented re-entrant)
 * Description			: This function is called by CanIf to pass a CAN message to CanDrv for transmission.
******************************************************************************/
Std_ReturnType Can_Write (Can_HwHandleType Hth,const Can_PduType* PduInfo)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Status;
	Status=E_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	72fb      	strb	r3, [r7, #11]
	/*
	 If development error detection for the Can module is enabled:
	 The function Can_Write shall raise the error CAN_E_UNINIT and shall return
	 E_NOT_OK if the driver is not yet initialized
	*/
	if(CanDriverState!=CAN_READY)
 800114c:	4b66      	ldr	r3, [pc, #408]	; (80012e8 <Can_Write+0x1ac>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d009      	beq.n	8001168 <Can_Write+0x2c>
	{
		Status=E_NOT_OK;
 8001154:	2301      	movs	r3, #1
 8001156:	72fb      	strb	r3, [r7, #11]
		Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_Write_ID,CAN_E_UNINIT);
 8001158:	2305      	movs	r3, #5
 800115a:	2206      	movs	r2, #6
 800115c:	2100      	movs	r1, #0
 800115e:	200b      	movs	r0, #11
 8001160:	f000 fc10 	bl	8001984 <Det_ReportError>
		return Status;
 8001164:	7afb      	ldrb	r3, [r7, #11]
 8001166:	e0ba      	b.n	80012de <Can_Write+0x1a2>
	/*
	 [SWS_Can_00217] ⌈ If development error detection for the Can module is enabled:
	 The function Can_Write shall raise the error CAN_E_PARAM_HANDLE and shall
	 return E_NOT_OK if the parameter Hth is not a configured Hardware Transmit Handle
	 */
	if(CAN_HW_Unit_settings.CanConfigSet.CanHardwareObject[Hth].CanObjectType==RECEIVE)
 8001168:	79fa      	ldrb	r2, [r7, #7]
 800116a:	4960      	ldr	r1, [pc, #384]	; (80012ec <Can_Write+0x1b0>)
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	3332      	adds	r3, #50	; 0x32
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d109      	bne.n	8001192 <Can_Write+0x56>
	{
		Status=E_NOT_OK;
 800117e:	2301      	movs	r3, #1
 8001180:	72fb      	strb	r3, [r7, #11]
		Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_Write_ID,CAN_E_PARAM_HANDLE);
 8001182:	2302      	movs	r3, #2
 8001184:	2206      	movs	r2, #6
 8001186:	2100      	movs	r1, #0
 8001188:	200b      	movs	r0, #11
 800118a:	f000 fbfb 	bl	8001984 <Det_ReportError>
		return Status;
 800118e:	7afb      	ldrb	r3, [r7, #11]
 8001190:	e0a5      	b.n	80012de <Can_Write+0x1a2>
	/*
	 If development error detection for CanDrv is enabled:
	 Can_Write() shall raise CAN_E_PARAM_POINTER and shall return E_NOT_OK if the
	 parameter PduInfo is a null pointer
	 */
	if(PduInfo==NULL_PTR)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d109      	bne.n	80011ac <Can_Write+0x70>
	{
		Status=E_NOT_OK;
 8001198:	2301      	movs	r3, #1
 800119a:	72fb      	strb	r3, [r7, #11]
		Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_Write_ID,CAN_E_PARAM_POINTER);
 800119c:	2301      	movs	r3, #1
 800119e:	2206      	movs	r2, #6
 80011a0:	2100      	movs	r1, #0
 80011a2:	200b      	movs	r0, #11
 80011a4:	f000 fbee 	bl	8001984 <Det_ReportError>
		return Status;
 80011a8:	7afb      	ldrb	r3, [r7, #11]
 80011aa:	e098      	b.n	80012de <Can_Write+0x1a2>
	 [SWS_Can_00218] ⌈ The function Can_Write shall return E_NOT_OK and if
	 development error detection for the CAN module is enabled shall raise the error
	 CAN_E_PARAM_DATA_LENGTH:
	 -If the length is more than 8 byte and the CAN controller is not in CAN FD mode
	 */
	if(PduInfo->length>8)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	7a5b      	ldrb	r3, [r3, #9]
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d909      	bls.n	80011c8 <Can_Write+0x8c>
	{
		Status=E_NOT_OK;
 80011b4:	2301      	movs	r3, #1
 80011b6:	72fb      	strb	r3, [r7, #11]
		Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_Write_ID,CAN_E_PARAM_DATA_LENGTH);
 80011b8:	2303      	movs	r3, #3
 80011ba:	2206      	movs	r2, #6
 80011bc:	2100      	movs	r1, #0
 80011be:	200b      	movs	r0, #11
 80011c0:	f000 fbe0 	bl	8001984 <Det_ReportError>
		return Status;
 80011c4:	7afb      	ldrb	r3, [r7, #11]
 80011c6:	e08a      	b.n	80012de <Can_Write+0x1a2>
	 If development error detection for CanDrv is enabled:
	 Can_Write() shall raise CAN_E_PARAM_POINTER and shall return E_NOT_OK if the
	 trigger transmit API is disabled for this hardware object (CanTriggerTransmitEnable =
	 FALSE) and the SDU pointer inside PduInfo is a null pointer.
	 */
	if(PduInfo->sdu==NULL_PTR)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d114      	bne.n	80011fa <Can_Write+0xbe>
	{
		if(CAN_HW_Unit_settings.CanConfigSet.CanHardwareObject[Hth].CanTriggerTransmitEnable==FALSE)
 80011d0:	79fa      	ldrb	r2, [r7, #7]
 80011d2:	4946      	ldr	r1, [pc, #280]	; (80012ec <Can_Write+0x1b0>)
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	3333      	adds	r3, #51	; 0x33
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d109      	bne.n	80011fa <Can_Write+0xbe>
		{
			Status=E_NOT_OK;
 80011e6:	2301      	movs	r3, #1
 80011e8:	72fb      	strb	r3, [r7, #11]
			Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_Write_ID,CAN_E_PARAM_DATA_LENGTH);
 80011ea:	2303      	movs	r3, #3
 80011ec:	2206      	movs	r2, #6
 80011ee:	2100      	movs	r1, #0
 80011f0:	200b      	movs	r0, #11
 80011f2:	f000 fbc7 	bl	8001984 <Det_ReportError>
			return Status;
 80011f6:	7afb      	ldrb	r3, [r7, #11]
 80011f8:	e071      	b.n	80012de <Can_Write+0x1a2>
#endif
	/*
	 The function Can_Write first checks if the hardware transmit object that is identified
	 by the HTH is free and if another Can_Write is ongoing for the same HTH.
	 */
	if(Message_ObjectStatus[Hth].Object_Free==TRUE)
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	4a3c      	ldr	r2, [pc, #240]	; (80012f0 <Can_Write+0x1b4>)
 80011fe:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d168      	bne.n	80012d8 <Can_Write+0x19c>
	{
		// The mutex for that HTH is set to ‘signaled’
		Message_ObjectStatus[Hth].Object_Free=FALSE;
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	4a39      	ldr	r2, [pc, #228]	; (80012f0 <Can_Write+0x1b4>)
 800120a:	2100      	movs	r1, #0
 800120c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		Message_ObjectStatus[Hth].mailbox=MCAL_CAN_Get_TX_Mailboxes_Empty();
 8001210:	79fc      	ldrb	r4, [r7, #7]
 8001212:	f7ff fd0b 	bl	8000c2c <MCAL_CAN_Get_TX_Mailboxes_Empty>
 8001216:	4603      	mov	r3, r0
 8001218:	4619      	mov	r1, r3
 800121a:	4a35      	ldr	r2, [pc, #212]	; (80012f0 <Can_Write+0x1b4>)
 800121c:	00a3      	lsls	r3, r4, #2
 800121e:	4413      	add	r3, r2
 8001220:	460a      	mov	r2, r1
 8001222:	709a      	strb	r2, [r3, #2]
		Message_ObjectStatus[Hth].CanObjectId=Hth;
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	4a32      	ldr	r2, [pc, #200]	; (80012f0 <Can_Write+0x1b4>)
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	79fa      	ldrb	r2, [r7, #7]
 800122e:	705a      	strb	r2, [r3, #1]
		Message_ObjectStatus[Hth].swPduHandle=PduInfo->swPduHandle;
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	7a11      	ldrb	r1, [r2, #8]
 8001236:	4a2e      	ldr	r2, [pc, #184]	; (80012f0 <Can_Write+0x1b4>)
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	460a      	mov	r2, r1
 800123e:	70da      	strb	r2, [r3, #3]
		/*
		 The CAN Frame has to be sent according to the two most
		 significant bits of Can_PduType->id. The CAN FD frame bit is only evaluated if
		 CAN Controller is in CAN FD mode (valid CanControllerFdBaudrateConfig).
		 */
		Message_Object[Hth].DLC=PduInfo->length;
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	7a51      	ldrb	r1, [r2, #9]
 8001246:	4a2b      	ldr	r2, [pc, #172]	; (80012f4 <Can_Write+0x1b8>)
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	4413      	add	r3, r2
 800124c:	3304      	adds	r3, #4
 800124e:	460a      	mov	r2, r1
 8001250:	701a      	strb	r2, [r3, #0]
		if((PduInfo->id&(3<<30))==0)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10d      	bne.n	800127a <Can_Write+0x13e>
		{
			Message_Object[Hth].IDE=CAN_IDE_Standard;
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <Can_Write+0x1b8>)
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	4413      	add	r3, r2
 8001266:	330e      	adds	r3, #14
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
			Message_Object[Hth].ID=PduInfo->id;
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	4920      	ldr	r1, [pc, #128]	; (80012f4 <Can_Write+0x1b8>)
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	440b      	add	r3, r1
 8001278:	601a      	str	r2, [r3, #0]
		else if((PduInfo->id&(3<<30))==2)
		{
			Message_Object[Hth].IDE=CAN_IDE_Extended;
			Message_Object[Hth].ID=(PduInfo->id&(0x1FFFFFFF));
		}
		Message_Object[Hth].RTR=CAN_RTR_Data_Frame;
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4a1d      	ldr	r2, [pc, #116]	; (80012f4 <Can_Write+0x1b8>)
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	4413      	add	r3, r2
 8001282:	330d      	adds	r3, #13
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<PduInfo->length;i++)
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	e010      	b.n	80012b0 <Can_Write+0x174>
		{
			Message_Object[Hth].SDU[i]=PduInfo->sdu[i];
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	441a      	add	r2, r3
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	7811      	ldrb	r1, [r2, #0]
 800129a:	4a16      	ldr	r2, [pc, #88]	; (80012f4 <Can_Write+0x1b8>)
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	441a      	add	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	3305      	adds	r3, #5
 80012a6:	460a      	mov	r2, r1
 80012a8:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<PduInfo->length;i++)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3301      	adds	r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	7a5b      	ldrb	r3, [r3, #9]
 80012b4:	461a      	mov	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4293      	cmp	r3, r2
 80012ba:	dbe8      	blt.n	800128e <Can_Write+0x152>
		}
		MCAL_CAN_Add_TX_Message(&Message_Object[Hth],Message_ObjectStatus[Hth].mailbox);
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <Can_Write+0x1b8>)
 80012c2:	1898      	adds	r0, r3, r2
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <Can_Write+0x1b4>)
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	789b      	ldrb	r3, [r3, #2]
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff fcce 	bl	8000c70 <MCAL_CAN_Add_TX_Message>
 	 	2. The function Can_Write shall return CAN_BUSY
		 */
		Status=CAN_BUSY;
		return Status;
	}
	return Status;
 80012d4:	7afb      	ldrb	r3, [r7, #11]
 80012d6:	e002      	b.n	80012de <Can_Write+0x1a2>
		Status=CAN_BUSY;
 80012d8:	2302      	movs	r3, #2
 80012da:	72fb      	strb	r3, [r7, #11]
		return Status;
 80012dc:	7afb      	ldrb	r3, [r7, #11]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd90      	pop	{r4, r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200000f0 	.word	0x200000f0
 80012ec:	20000190 	.word	0x20000190
 80012f0:	20000138 	.word	0x20000138
 80012f4:	20000150 	.word	0x20000150

080012f8 <Can_DisableControllerInterrupts>:
 * Parameters (out)  	: None
 * Return value      	: None
 * Description       	: This function disables all interrupts for this CAN controller
*******************************************************************************/
void Can_DisableControllerInterrupts (uint8 Controller)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	/*
	 [SWS_Can_00205] If development error detection for the Can module is enabled:
	 The function Can_DisableControllerInterrupts shall raise the error CAN_E_UNINIT if
	 the driver not yet initialized.
	 */
	if(CanDriverState!=CAN_READY)
 8001302:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <Can_DisableControllerInterrupts+0xc0>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d005      	beq.n	8001316 <Can_DisableControllerInterrupts+0x1e>
	Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_DisableControllerInterrupts_ID,CAN_E_UNINIT);
 800130a:	2305      	movs	r3, #5
 800130c:	2204      	movs	r2, #4
 800130e:	2100      	movs	r1, #0
 8001310:	200b      	movs	r0, #11
 8001312:	f000 fb37 	bl	8001984 <Det_ReportError>
#endif
	if(CAN_HW_Unit_settings.CanConfigSet.CanController.CanBusoffProcessing==INTERRUPT||CAN_HW_Unit_settings.CanConfigSet.CanController.CanTxProcessing==INTERRUPT||CAN_HW_Unit_settings.CanConfigSet.CanController.CanRxProcessing==INTERRUPT)
 8001316:	4b29      	ldr	r3, [pc, #164]	; (80013bc <Can_DisableControllerInterrupts+0xc4>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d007      	beq.n	800132e <Can_DisableControllerInterrupts+0x36>
 800131e:	4b27      	ldr	r3, [pc, #156]	; (80013bc <Can_DisableControllerInterrupts+0xc4>)
 8001320:	7a9b      	ldrb	r3, [r3, #10]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d003      	beq.n	800132e <Can_DisableControllerInterrupts+0x36>
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <Can_DisableControllerInterrupts+0xc4>)
 8001328:	7a5b      	ldrb	r3, [r3, #9]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d140      	bne.n	80013b0 <Can_DisableControllerInterrupts+0xb8>
		/*
		 The function Can_DisableControllerInterrupts can increase a counter on every
		 execution that indicates how many Can_EnableControllerInterrupts need to be called
		 before the interrupts will be enabled
		 */
		Interrupt_Disable_Counter++;
 800132e:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <Can_DisableControllerInterrupts+0xc8>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <Can_DisableControllerInterrupts+0xc8>)
 8001338:	701a      	strb	r2, [r3, #0]
		// disable all interrupts for that CAN controller only, if interrupts for that CAN Controller are enabled.
		if(CAN_IER&(1<<0))
 800133a:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <Can_DisableControllerInterrupts+0xcc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d034      	beq.n	80013b0 <Can_DisableControllerInterrupts+0xb8>
			/*
			 When Can_EnableControllerInterrupts has been called several
			 times, Can_DisableControllerInterrupts must be called as many times before the
			 interrupts are re-disabled.
			*/
			if(Interrupt_Enable_Counter>0)
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <Can_DisableControllerInterrupts+0xd0>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d006      	beq.n	800135c <Can_DisableControllerInterrupts+0x64>
			{
				Interrupt_Enable_Counter--;
 800134e:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <Can_DisableControllerInterrupts+0xd0>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	3b01      	subs	r3, #1
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <Can_DisableControllerInterrupts+0xd0>)
 8001358:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		//
	}
}
 800135a:	e029      	b.n	80013b0 <Can_DisableControllerInterrupts+0xb8>
				CAN_IER &=~(1<<0);
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <Can_DisableControllerInterrupts+0xcc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a18      	ldr	r2, [pc, #96]	; (80013c4 <Can_DisableControllerInterrupts+0xcc>)
 8001362:	f023 0301 	bic.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]
				CAN_IER &=~(1<<1);
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <Can_DisableControllerInterrupts+0xcc>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <Can_DisableControllerInterrupts+0xcc>)
 800136e:	f023 0302 	bic.w	r3, r3, #2
 8001372:	6013      	str	r3, [r2, #0]
				CAN_IER &=~(1<<2);
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <Can_DisableControllerInterrupts+0xcc>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <Can_DisableControllerInterrupts+0xcc>)
 800137a:	f023 0304 	bic.w	r3, r3, #4
 800137e:	6013      	str	r3, [r2, #0]
				CAN_IER &=~(1<<3);
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <Can_DisableControllerInterrupts+0xcc>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <Can_DisableControllerInterrupts+0xcc>)
 8001386:	f023 0308 	bic.w	r3, r3, #8
 800138a:	6013      	str	r3, [r2, #0]
				CAN_IER &=~(1<<4);
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <Can_DisableControllerInterrupts+0xcc>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <Can_DisableControllerInterrupts+0xcc>)
 8001392:	f023 0310 	bic.w	r3, r3, #16
 8001396:	6013      	str	r3, [r2, #0]
				CAN_IER &=~(1<<5);
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <Can_DisableControllerInterrupts+0xcc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <Can_DisableControllerInterrupts+0xcc>)
 800139e:	f023 0320 	bic.w	r3, r3, #32
 80013a2:	6013      	str	r3, [r2, #0]
				CAN_IER &=~(1<<6);
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <Can_DisableControllerInterrupts+0xcc>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <Can_DisableControllerInterrupts+0xcc>)
 80013aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200000f0 	.word	0x200000f0
 80013bc:	20000190 	.word	0x20000190
 80013c0:	200000f3 	.word	0x200000f3
 80013c4:	40006414 	.word	0x40006414
 80013c8:	200000f2 	.word	0x200000f2

080013cc <Can_EnableControllerInterrupts>:
 * Parameters (out)  	: None
 * Return value      	: None
 * Description       	: This function enables all allowed interrupts
******************************************************************************/
void Can_EnableControllerInterrupts (uint8 Controller)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
	/*
	 [SWS_Can_00209] If development error detection for the Can module is enabled:
	 The function Can_EnableControllerInterrupts shall raise the error CAN_E_UNINIT if
	 the driver not yet initialized.
	 */
	if(CanDriverState!=CAN_READY)
 80013d6:	4b2d      	ldr	r3, [pc, #180]	; (800148c <Can_EnableControllerInterrupts+0xc0>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d005      	beq.n	80013ea <Can_EnableControllerInterrupts+0x1e>
	Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_EnableControllerInterrupts_ID,CAN_E_UNINIT);
 80013de:	2305      	movs	r3, #5
 80013e0:	2205      	movs	r2, #5
 80013e2:	2100      	movs	r1, #0
 80013e4:	200b      	movs	r0, #11
 80013e6:	f000 facd 	bl	8001984 <Det_ReportError>
#endif
	if(CAN_HW_Unit_settings.CanConfigSet.CanController.CanBusoffProcessing==INTERRUPT||CAN_HW_Unit_settings.CanConfigSet.CanController.CanTxProcessing==INTERRUPT||CAN_HW_Unit_settings.CanConfigSet.CanController.CanRxProcessing==INTERRUPT)
 80013ea:	4b29      	ldr	r3, [pc, #164]	; (8001490 <Can_EnableControllerInterrupts+0xc4>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d007      	beq.n	8001402 <Can_EnableControllerInterrupts+0x36>
 80013f2:	4b27      	ldr	r3, [pc, #156]	; (8001490 <Can_EnableControllerInterrupts+0xc4>)
 80013f4:	7a9b      	ldrb	r3, [r3, #10]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d003      	beq.n	8001402 <Can_EnableControllerInterrupts+0x36>
 80013fa:	4b25      	ldr	r3, [pc, #148]	; (8001490 <Can_EnableControllerInterrupts+0xc4>)
 80013fc:	7a5b      	ldrb	r3, [r3, #9]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d140      	bne.n	8001484 <Can_EnableControllerInterrupts+0xb8>
		/*
		 The function Can_EnableControllerInterrupts can increase a counter on every
		 execution that indicates how many Can_DisableControllerInterrupts need to be called
		 before the interrupts will be disabled
		 */
		Interrupt_Enable_Counter++;
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <Can_EnableControllerInterrupts+0xc8>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <Can_EnableControllerInterrupts+0xc8>)
 800140c:	701a      	strb	r2, [r3, #0]
		// enable all interrupts for that CAN controller only, if interrupts for that CAN Controller are disabled.
		if((CAN_IER&(1<<0))==0)
 800140e:	4b22      	ldr	r3, [pc, #136]	; (8001498 <Can_EnableControllerInterrupts+0xcc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d134      	bne.n	8001484 <Can_EnableControllerInterrupts+0xb8>
			/*
			 [SWS_Can_00202] When Can_DisableControllerInterrupts has been called several
			 times, Can_EnableControllerInterrupts must be called as many times before the
			 interrupts are re-enabled.
			*/
			if(Interrupt_Disable_Counter>0)
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <Can_EnableControllerInterrupts+0xd0>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d006      	beq.n	8001430 <Can_EnableControllerInterrupts+0x64>
			{
				Interrupt_Disable_Counter--;
 8001422:	4b1e      	ldr	r3, [pc, #120]	; (800149c <Can_EnableControllerInterrupts+0xd0>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	3b01      	subs	r3, #1
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4b1c      	ldr	r3, [pc, #112]	; (800149c <Can_EnableControllerInterrupts+0xd0>)
 800142c:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		//
	}
}
 800142e:	e029      	b.n	8001484 <Can_EnableControllerInterrupts+0xb8>
				CAN_IER |=(1<<0);
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <Can_EnableControllerInterrupts+0xcc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a18      	ldr	r2, [pc, #96]	; (8001498 <Can_EnableControllerInterrupts+0xcc>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6013      	str	r3, [r2, #0]
				CAN_IER |=(1<<1);
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <Can_EnableControllerInterrupts+0xcc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a15      	ldr	r2, [pc, #84]	; (8001498 <Can_EnableControllerInterrupts+0xcc>)
 8001442:	f043 0302 	orr.w	r3, r3, #2
 8001446:	6013      	str	r3, [r2, #0]
				CAN_IER |=(1<<2);
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <Can_EnableControllerInterrupts+0xcc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a12      	ldr	r2, [pc, #72]	; (8001498 <Can_EnableControllerInterrupts+0xcc>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6013      	str	r3, [r2, #0]
				CAN_IER |=(1<<3);
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <Can_EnableControllerInterrupts+0xcc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <Can_EnableControllerInterrupts+0xcc>)
 800145a:	f043 0308 	orr.w	r3, r3, #8
 800145e:	6013      	str	r3, [r2, #0]
				CAN_IER |=(1<<4);
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <Can_EnableControllerInterrupts+0xcc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <Can_EnableControllerInterrupts+0xcc>)
 8001466:	f043 0310 	orr.w	r3, r3, #16
 800146a:	6013      	str	r3, [r2, #0]
				CAN_IER |=(1<<5);
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <Can_EnableControllerInterrupts+0xcc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a09      	ldr	r2, [pc, #36]	; (8001498 <Can_EnableControllerInterrupts+0xcc>)
 8001472:	f043 0320 	orr.w	r3, r3, #32
 8001476:	6013      	str	r3, [r2, #0]
				CAN_IER |=(1<<6);
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <Can_EnableControllerInterrupts+0xcc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <Can_EnableControllerInterrupts+0xcc>)
 800147e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200000f0 	.word	0x200000f0
 8001490:	20000190 	.word	0x20000190
 8001494:	200000f2 	.word	0x200000f2
 8001498:	40006414 	.word	0x40006414
 800149c:	200000f3 	.word	0x200000f3

080014a0 <USB_HP_CAN_TX_IRQHandler>:
}
/*************************************************************************
 *************************************ISR*********************************
 ************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
	//Check which mailbox transmit is complete
	// RQCPx: Request completed mailbox
	//Set by hardware when the last request (transmit or abort) has been performed.
	if((CAN_TSR & (1<<0))==1)
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <USB_HP_CAN_TX_IRQHandler+0x8c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d134      	bne.n	800151c <USB_HP_CAN_TX_IRQHandler+0x7c>
	{
		 //Request completed mailbox0
		CAN_TSR |=1<<0;
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <USB_HP_CAN_TX_IRQHandler+0x8c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a1d      	ldr	r2, [pc, #116]	; (800152c <USB_HP_CAN_TX_IRQHandler+0x8c>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6013      	str	r3, [r2, #0]
		for(int i=0;i<Max_Num_HOH;i++)
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	e027      	b.n	8001514 <USB_HP_CAN_TX_IRQHandler+0x74>
		{
			if(CAN_HW_Unit_settings.CanConfigSet.CanHardwareObject[i].CanObjectType==TRANSMIT)
 80014c4:	491a      	ldr	r1, [pc, #104]	; (8001530 <USB_HP_CAN_TX_IRQHandler+0x90>)
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	3332      	adds	r3, #50	; 0x32
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d119      	bne.n	800150e <USB_HP_CAN_TX_IRQHandler+0x6e>
			{
				if(Message_ObjectStatus[i].mailbox==Transmi_mailbox_0)
 80014da:	4a16      	ldr	r2, [pc, #88]	; (8001534 <USB_HP_CAN_TX_IRQHandler+0x94>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	789b      	ldrb	r3, [r3, #2]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d112      	bne.n	800150e <USB_HP_CAN_TX_IRQHandler+0x6e>
				{
					if(Message_ObjectStatus[i].Object_Free==FALSE)
 80014e8:	4a12      	ldr	r2, [pc, #72]	; (8001534 <USB_HP_CAN_TX_IRQHandler+0x94>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10c      	bne.n	800150e <USB_HP_CAN_TX_IRQHandler+0x6e>
					{
						Message_ObjectStatus[i].Object_Free=TRUE;
 80014f4:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <USB_HP_CAN_TX_IRQHandler+0x94>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2101      	movs	r1, #1
 80014fa:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
						CanIf_TxConfirmation(Message_ObjectStatus[i].swPduHandle);
 80014fe:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <USB_HP_CAN_TX_IRQHandler+0x94>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	78db      	ldrb	r3, [r3, #3]
 8001508:	4618      	mov	r0, r3
 800150a:	f000 f907 	bl	800171c <CanIf_TxConfirmation>
		for(int i=0;i<Max_Num_HOH;i++)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3301      	adds	r3, #1
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b03      	cmp	r3, #3
 8001518:	ddd4      	ble.n	80014c4 <USB_HP_CAN_TX_IRQHandler+0x24>
	}
	else
	{
		// no call back
	}
}
 800151a:	e003      	b.n	8001524 <USB_HP_CAN_TX_IRQHandler+0x84>
	else if((CAN_TSR & (1<<8))==1)
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <USB_HP_CAN_TX_IRQHandler+0x8c>)
 800151e:	681b      	ldr	r3, [r3, #0]
	else if((CAN_TSR & (1<<16))==1)
 8001520:	4b02      	ldr	r3, [pc, #8]	; (800152c <USB_HP_CAN_TX_IRQHandler+0x8c>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40006408 	.word	0x40006408
 8001530:	20000190 	.word	0x20000190
 8001534:	20000138 	.word	0x20000138

08001538 <USB_LP_CAN_RX0_IRQHandler>:

void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
	//These bits indicate how many messages are pending in the receive FIFO
	if ((CAN_RF0R & (3<<0))!=0)
 800153e:	4b55      	ldr	r3, [pc, #340]	; (8001694 <USB_LP_CAN_RX0_IRQHandler+0x15c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 809c 	beq.w	8001684 <USB_LP_CAN_RX0_IRQHandler+0x14c>
	{
		for(int i=0;i<Max_Num_HOH;i++)
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
 8001550:	e08d      	b.n	800166e <USB_LP_CAN_RX0_IRQHandler+0x136>
		{
			if(CAN_HW_Unit_settings.CanConfigSet.CanHardwareObject[i].CanObjectType==RECEIVE)
 8001552:	4951      	ldr	r1, [pc, #324]	; (8001698 <USB_LP_CAN_RX0_IRQHandler+0x160>)
 8001554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	3332      	adds	r3, #50	; 0x32
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d17f      	bne.n	8001668 <USB_LP_CAN_RX0_IRQHandler+0x130>
			{
				if(Message_ObjectStatus[i].Object_Free==TRUE)
 8001568:	4a4c      	ldr	r2, [pc, #304]	; (800169c <USB_LP_CAN_RX0_IRQHandler+0x164>)
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d179      	bne.n	8001668 <USB_LP_CAN_RX0_IRQHandler+0x130>
				{
					//Identifier extension
					if((CAN_RX_FIFO_0->CAN_RIxR & (1<<2))==1)
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <USB_LP_CAN_RX0_IRQHandler+0x168>)
 8001576:	681b      	ldr	r3, [r3, #0]
						}
					}
					else
					{
						//0: Standard identifier
						if(CAN_HW_Unit_settings.CanConfigSet.CanHardwareObject[i].CanIdType==STANDARD)
 8001578:	4947      	ldr	r1, [pc, #284]	; (8001698 <USB_LP_CAN_RX0_IRQHandler+0x160>)
 800157a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	3330      	adds	r3, #48	; 0x30
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d166      	bne.n	800165c <USB_LP_CAN_RX0_IRQHandler+0x124>
						{
							if((CAN_RX_FIFO_0->CAN_RIxR>>21)==CAN_HW_Unit_settings.CanConfigSet.CanHardwareObject[i].CanHwFilter.CanHwFilterCode)
 800158e:	4b44      	ldr	r3, [pc, #272]	; (80016a0 <USB_LP_CAN_RX0_IRQHandler+0x168>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	0d59      	lsrs	r1, r3, #21
 8001594:	4840      	ldr	r0, [pc, #256]	; (8001698 <USB_LP_CAN_RX0_IRQHandler+0x160>)
 8001596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4403      	add	r3, r0
 80015a2:	3338      	adds	r3, #56	; 0x38
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4299      	cmp	r1, r3
 80015a8:	d15e      	bne.n	8001668 <USB_LP_CAN_RX0_IRQHandler+0x130>
							{
								Can_HwType Mailbox;
								PduInfoType PduInfoPtr;
								//HOH is busy
								Message_ObjectStatus[i].Object_Free=FALSE;
 80015aa:	4a3c      	ldr	r2, [pc, #240]	; (800169c <USB_LP_CAN_RX0_IRQHandler+0x164>)
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	2100      	movs	r1, #0
 80015b0:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
								//00 CAN FD frame with Extended CAN ID
								Message_Object[i].ID=(CAN_RX_FIFO_0->CAN_RIxR>>21);
 80015b4:	4b3a      	ldr	r3, [pc, #232]	; (80016a0 <USB_LP_CAN_RX0_IRQHandler+0x168>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	0d5a      	lsrs	r2, r3, #21
 80015ba:	493a      	ldr	r1, [pc, #232]	; (80016a4 <USB_LP_CAN_RX0_IRQHandler+0x16c>)
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	440b      	add	r3, r1
 80015c2:	601a      	str	r2, [r3, #0]
								//Data Length
								Message_Object[i].DLC=(CAN_RX_FIFO_0->CAN_RDTxR & 0x0000000F);
 80015c4:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <USB_LP_CAN_RX0_IRQHandler+0x168>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	b2d9      	uxtb	r1, r3
 80015d0:	4a34      	ldr	r2, [pc, #208]	; (80016a4 <USB_LP_CAN_RX0_IRQHandler+0x16c>)
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	011b      	lsls	r3, r3, #4
 80015d6:	4413      	add	r3, r2
 80015d8:	3304      	adds	r3, #4
 80015da:	460a      	mov	r2, r1
 80015dc:	701a      	strb	r2, [r3, #0]
								//Data
								*((volatile uint32*)Message_Object[i].SDU)=CAN_RX_FIFO_0->CAN_RDLxR;
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <USB_LP_CAN_RX0_IRQHandler+0x168>)
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	492f      	ldr	r1, [pc, #188]	; (80016a4 <USB_LP_CAN_RX0_IRQHandler+0x16c>)
 80015e6:	440b      	add	r3, r1
 80015e8:	3305      	adds	r3, #5
 80015ea:	6892      	ldr	r2, [r2, #8]
 80015ec:	601a      	str	r2, [r3, #0]
								*(((volatile uint32*)Message_Object[i].SDU)+1)=CAN_RX_FIFO_0->CAN_RDHxR;
 80015ee:	4a2c      	ldr	r2, [pc, #176]	; (80016a0 <USB_LP_CAN_RX0_IRQHandler+0x168>)
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	492b      	ldr	r1, [pc, #172]	; (80016a4 <USB_LP_CAN_RX0_IRQHandler+0x16c>)
 80015f6:	440b      	add	r3, r1
 80015f8:	3305      	adds	r3, #5
 80015fa:	3304      	adds	r3, #4
 80015fc:	68d2      	ldr	r2, [r2, #12]
 80015fe:	601a      	str	r2, [r3, #0]
								Mailbox.CanId=Message_Object[i].ID;
 8001600:	4a28      	ldr	r2, [pc, #160]	; (80016a4 <USB_LP_CAN_RX0_IRQHandler+0x16c>)
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	4413      	add	r3, r2
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	60fb      	str	r3, [r7, #12]
								Mailbox.Hoh=CAN_HW_Unit_settings.CanConfigSet.CanHardwareObject[i].CanObjectId;
 800160c:	4922      	ldr	r1, [pc, #136]	; (8001698 <USB_LP_CAN_RX0_IRQHandler+0x160>)
 800160e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3331      	adds	r3, #49	; 0x31
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	743b      	strb	r3, [r7, #16]
								Mailbox.ControllerId=CAN_HW_Unit_settings.CanConfigSet.CanController.CanControllerId;
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <USB_LP_CAN_RX0_IRQHandler+0x160>)
 8001622:	7a1b      	ldrb	r3, [r3, #8]
 8001624:	747b      	strb	r3, [r7, #17]
								PduInfoPtr.SduDataPtr=Message_Object[i].SDU;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <USB_LP_CAN_RX0_IRQHandler+0x16c>)
 800162c:	4413      	add	r3, r2
 800162e:	3305      	adds	r3, #5
 8001630:	607b      	str	r3, [r7, #4]
								PduInfoPtr.SduLength=Message_Object[i].DLC;
 8001632:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <USB_LP_CAN_RX0_IRQHandler+0x16c>)
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	4413      	add	r3, r2
 800163a:	3304      	adds	r3, #4
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	723b      	strb	r3, [r7, #8]
								//callback function to upper layer
								//CanIf_RxIndication(CAN_HW_Unit_settings.CanConfigSet.CanHardwareObject[i].CanObjectId,Message_Object[i].ID,Message_Object[i].DLC,Message_Object[i].SDU);
								CanIf_RxIndication (&Mailbox,&PduInfoPtr);
 8001640:	1d3a      	adds	r2, r7, #4
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f82d 	bl	80016a8 <CanIf_RxIndication>
								Message_ObjectStatus[i].Object_Free=TRUE;
 800164e:	4a13      	ldr	r2, [pc, #76]	; (800169c <USB_LP_CAN_RX0_IRQHandler+0x164>)
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	2101      	movs	r1, #1
 8001654:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
								break;
 8001658:	bf00      	nop
 800165a:	e00c      	b.n	8001676 <USB_LP_CAN_RX0_IRQHandler+0x13e>
						}
						else
						{
							//Clear message
							//Set by software to release the output mailbox of the FIFO
							CAN_RF0R |=(1<<5);
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <USB_LP_CAN_RX0_IRQHandler+0x15c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0c      	ldr	r2, [pc, #48]	; (8001694 <USB_LP_CAN_RX0_IRQHandler+0x15c>)
 8001662:	f043 0320 	orr.w	r3, r3, #32
 8001666:	6013      	str	r3, [r2, #0]
		for(int i=0;i<Max_Num_HOH;i++)
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	3301      	adds	r3, #1
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	2b03      	cmp	r3, #3
 8001672:	f77f af6e 	ble.w	8001552 <USB_LP_CAN_RX0_IRQHandler+0x1a>
				//
			}
		}
		//Clear message
		//Set by software to release the output mailbox of the FIFO
		CAN_RF0R |=(1<<5);
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <USB_LP_CAN_RX0_IRQHandler+0x15c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a06      	ldr	r2, [pc, #24]	; (8001694 <USB_LP_CAN_RX0_IRQHandler+0x15c>)
 800167c:	f043 0320 	orr.w	r3, r3, #32
 8001680:	6013      	str	r3, [r2, #0]
	}
	else
	{
		//
	}
}
 8001682:	e003      	b.n	800168c <USB_LP_CAN_RX0_IRQHandler+0x154>
	else if((CAN_RF0R & (1<<3))==1)
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <USB_LP_CAN_RX0_IRQHandler+0x15c>)
 8001686:	681b      	ldr	r3, [r3, #0]
	else if((CAN_RF0R & (1<<4))==1)
 8001688:	4b02      	ldr	r3, [pc, #8]	; (8001694 <USB_LP_CAN_RX0_IRQHandler+0x15c>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	4000640c 	.word	0x4000640c
 8001698:	20000190 	.word	0x20000190
 800169c:	20000138 	.word	0x20000138
 80016a0:	400065b0 	.word	0x400065b0
 80016a4:	20000150 	.word	0x20000150

080016a8 <CanIf_RxIndication>:
PduInfoType RX_PduInfoPtr;
Can_IdType ID=0;
Can_HwHandleType HrH=0;

void CanIf_RxIndication (const Can_HwType* Mailbox,const PduInfoType* PduInfoPtr)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
	for(int i=0;i<8;i++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	e00c      	b.n	80016d2 <CanIf_RxIndication+0x2a>
	{
		Data_RX[i]=PduInfoPtr->SduDataPtr[i];
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	7819      	ldrb	r1, [r3, #0]
 80016c2:	4a11      	ldr	r2, [pc, #68]	; (8001708 <CanIf_RxIndication+0x60>)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	460a      	mov	r2, r1
 80016ca:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<8;i++)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3301      	adds	r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2b07      	cmp	r3, #7
 80016d6:	ddef      	ble.n	80016b8 <CanIf_RxIndication+0x10>
	}
	DLC_RX=PduInfoPtr->SduLength;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	791a      	ldrb	r2, [r3, #4]
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <CanIf_RxIndication+0x64>)
 80016de:	701a      	strb	r2, [r3, #0]
	ID=Mailbox->CanId;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <CanIf_RxIndication+0x68>)
 80016e6:	6013      	str	r3, [r2, #0]
	HrH=Mailbox->Hoh;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	791a      	ldrb	r2, [r3, #4]
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <CanIf_RxIndication+0x6c>)
 80016ee:	701a      	strb	r2, [r3, #0]
	RX_Mailbox.ControllerId=Mailbox->ControllerId;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	795a      	ldrb	r2, [r3, #5]
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <CanIf_RxIndication+0x70>)
 80016f6:	715a      	strb	r2, [r3, #5]
	Rte_IWrite_Empty_For_Test_Empty_For_Test_Runnable_PP_CAN_Frame_CAN_Frame(Data_RX);
 80016f8:	4803      	ldr	r0, [pc, #12]	; (8001708 <CanIf_RxIndication+0x60>)
 80016fa:	f001 fe9d 	bl	8003438 <Rte_IWrite_Empty_For_Test_Empty_For_Test_Runnable_PP_CAN_Frame_CAN_Frame>
}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200000f4 	.word	0x200000f4
 800170c:	200000fc 	.word	0x200000fc
 8001710:	20000100 	.word	0x20000100
 8001714:	20000104 	.word	0x20000104
 8001718:	2000020c 	.word	0x2000020c

0800171c <CanIf_TxConfirmation>:

void CanIf_TxConfirmation(PduIdType CanTxPduId)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]

}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <CanIf_ControllerModeIndication>:

void CanIf_ControllerModeIndication(uint8 Controller, CanIf_ControllerModeType ControllerMode)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	460a      	mov	r2, r1
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	4613      	mov	r3, r2
 800173e:	71bb      	strb	r3, [r7, #6]
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
	...

0800174c <MCAL_CAN_Config_Filter>:
* @param [in] 		-Filter_Config: configuration information for the specified Can Filter
* @retval 			-Can_Status_t	status of Can hardware (CAN_OK,CAN_ERROR,...)
* Note				-None
*/
void MCAL_CAN_Config_Filter(CAN_Filter_Config_t* Filter_Config)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	// Current Filter Bank
	CAN_Filter_Bank_TypeDef* Current_Bank ;
	switch (Filter_Config->Filter_Bank)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b0d      	cmp	r3, #13
 800175a:	d849      	bhi.n	80017f0 <MCAL_CAN_Config_Filter+0xa4>
 800175c:	a201      	add	r2, pc, #4	; (adr r2, 8001764 <MCAL_CAN_Config_Filter+0x18>)
 800175e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001762:	bf00      	nop
 8001764:	0800179d 	.word	0x0800179d
 8001768:	080017a3 	.word	0x080017a3
 800176c:	080017a9 	.word	0x080017a9
 8001770:	080017af 	.word	0x080017af
 8001774:	080017b5 	.word	0x080017b5
 8001778:	080017bb 	.word	0x080017bb
 800177c:	080017c1 	.word	0x080017c1
 8001780:	080017c7 	.word	0x080017c7
 8001784:	080017cd 	.word	0x080017cd
 8001788:	080017d3 	.word	0x080017d3
 800178c:	080017d9 	.word	0x080017d9
 8001790:	080017df 	.word	0x080017df
 8001794:	080017e5 	.word	0x080017e5
 8001798:	080017eb 	.word	0x080017eb
	{
		case CAN_Filter_Bank_0:
			Current_Bank=CAN_FBank_0;
 800179c:	4b66      	ldr	r3, [pc, #408]	; (8001938 <MCAL_CAN_Config_Filter+0x1ec>)
 800179e:	60fb      	str	r3, [r7, #12]
			break;
 80017a0:	e027      	b.n	80017f2 <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_1:
			Current_Bank=CAN_FBank_1;
 80017a2:	4b66      	ldr	r3, [pc, #408]	; (800193c <MCAL_CAN_Config_Filter+0x1f0>)
 80017a4:	60fb      	str	r3, [r7, #12]
			break;
 80017a6:	e024      	b.n	80017f2 <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_2:
			Current_Bank=CAN_FBank_2;
 80017a8:	4b65      	ldr	r3, [pc, #404]	; (8001940 <MCAL_CAN_Config_Filter+0x1f4>)
 80017aa:	60fb      	str	r3, [r7, #12]
			break;
 80017ac:	e021      	b.n	80017f2 <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_3:
			Current_Bank=CAN_FBank_3;
 80017ae:	4b65      	ldr	r3, [pc, #404]	; (8001944 <MCAL_CAN_Config_Filter+0x1f8>)
 80017b0:	60fb      	str	r3, [r7, #12]
			break;
 80017b2:	e01e      	b.n	80017f2 <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_4:
			Current_Bank=CAN_FBank_4;
 80017b4:	4b64      	ldr	r3, [pc, #400]	; (8001948 <MCAL_CAN_Config_Filter+0x1fc>)
 80017b6:	60fb      	str	r3, [r7, #12]
			break;
 80017b8:	e01b      	b.n	80017f2 <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_5:
			Current_Bank=CAN_FBank_5;
 80017ba:	4b64      	ldr	r3, [pc, #400]	; (800194c <MCAL_CAN_Config_Filter+0x200>)
 80017bc:	60fb      	str	r3, [r7, #12]
			break;
 80017be:	e018      	b.n	80017f2 <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_6:
			Current_Bank=CAN_FBank_6;
 80017c0:	4b63      	ldr	r3, [pc, #396]	; (8001950 <MCAL_CAN_Config_Filter+0x204>)
 80017c2:	60fb      	str	r3, [r7, #12]
			break;
 80017c4:	e015      	b.n	80017f2 <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_7:
			Current_Bank=CAN_FBank_7;
 80017c6:	4b63      	ldr	r3, [pc, #396]	; (8001954 <MCAL_CAN_Config_Filter+0x208>)
 80017c8:	60fb      	str	r3, [r7, #12]
			break;
 80017ca:	e012      	b.n	80017f2 <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_8:
			Current_Bank=CAN_FBank_8;
 80017cc:	4b62      	ldr	r3, [pc, #392]	; (8001958 <MCAL_CAN_Config_Filter+0x20c>)
 80017ce:	60fb      	str	r3, [r7, #12]
			break;
 80017d0:	e00f      	b.n	80017f2 <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_9:
			Current_Bank=CAN_FBank_9;
 80017d2:	4b62      	ldr	r3, [pc, #392]	; (800195c <MCAL_CAN_Config_Filter+0x210>)
 80017d4:	60fb      	str	r3, [r7, #12]
			break;
 80017d6:	e00c      	b.n	80017f2 <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_10:
			Current_Bank=CAN_FBank_10;
 80017d8:	4b61      	ldr	r3, [pc, #388]	; (8001960 <MCAL_CAN_Config_Filter+0x214>)
 80017da:	60fb      	str	r3, [r7, #12]
			break;
 80017dc:	e009      	b.n	80017f2 <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_11:
			Current_Bank=CAN_FBank_11;
 80017de:	4b61      	ldr	r3, [pc, #388]	; (8001964 <MCAL_CAN_Config_Filter+0x218>)
 80017e0:	60fb      	str	r3, [r7, #12]
			break;
 80017e2:	e006      	b.n	80017f2 <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_12:
			Current_Bank=CAN_FBank_12;
 80017e4:	4b60      	ldr	r3, [pc, #384]	; (8001968 <MCAL_CAN_Config_Filter+0x21c>)
 80017e6:	60fb      	str	r3, [r7, #12]
			break;
 80017e8:	e003      	b.n	80017f2 <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_13:
			Current_Bank=CAN_FBank_13;
 80017ea:	4b60      	ldr	r3, [pc, #384]	; (800196c <MCAL_CAN_Config_Filter+0x220>)
 80017ec:	60fb      	str	r3, [r7, #12]
			break;
 80017ee:	e000      	b.n	80017f2 <MCAL_CAN_Config_Filter+0xa6>
		default:
			break;
 80017f0:	bf00      	nop
	}
	// To configure a filter bank it must be deactivated by clearing the FACT bit in the CAN_FAR register
	// Initialization mode for the filters
	CAN_FMR |=(1<<0);
 80017f2:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <MCAL_CAN_Config_Filter+0x224>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a5e      	ldr	r2, [pc, #376]	; (8001970 <MCAL_CAN_Config_Filter+0x224>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6013      	str	r3, [r2, #0]
	//Filter x is not active
	CAN_FA1R &=~(1<<Filter_Config->Filter_Bank);
 80017fe:	4b5d      	ldr	r3, [pc, #372]	; (8001974 <MCAL_CAN_Config_Filter+0x228>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68d2      	ldr	r2, [r2, #12]
 8001806:	2101      	movs	r1, #1
 8001808:	fa01 f202 	lsl.w	r2, r1, r2
 800180c:	43d2      	mvns	r2, r2
 800180e:	4611      	mov	r1, r2
 8001810:	4a58      	ldr	r2, [pc, #352]	; (8001974 <MCAL_CAN_Config_Filter+0x228>)
 8001812:	400b      	ands	r3, r1
 8001814:	6013      	str	r3, [r2, #0]
	// The filter scale is configured by means of the corresponding FSCx bit in the CAN_FS1R register
	switch (Filter_Config->Filter_Scale)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <MCAL_CAN_Config_Filter+0xd8>
 800181e:	2b01      	cmp	r3, #1
 8001820:	d020      	beq.n	8001864 <MCAL_CAN_Config_Filter+0x118>
			// configure filter bank
			Current_Bank->CAN_FiR1=Filter_Config->Filter_ID;
			Current_Bank->CAN_FiR2=Filter_Config->Filter_Mask_ID;
			break;
		default:
			break;
 8001822:	e033      	b.n	800188c <MCAL_CAN_Config_Filter+0x140>
			CAN_FS1R &=~(1<<Filter_Config->Filter_Bank);
 8001824:	4b54      	ldr	r3, [pc, #336]	; (8001978 <MCAL_CAN_Config_Filter+0x22c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	68d2      	ldr	r2, [r2, #12]
 800182c:	2101      	movs	r1, #1
 800182e:	fa01 f202 	lsl.w	r2, r1, r2
 8001832:	43d2      	mvns	r2, r2
 8001834:	4611      	mov	r1, r2
 8001836:	4a50      	ldr	r2, [pc, #320]	; (8001978 <MCAL_CAN_Config_Filter+0x22c>)
 8001838:	400b      	ands	r3, r1
 800183a:	6013      	str	r3, [r2, #0]
			Current_Bank->CAN_FiR1=(Filter_Config->Filter_ID &(0xffff))|((Filter_Config->Filter_Mask_ID &(0xffff))<<16);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	b29a      	uxth	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	041b      	lsls	r3, r3, #16
 8001848:	431a      	orrs	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	601a      	str	r2, [r3, #0]
			Current_Bank->CAN_FiR2=((Filter_Config->Filter_ID &(0xffff0000))>>16)|(Filter_Config->Filter_Mask_ID &(0xffff0000));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0c1a      	lsrs	r2, r3, #16
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	041b      	lsls	r3, r3, #16
 800185c:	431a      	orrs	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	605a      	str	r2, [r3, #4]
			break;
 8001862:	e013      	b.n	800188c <MCAL_CAN_Config_Filter+0x140>
			CAN_FS1R |=(1<<Filter_Config->Filter_Bank);
 8001864:	4b44      	ldr	r3, [pc, #272]	; (8001978 <MCAL_CAN_Config_Filter+0x22c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	68d2      	ldr	r2, [r2, #12]
 800186c:	2101      	movs	r1, #1
 800186e:	fa01 f202 	lsl.w	r2, r1, r2
 8001872:	4611      	mov	r1, r2
 8001874:	4a40      	ldr	r2, [pc, #256]	; (8001978 <MCAL_CAN_Config_Filter+0x22c>)
 8001876:	430b      	orrs	r3, r1
 8001878:	6013      	str	r3, [r2, #0]
			Current_Bank->CAN_FiR1=Filter_Config->Filter_ID;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	601a      	str	r2, [r3, #0]
			Current_Bank->CAN_FiR2=Filter_Config->Filter_Mask_ID;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	605a      	str	r2, [r3, #4]
			break;
 800188a:	bf00      	nop
	}
	//The identifier list or identifier mask mode is configured by means of the FBMx bits in the CAN_FM1R register.
	switch (Filter_Config->Filter_Mode)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <MCAL_CAN_Config_Filter+0x14e>
 8001894:	2b01      	cmp	r3, #1
 8001896:	d00d      	beq.n	80018b4 <MCAL_CAN_Config_Filter+0x168>
			break;
		case CAN_Filter_Mode_List:
			CAN_FM1R |=(1<<Filter_Config->Filter_Bank);
			break;
		default:
			break;
 8001898:	e018      	b.n	80018cc <MCAL_CAN_Config_Filter+0x180>
			CAN_FM1R &=~(1<<Filter_Config->Filter_Bank);
 800189a:	4b38      	ldr	r3, [pc, #224]	; (800197c <MCAL_CAN_Config_Filter+0x230>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68d2      	ldr	r2, [r2, #12]
 80018a2:	2101      	movs	r1, #1
 80018a4:	fa01 f202 	lsl.w	r2, r1, r2
 80018a8:	43d2      	mvns	r2, r2
 80018aa:	4611      	mov	r1, r2
 80018ac:	4a33      	ldr	r2, [pc, #204]	; (800197c <MCAL_CAN_Config_Filter+0x230>)
 80018ae:	400b      	ands	r3, r1
 80018b0:	6013      	str	r3, [r2, #0]
			break;
 80018b2:	e00b      	b.n	80018cc <MCAL_CAN_Config_Filter+0x180>
			CAN_FM1R |=(1<<Filter_Config->Filter_Bank);
 80018b4:	4b31      	ldr	r3, [pc, #196]	; (800197c <MCAL_CAN_Config_Filter+0x230>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	68d2      	ldr	r2, [r2, #12]
 80018bc:	2101      	movs	r1, #1
 80018be:	fa01 f202 	lsl.w	r2, r1, r2
 80018c2:	4611      	mov	r1, r2
 80018c4:	4a2d      	ldr	r2, [pc, #180]	; (800197c <MCAL_CAN_Config_Filter+0x230>)
 80018c6:	430b      	orrs	r3, r1
 80018c8:	6013      	str	r3, [r2, #0]
			break;
 80018ca:	bf00      	nop
	}
	//The message passing through this filter will be stored in the specified FIFO
	switch (Filter_Config->Filter_FIFO_Assignment)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <MCAL_CAN_Config_Filter+0x18e>
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d00d      	beq.n	80018f4 <MCAL_CAN_Config_Filter+0x1a8>
			break;
		case CAN_Filter_FIFO_Assignment_FIFO1:
			CAN_FFA1R |=(1<<Filter_Config->Filter_Bank);
			break;
		default:
			break;
 80018d8:	e018      	b.n	800190c <MCAL_CAN_Config_Filter+0x1c0>
			CAN_FFA1R &=~(1<<Filter_Config->Filter_Bank);
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <MCAL_CAN_Config_Filter+0x234>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68d2      	ldr	r2, [r2, #12]
 80018e2:	2101      	movs	r1, #1
 80018e4:	fa01 f202 	lsl.w	r2, r1, r2
 80018e8:	43d2      	mvns	r2, r2
 80018ea:	4611      	mov	r1, r2
 80018ec:	4a24      	ldr	r2, [pc, #144]	; (8001980 <MCAL_CAN_Config_Filter+0x234>)
 80018ee:	400b      	ands	r3, r1
 80018f0:	6013      	str	r3, [r2, #0]
			break;
 80018f2:	e00b      	b.n	800190c <MCAL_CAN_Config_Filter+0x1c0>
			CAN_FFA1R |=(1<<Filter_Config->Filter_Bank);
 80018f4:	4b22      	ldr	r3, [pc, #136]	; (8001980 <MCAL_CAN_Config_Filter+0x234>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	68d2      	ldr	r2, [r2, #12]
 80018fc:	2101      	movs	r1, #1
 80018fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001902:	4611      	mov	r1, r2
 8001904:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <MCAL_CAN_Config_Filter+0x234>)
 8001906:	430b      	orrs	r3, r1
 8001908:	6013      	str	r3, [r2, #0]
			break;
 800190a:	bf00      	nop
	}
	// Filter Bank active mode
	CAN_FMR &=~(1<<0);
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <MCAL_CAN_Config_Filter+0x224>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a17      	ldr	r2, [pc, #92]	; (8001970 <MCAL_CAN_Config_Filter+0x224>)
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	6013      	str	r3, [r2, #0]
	//Filter x is not active
	CAN_FA1R |=(1<<Filter_Config->Filter_Bank);
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <MCAL_CAN_Config_Filter+0x228>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	68d2      	ldr	r2, [r2, #12]
 8001920:	2101      	movs	r1, #1
 8001922:	fa01 f202 	lsl.w	r2, r1, r2
 8001926:	4611      	mov	r1, r2
 8001928:	4a12      	ldr	r2, [pc, #72]	; (8001974 <MCAL_CAN_Config_Filter+0x228>)
 800192a:	430b      	orrs	r3, r1
 800192c:	6013      	str	r3, [r2, #0]
}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	40006640 	.word	0x40006640
 800193c:	40006648 	.word	0x40006648
 8001940:	40006650 	.word	0x40006650
 8001944:	40006658 	.word	0x40006658
 8001948:	40006660 	.word	0x40006660
 800194c:	40006668 	.word	0x40006668
 8001950:	40006670 	.word	0x40006670
 8001954:	40006678 	.word	0x40006678
 8001958:	40006680 	.word	0x40006680
 800195c:	40006688 	.word	0x40006688
 8001960:	40006690 	.word	0x40006690
 8001964:	40006698 	.word	0x40006698
 8001968:	400066a0 	.word	0x400066a0
 800196c:	400066a8 	.word	0x400066a8
 8001970:	40006600 	.word	0x40006600
 8001974:	4000661c 	.word	0x4000661c
 8001978:	4000660c 	.word	0x4000660c
 800197c:	40006604 	.word	0x40006604
 8001980:	40006614 	.word	0x40006614

08001984 <Det_ReportError>:
* Parameters (out)	:	None
* Return value		:	Std_ReturnType (never returns a value, but has a return type for compatibility with services and hooks)
* Description		:	Service to report development errors.
***********************************************************************/
Std_ReturnType Det_ReportError ( uint16 ModuleId , uint8 InstanceId , uint8 ApiId , uint8 ErrorId )
{
 8001984:	b490      	push	{r4, r7}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4604      	mov	r4, r0
 800198c:	4608      	mov	r0, r1
 800198e:	4611      	mov	r1, r2
 8001990:	461a      	mov	r2, r3
 8001992:	4623      	mov	r3, r4
 8001994:	80fb      	strh	r3, [r7, #6]
 8001996:	4603      	mov	r3, r0
 8001998:	717b      	strb	r3, [r7, #5]
 800199a:	460b      	mov	r3, r1
 800199c:	713b      	strb	r3, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	70fb      	strb	r3, [r7, #3]
	while(1)
 80019a2:	e7fe      	b.n	80019a2 <Det_ReportError+0x1e>

080019a4 <Dio_WriteChannel>:
* Parameters (out)	:	None
* Return value		:	None
* Description		:	Service to set a level of a channel.
***********************************************************************/
void Dio_WriteChannel (Dio_ChannelType ChannelId,Dio_LevelType Level)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	460a      	mov	r2, r1
 80019ae:	80fb      	strh	r3, [r7, #6]
 80019b0:	4613      	mov	r3, r2
 80019b2:	717b      	strb	r3, [r7, #5]
	uint16 Channel_Pos=0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	81fb      	strh	r3, [r7, #14]
	 */
	/*
	 [SWS_Dio_00029] If the specified channel is configured as an input channel, the
	 Dio_WriteChannel function shall have no influence on the physical output.
	 */
	if(ChannelId<channel_8)
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	2b07      	cmp	r3, #7
 80019bc:	d82a      	bhi.n	8001a14 <Dio_WriteChannel+0x70>
	{
		Channel_Pos=ChannelId-0;
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	81fb      	strh	r3, [r7, #14]
		//output
		if((GPIOA->CRL&(3<<Channel_Pos*4))!=0)
 80019c2:	4b74      	ldr	r3, [pc, #464]	; (8001b94 <Dio_WriteChannel+0x1f0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	89fa      	ldrh	r2, [r7, #14]
 80019c8:	0092      	lsls	r2, r2, #2
 80019ca:	2103      	movs	r1, #3
 80019cc:	fa01 f202 	lsl.w	r2, r1, r2
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 80d9 	beq.w	8001b8a <Dio_WriteChannel+0x1e6>
		{
			if(Level==STD_HIGH)
 80019d8:	797b      	ldrb	r3, [r7, #5]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d10a      	bne.n	80019f4 <Dio_WriteChannel+0x50>
			{
				GPIOA->ODR|=(1<<(ChannelId-0));
 80019de:	4b6d      	ldr	r3, [pc, #436]	; (8001b94 <Dio_WriteChannel+0x1f0>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	88fa      	ldrh	r2, [r7, #6]
 80019e4:	2101      	movs	r1, #1
 80019e6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ea:	4611      	mov	r1, r2
 80019ec:	4a69      	ldr	r2, [pc, #420]	; (8001b94 <Dio_WriteChannel+0x1f0>)
 80019ee:	430b      	orrs	r3, r1
 80019f0:	60d3      	str	r3, [r2, #12]
	}
	else
	{
		//Error
	}
}
 80019f2:	e0ca      	b.n	8001b8a <Dio_WriteChannel+0x1e6>
			else if(Level==STD_LOW)
 80019f4:	797b      	ldrb	r3, [r7, #5]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f040 80c7 	bne.w	8001b8a <Dio_WriteChannel+0x1e6>
				GPIOA->ODR&=~(1<<(ChannelId-0));
 80019fc:	4b65      	ldr	r3, [pc, #404]	; (8001b94 <Dio_WriteChannel+0x1f0>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	88fa      	ldrh	r2, [r7, #6]
 8001a02:	2101      	movs	r1, #1
 8001a04:	fa01 f202 	lsl.w	r2, r1, r2
 8001a08:	43d2      	mvns	r2, r2
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4a61      	ldr	r2, [pc, #388]	; (8001b94 <Dio_WriteChannel+0x1f0>)
 8001a0e:	400b      	ands	r3, r1
 8001a10:	60d3      	str	r3, [r2, #12]
}
 8001a12:	e0ba      	b.n	8001b8a <Dio_WriteChannel+0x1e6>
	else if(ChannelId<channel_16)
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	2b0f      	cmp	r3, #15
 8001a18:	d82b      	bhi.n	8001a72 <Dio_WriteChannel+0xce>
		Channel_Pos=ChannelId-8;
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	3b08      	subs	r3, #8
 8001a1e:	81fb      	strh	r3, [r7, #14]
		if((GPIOA->CRH&(3<<Channel_Pos*4))!=0)
 8001a20:	4b5c      	ldr	r3, [pc, #368]	; (8001b94 <Dio_WriteChannel+0x1f0>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	89fa      	ldrh	r2, [r7, #14]
 8001a26:	0092      	lsls	r2, r2, #2
 8001a28:	2103      	movs	r1, #3
 8001a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80aa 	beq.w	8001b8a <Dio_WriteChannel+0x1e6>
			if(Level==STD_HIGH)
 8001a36:	797b      	ldrb	r3, [r7, #5]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d10a      	bne.n	8001a52 <Dio_WriteChannel+0xae>
				GPIOA->ODR|=(1<<(ChannelId-0));
 8001a3c:	4b55      	ldr	r3, [pc, #340]	; (8001b94 <Dio_WriteChannel+0x1f0>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	88fa      	ldrh	r2, [r7, #6]
 8001a42:	2101      	movs	r1, #1
 8001a44:	fa01 f202 	lsl.w	r2, r1, r2
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4a52      	ldr	r2, [pc, #328]	; (8001b94 <Dio_WriteChannel+0x1f0>)
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	e09b      	b.n	8001b8a <Dio_WriteChannel+0x1e6>
			else if(Level==STD_LOW)
 8001a52:	797b      	ldrb	r3, [r7, #5]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f040 8098 	bne.w	8001b8a <Dio_WriteChannel+0x1e6>
				GPIOA->ODR&=~(1<<(ChannelId-0));
 8001a5a:	4b4e      	ldr	r3, [pc, #312]	; (8001b94 <Dio_WriteChannel+0x1f0>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	88fa      	ldrh	r2, [r7, #6]
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f202 	lsl.w	r2, r1, r2
 8001a66:	43d2      	mvns	r2, r2
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4a4a      	ldr	r2, [pc, #296]	; (8001b94 <Dio_WriteChannel+0x1f0>)
 8001a6c:	400b      	ands	r3, r1
 8001a6e:	60d3      	str	r3, [r2, #12]
}
 8001a70:	e08b      	b.n	8001b8a <Dio_WriteChannel+0x1e6>
	else if(ChannelId<channel_24)
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	2b17      	cmp	r3, #23
 8001a76:	d82b      	bhi.n	8001ad0 <Dio_WriteChannel+0x12c>
		Channel_Pos=ChannelId-16;
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	3b10      	subs	r3, #16
 8001a7c:	81fb      	strh	r3, [r7, #14]
		if((GPIOB->CRL&(3<<Channel_Pos*4))!=0)
 8001a7e:	4b46      	ldr	r3, [pc, #280]	; (8001b98 <Dio_WriteChannel+0x1f4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	89fa      	ldrh	r2, [r7, #14]
 8001a84:	0092      	lsls	r2, r2, #2
 8001a86:	2103      	movs	r1, #3
 8001a88:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d07b      	beq.n	8001b8a <Dio_WriteChannel+0x1e6>
			if(Level==STD_HIGH)
 8001a92:	797b      	ldrb	r3, [r7, #5]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d10b      	bne.n	8001ab0 <Dio_WriteChannel+0x10c>
				GPIOB->ODR|=(1<<(ChannelId-16));
 8001a98:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <Dio_WriteChannel+0x1f4>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	88fa      	ldrh	r2, [r7, #6]
 8001a9e:	3a10      	subs	r2, #16
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4a3b      	ldr	r2, [pc, #236]	; (8001b98 <Dio_WriteChannel+0x1f4>)
 8001aaa:	430b      	orrs	r3, r1
 8001aac:	60d3      	str	r3, [r2, #12]
}
 8001aae:	e06c      	b.n	8001b8a <Dio_WriteChannel+0x1e6>
			else if(Level==STD_LOW)
 8001ab0:	797b      	ldrb	r3, [r7, #5]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d169      	bne.n	8001b8a <Dio_WriteChannel+0x1e6>
				GPIOB->ODR&=~(1<<(ChannelId-16));
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <Dio_WriteChannel+0x1f4>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	88fa      	ldrh	r2, [r7, #6]
 8001abc:	3a10      	subs	r2, #16
 8001abe:	2101      	movs	r1, #1
 8001ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac4:	43d2      	mvns	r2, r2
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4a33      	ldr	r2, [pc, #204]	; (8001b98 <Dio_WriteChannel+0x1f4>)
 8001aca:	400b      	ands	r3, r1
 8001acc:	60d3      	str	r3, [r2, #12]
}
 8001ace:	e05c      	b.n	8001b8a <Dio_WriteChannel+0x1e6>
	else if(ChannelId<channel_32)
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	2b1f      	cmp	r3, #31
 8001ad4:	d82b      	bhi.n	8001b2e <Dio_WriteChannel+0x18a>
		Channel_Pos=ChannelId-24;
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	3b18      	subs	r3, #24
 8001ada:	81fb      	strh	r3, [r7, #14]
		if((GPIOB->CRH&(3<<Channel_Pos*4))!=0)
 8001adc:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <Dio_WriteChannel+0x1f4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	89fa      	ldrh	r2, [r7, #14]
 8001ae2:	0092      	lsls	r2, r2, #2
 8001ae4:	2103      	movs	r1, #3
 8001ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d04c      	beq.n	8001b8a <Dio_WriteChannel+0x1e6>
			if(Level==STD_HIGH)
 8001af0:	797b      	ldrb	r3, [r7, #5]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d10b      	bne.n	8001b0e <Dio_WriteChannel+0x16a>
				GPIOB->ODR|=(1<<(ChannelId-16));
 8001af6:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <Dio_WriteChannel+0x1f4>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	88fa      	ldrh	r2, [r7, #6]
 8001afc:	3a10      	subs	r2, #16
 8001afe:	2101      	movs	r1, #1
 8001b00:	fa01 f202 	lsl.w	r2, r1, r2
 8001b04:	4611      	mov	r1, r2
 8001b06:	4a24      	ldr	r2, [pc, #144]	; (8001b98 <Dio_WriteChannel+0x1f4>)
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	e03d      	b.n	8001b8a <Dio_WriteChannel+0x1e6>
			else if(Level==STD_LOW)
 8001b0e:	797b      	ldrb	r3, [r7, #5]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d13a      	bne.n	8001b8a <Dio_WriteChannel+0x1e6>
				GPIOB->ODR&=~(1<<(ChannelId-16));
 8001b14:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <Dio_WriteChannel+0x1f4>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	88fa      	ldrh	r2, [r7, #6]
 8001b1a:	3a10      	subs	r2, #16
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b22:	43d2      	mvns	r2, r2
 8001b24:	4611      	mov	r1, r2
 8001b26:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <Dio_WriteChannel+0x1f4>)
 8001b28:	400b      	ands	r3, r1
 8001b2a:	60d3      	str	r3, [r2, #12]
}
 8001b2c:	e02d      	b.n	8001b8a <Dio_WriteChannel+0x1e6>
	else if(ChannelId<=channel_47)
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	2b2f      	cmp	r3, #47	; 0x2f
 8001b32:	d82a      	bhi.n	8001b8a <Dio_WriteChannel+0x1e6>
		Channel_Pos=ChannelId-40;
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	3b28      	subs	r3, #40	; 0x28
 8001b38:	81fb      	strh	r3, [r7, #14]
		if((GPIOC->CRH&(3<<Channel_Pos*4))!=0)
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <Dio_WriteChannel+0x1f8>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	89fa      	ldrh	r2, [r7, #14]
 8001b40:	0092      	lsls	r2, r2, #2
 8001b42:	2103      	movs	r1, #3
 8001b44:	fa01 f202 	lsl.w	r2, r1, r2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d01d      	beq.n	8001b8a <Dio_WriteChannel+0x1e6>
			if(Level==STD_HIGH)
 8001b4e:	797b      	ldrb	r3, [r7, #5]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d10b      	bne.n	8001b6c <Dio_WriteChannel+0x1c8>
				GPIOC->ODR|=(1<<(ChannelId-32));
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <Dio_WriteChannel+0x1f8>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	88fa      	ldrh	r2, [r7, #6]
 8001b5a:	3a20      	subs	r2, #32
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b62:	4611      	mov	r1, r2
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <Dio_WriteChannel+0x1f8>)
 8001b66:	430b      	orrs	r3, r1
 8001b68:	60d3      	str	r3, [r2, #12]
}
 8001b6a:	e00e      	b.n	8001b8a <Dio_WriteChannel+0x1e6>
			else if(Level==STD_LOW)
 8001b6c:	797b      	ldrb	r3, [r7, #5]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10b      	bne.n	8001b8a <Dio_WriteChannel+0x1e6>
				GPIOC->ODR&=~(1<<(ChannelId-32));
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <Dio_WriteChannel+0x1f8>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	88fa      	ldrh	r2, [r7, #6]
 8001b78:	3a20      	subs	r2, #32
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b80:	43d2      	mvns	r2, r2
 8001b82:	4611      	mov	r1, r2
 8001b84:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <Dio_WriteChannel+0x1f8>)
 8001b86:	400b      	ands	r3, r1
 8001b88:	60d3      	str	r3, [r2, #12]
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	40010800 	.word	0x40010800
 8001b98:	40010c00 	.word	0x40010c00
 8001b9c:	40011000 	.word	0x40011000

08001ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	db0a      	blt.n	8001bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	490c      	ldr	r1, [pc, #48]	; (8001bec <__NVIC_SetPriority+0x4c>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	0152      	lsls	r2, r2, #5
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc8:	e00a      	b.n	8001be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4908      	ldr	r1, [pc, #32]	; (8001bf0 <__NVIC_SetPriority+0x50>)
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	3b04      	subs	r3, #4
 8001bd8:	0152      	lsls	r2, r2, #5
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	440b      	add	r3, r1
 8001bde:	761a      	strb	r2, [r3, #24]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000e100 	.word	0xe000e100
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c04:	d301      	bcc.n	8001c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00f      	b.n	8001c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <SysTick_Config+0x40>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c12:	2107      	movs	r1, #7
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f7ff ffc2 	bl	8001ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <SysTick_Config+0x40>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c22:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <SysTick_Config+0x40>)
 8001c24:	2207      	movs	r2, #7
 8001c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	e000e010 	.word	0xe000e010

08001c38 <HardFault_Handler>:
#include "Cortex_Mx_Porting.h"
#include "Type.h"
#include "Dio.h"
#include "Alarm.h"

uint8_t SysTickLED;
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

 8001c3c:	e7fe      	b.n	8001c3c <HardFault_Handler+0x4>

08001c3e <MemManage_Handler>:
void HardFault_Handler(void)
{
	while(1);
}
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

 8001c42:	e7fe      	b.n	8001c42 <MemManage_Handler+0x4>

08001c44 <UsageFault_Handler>:
}

void vBusFault_Handler(void)
{
	while(1);
}
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

 8001c48:	e7fe      	b.n	8001c48 <UsageFault_Handler+0x4>

08001c4a <HW_init>:
    __asm(  "TST LR,#4\n\t"
    		"ITE EQ \n\t"
    		"MRSEQ R0,MSP\n\t"
    		"MRSNE R0,PSP\n\t"
    		"B OS_SV");
}
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	af00      	add	r7, sp, #0
	 * Initialize Clock Tree (RCC -> SysTick Timer & CPU) 8MHZ
	 * Clock tree
	 * RCC Default Values makes CPU Clock & SySTick Timer clock=8MHZ
	 * 8 MHZ
	 * 1 count -> 0.125 us
	 * X count -> 1 ms
 8001c4e:	210f      	movs	r1, #15
 8001c50:	f06f 0001 	mvn.w	r0, #1
 8001c54:	f7ff ffa4 	bl	8001ba0 <__NVIC_SetPriority>
	 * X = 8000 Count
	 */
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <trigger_OS_PendSV>:
	__NVIC_SetPriority(PendSV_IRQn, 15) ;

 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
}
 8001c62:	2305      	movs	r3, #5
 8001c64:	607b      	str	r3, [r7, #4]
void trigger_OS_PendSV()
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
{
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <trigger_OS_PendSV+0x28>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <trigger_OS_PendSV+0x28>)
 8001c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c76:	6053      	str	r3, [r2, #4]
	int x=5;
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <Start_Ticker>:
	x++;
	SCB->ICSR|=SCB_ICSR_PENDSVSET_Msk;
}
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
{
	/*
	 * This clock tree should be defined in HW_init()
	 * 8 MHZ
	 * 1 count -> 0.125 us
	 * X count -> 1 ms
 8001c8c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001c90:	f7ff ffb0 	bl	8001bf4 <SysTick_Config>
	 * X = 8000 Count
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <SysTick_Handler>:
	 */
	 SysTick_Config(8000);
}
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <SysTick_Handler+0x1c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	f083 0301 	eor.w	r3, r3, #1
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <SysTick_Handler+0x1c>)
 8001ca8:	701a      	strb	r2, [r3, #0]
uint8 fla=STD_LOW;
void SysTick_Handler(void)
{
	SysTickLED ^= 1 ;
	y++;
	if(Alarms_Number!=0)
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	2000021c 	.word	0x2000021c

08001cb8 <SetEvent>:
extern FIFO_Buf_t Ready_QUEUE ;
extern TaskRefType* Ready_QUEUE_FIFO[10];
extern struct System_Conctrol OS_Control;

StatusType SetEvent(TaskRefType* TaskName,EventMaskType Mask)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	70fb      	strb	r3, [r7, #3]
	StatusType statu=NO_ERROR;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	73fb      	strb	r3, [r7, #15]
	uint32_t IRQ_Flag=0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
	if(TaskName->TaskType!=Extended_Task)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d003      	beq.n	8001cde <SetEvent+0x26>
	{
		// the referenced task is not an Extended Task
		statu=E_ACCESS;
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	73fb      	strb	r3, [r7, #15]
		return statu;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	e03f      	b.n	8001d5e <SetEvent+0xa6>
	}
	else
	{
		if(TaskName->TaskState==Suspend)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d103      	bne.n	8001cf0 <SetEvent+0x38>
		{
			//  the referenced task is in the suspended state
			statu=E_STATE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73fb      	strb	r3, [r7, #15]
			return statu;
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	e036      	b.n	8001d5e <SetEvent+0xa6>
		}
		else
		{
			//read state of cpu
			OS_GET_IRQ_Flag(IRQ_Flag);
 8001cf0:	f3ef 8005 	mrs	r0, IPSR
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60bb      	str	r3, [r7, #8]
			//36 for can handler (Excepted)
			if(IRQ_Flag!=0&&IRQ_Flag!=36)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d006      	beq.n	8001d0c <SetEvent+0x54>
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b24      	cmp	r3, #36	; 0x24
 8001d02:	d003      	beq.n	8001d0c <SetEvent+0x54>
			{
				// a call at the interrupt level.
				statu=E_CALLEVEL;
 8001d04:	2302      	movs	r3, #2
 8001d06:	73fb      	strb	r3, [r7, #15]
				return statu;
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	e028      	b.n	8001d5e <SetEvent+0xa6>
			}
			else
			{
				//set mask
				TaskName->Events.Public_Mask|=Mask;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				//check any waiting for this task
				if(TaskName->Events.Public_Mask&TaskName->Events.Private_Mask)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d014      	beq.n	8001d5c <SetEvent+0xa4>
				{
					TaskName->TaskState=Ready;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2203      	movs	r2, #3
 8001d36:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
					if(OS_Control.CurrentTask->priority>TaskName->priority)
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <SetEvent+0xb0>)
 8001d3c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001d40:	791a      	ldrb	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	791b      	ldrb	r3, [r3, #4]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d904      	bls.n	8001d54 <SetEvent+0x9c>
					{
						//Add task to ready buffer
						FIFO_enqueue(&Ready_QUEUE,TaskName);
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4807      	ldr	r0, [pc, #28]	; (8001d6c <SetEvent+0xb4>)
 8001d4e:	f000 f8c5 	bl	8001edc <FIFO_enqueue>
 8001d52:	e003      	b.n	8001d5c <SetEvent+0xa4>
					}
					else
					{
						Schedule();
 8001d54:	f000 fc04 	bl	8002560 <Schedule>
						trigger_OS_PendSV();
 8001d58:	f7ff ff80 	bl	8001c5c <trigger_OS_PendSV>
					}
				}
			}
		}
	}
	return statu;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000220 	.word	0x20000220
 8001d6c:	20000418 	.word	0x20000418

08001d70 <ClearEvent>:

StatusType ClearEvent(EventMaskType Mask)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
	StatusType statu=NO_ERROR;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	73fb      	strb	r3, [r7, #15]
	uint32_t IRQ_Flag=0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
	//read state of cpu
	OS_GET_IRQ_Flag(IRQ_Flag);
 8001d82:	f3ef 8005 	mrs	r0, IPSR
 8001d86:	4603      	mov	r3, r0
 8001d88:	60bb      	str	r3, [r7, #8]
	if(IRQ_Flag!=0)
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <ClearEvent+0x28>
	{
		// a call at the interrupt level.
		statu=E_CALLEVEL;
 8001d90:	2302      	movs	r3, #2
 8001d92:	73fb      	strb	r3, [r7, #15]
		return statu;
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	e02f      	b.n	8001df8 <ClearEvent+0x88>
	}
	else
	{
		if(OS_Control.CurrentTask->TaskType!=Extended_Task)
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <ClearEvent+0x94>)
 8001d9a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001d9e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d003      	beq.n	8001dae <ClearEvent+0x3e>
		{
			// the referenced task is not an Extended Task
			statu=E_ACCESS;
 8001da6:	2304      	movs	r3, #4
 8001da8:	73fb      	strb	r3, [r7, #15]
			return statu;
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	e024      	b.n	8001df8 <ClearEvent+0x88>
		}
		else
		{
			OS_Control.CurrentTask->Events.Private_Mask&=~Mask;
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <ClearEvent+0x94>)
 8001db0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001db4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001db8:	b25a      	sxtb	r2, r3
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	b25b      	sxtb	r3, r3
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	b25a      	sxtb	r2, r3
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <ClearEvent+0x94>)
 8001dc8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			OS_Control.CurrentTask->Events.Public_Mask&=~Mask;
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <ClearEvent+0x94>)
 8001dd4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ddc:	b25a      	sxtb	r2, r3
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	4013      	ands	r3, r2
 8001de8:	b25a      	sxtb	r2, r3
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <ClearEvent+0x94>)
 8001dec:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		}
	}
	return statu;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000220 	.word	0x20000220

08001e08 <WaitEvent>:
	}
	return statu;
}

StatusType WaitEvent(EventMaskType Mask)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
	StatusType statu=NO_ERROR;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
	uint32_t IRQ_Flag=0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
	if(OS_Control.CurrentTask->TaskType!=Extended_Task)
 8001e1a:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <WaitEvent+0x8c>)
 8001e1c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001e20:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d003      	beq.n	8001e30 <WaitEvent+0x28>
	{
		// the referenced task is not an Extended Task
		statu=E_ACCESS;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	73fb      	strb	r3, [r7, #15]
		return statu;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	e02d      	b.n	8001e8c <WaitEvent+0x84>
	}
	else
	{
		//read state of cpu
		OS_GET_IRQ_Flag(IRQ_Flag);
 8001e30:	f3ef 8005 	mrs	r0, IPSR
 8001e34:	4603      	mov	r3, r0
 8001e36:	60bb      	str	r3, [r7, #8]
		if(IRQ_Flag!=0)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <WaitEvent+0x3e>
		{
			// a call at the interrupt level.
			statu=E_CALLEVEL;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	73fb      	strb	r3, [r7, #15]
			return statu;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	e022      	b.n	8001e8c <WaitEvent+0x84>
		}
		else
		{
			OS_Control.CurrentTask->Events.Private_Mask=Mask;
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <WaitEvent+0x8c>)
 8001e48:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001e4c:	79fa      	ldrb	r2, [r7, #7]
 8001e4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			if(OS_Control.CurrentTask->Events.Private_Mask&OS_Control.CurrentTask->Events.Public_Mask)
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <WaitEvent+0x8c>)
 8001e54:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001e58:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <WaitEvent+0x8c>)
 8001e5e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001e62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e66:	4013      	ands	r3, r2
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <WaitEvent+0x6a>
			{
				return statu;
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	e00c      	b.n	8001e8c <WaitEvent+0x84>
			}
			else
			{
				OS_Control.CurrentTask->TaskState=Waiting;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <WaitEvent+0x8c>)
 8001e74:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001e78:	2202      	movs	r2, #2
 8001e7a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				statu=Schedule();
 8001e7e:	f000 fb6f 	bl	8002560 <Schedule>
 8001e82:	4603      	mov	r3, r0
 8001e84:	73fb      	strb	r3, [r7, #15]
				trigger_OS_PendSV();
 8001e86:	f7ff fee9 	bl	8001c5c <trigger_OS_PendSV>
			}
		}
	}
	return statu;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000220 	.word	0x20000220

08001e98 <FIFO_init>:
 *  Created on : 27/4/2023
 *  Author     : Salama mohamed
 ************************************************/
#include"MY_RTOS_FIFO.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]

	if(!buff )
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <FIFO_init+0x16>
		return FIFO_NULL;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e011      	b.n	8001ed2 <FIFO_init+0x3a>

	fifo->base = buff ;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 8001ed0:	2300      	movs	r3, #0

}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <FIFO_enqueue+0x1a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e02d      	b.n	8001f56 <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d107      	bne.n	8001f16 <FIFO_enqueue+0x3a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d101      	bne.n	8001f16 <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e01f      	b.n	8001f56 <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	68d2      	ldr	r2, [r2, #12]
 8001f30:	4611      	mov	r1, r2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6912      	ldr	r2, [r2, #16]
 8001f36:	0092      	lsls	r2, r2, #2
 8001f38:	440a      	add	r2, r1
 8001f3a:	3a04      	subs	r2, #4
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d104      	bne.n	8001f4a <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	e004      	b.n	8001f54 <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	1d1a      	adds	r2, r3, #4
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 8001f54:	2300      	movs	r3, #0


}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <FIFO_is_full>:



/* *********************************** */

Buffer_status FIFO_is_full (FIFO_Buf_t* fifo){
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

	if(!fifo->head || !fifo->base || !fifo->tail)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d007      	beq.n	8001f80 <FIFO_is_full+0x20>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <FIFO_is_full+0x20>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <FIFO_is_full+0x24>
		return FIFO_NULL;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e00e      	b.n	8001fa2 <FIFO_is_full+0x42>
	if(fifo->counter == fifo->length)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d101      	bne.n	8001f94 <FIFO_is_full+0x34>
		return FIFO_FULL;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e006      	b.n	8001fa2 <FIFO_is_full+0x42>
	if(fifo->counter ==0)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <FIFO_is_full+0x40>
		return FIFO_EMPTY;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e000      	b.n	8001fa2 <FIFO_is_full+0x42>

	return FIFO_NOT_FULL;
 8001fa0:	2304      	movs	r3, #4
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <MYRTOS_IdleTask>:
extern TaskRefType* Ready_QUEUE_FIFO[10] ;
TaskRefType MYRTOS_idleTask;

// idle task
void MYRTOS_IdleTask()
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
	IdleTaskLED ^=1;
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <MYRTOS_IdleTask+0x34>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	f083 0301 	eor.w	r3, r3, #1
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <MYRTOS_IdleTask+0x34>)
 8001fbc:	701a      	strb	r2, [r3, #0]
	IdleTaskLED ^=1;
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <MYRTOS_IdleTask+0x34>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	f083 0301 	eor.w	r3, r3, #1
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <MYRTOS_IdleTask+0x34>)
 8001fca:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		IdleTaskLED ^=1;
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <MYRTOS_IdleTask+0x34>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	f083 0301 	eor.w	r3, r3, #1
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b02      	ldr	r3, [pc, #8]	; (8001fe0 <MYRTOS_IdleTask+0x34>)
 8001fd8:	701a      	strb	r2, [r3, #0]
		__asm("WFE");
 8001fda:	bf20      	wfe
		IdleTaskLED ^=1;
 8001fdc:	e7f6      	b.n	8001fcc <MYRTOS_IdleTask+0x20>
 8001fde:	bf00      	nop
 8001fe0:	20000414 	.word	0x20000414

08001fe4 <PendSV_Handler>:
* 				such as saving and restoring task context, updating task states,
* 				or performing other operations related to task scheduling or context management.
*****************************************************************************************/
__attribute ((naked)) void PendSV_Handler()
{
	if(OS_Control.NextTask != NULL)
 8001fe4:	4b9a      	ldr	r3, [pc, #616]	; (8002250 <PendSV_Handler+0x26c>)
 8001fe6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8125 	beq.w	800223a <PendSV_Handler+0x256>
	{
		if(OS_Control.CurrentTask->TaskType!=Basic_Task||OS_Control.CurrentTask->TaskState!=Suspend)
 8001ff0:	4b97      	ldr	r3, [pc, #604]	; (8002250 <PendSV_Handler+0x26c>)
 8001ff2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001ff6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <PendSV_Handler+0x28>
 8001ffe:	4b94      	ldr	r3, [pc, #592]	; (8002250 <PendSV_Handler+0x26c>)
 8002000:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002004:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002008:	2b00      	cmp	r3, #0
 800200a:	d067      	beq.n	80020dc <PendSV_Handler+0xf8>
		{
			//====================================
			//Save the Context of the Current Task
			//====================================
			//Get the Current Task "Current PSP from CPU register" as CPU Push
			OS_GET_PSP(OS_Control.CurrentTask->Current_PSP);
 800200c:	4b90      	ldr	r3, [pc, #576]	; (8002250 <PendSV_Handler+0x26c>)
 800200e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002012:	f3ef 8009 	mrs	r0, PSP
 8002016:	4602      	mov	r2, r0
 8002018:	615a      	str	r2, [r3, #20]
			//using this Current_PSP store from R4 to R11
			OS_Control.CurrentTask->Current_PSP-- ;
 800201a:	4b8d      	ldr	r3, [pc, #564]	; (8002250 <PendSV_Handler+0x26c>)
 800201c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	3a04      	subs	r2, #4
 8002024:	615a      	str	r2, [r3, #20]
			__asm volatile("mov %0,r4 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002026:	4b8a      	ldr	r3, [pc, #552]	; (8002250 <PendSV_Handler+0x26c>)
 8002028:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	4622      	mov	r2, r4
 8002030:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 8002032:	4b87      	ldr	r3, [pc, #540]	; (8002250 <PendSV_Handler+0x26c>)
 8002034:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	3a04      	subs	r2, #4
 800203c:	615a      	str	r2, [r3, #20]
			__asm volatile("mov %0,r5 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 800203e:	4b84      	ldr	r3, [pc, #528]	; (8002250 <PendSV_Handler+0x26c>)
 8002040:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	462a      	mov	r2, r5
 8002048:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 800204a:	4b81      	ldr	r3, [pc, #516]	; (8002250 <PendSV_Handler+0x26c>)
 800204c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	3a04      	subs	r2, #4
 8002054:	615a      	str	r2, [r3, #20]
			__asm volatile("mov %0,r6 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002056:	4b7e      	ldr	r3, [pc, #504]	; (8002250 <PendSV_Handler+0x26c>)
 8002058:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	4632      	mov	r2, r6
 8002060:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 8002062:	4b7b      	ldr	r3, [pc, #492]	; (8002250 <PendSV_Handler+0x26c>)
 8002064:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	3a04      	subs	r2, #4
 800206c:	615a      	str	r2, [r3, #20]
			__asm volatile("mov %0,r7 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 800206e:	4b78      	ldr	r3, [pc, #480]	; (8002250 <PendSV_Handler+0x26c>)
 8002070:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	463a      	mov	r2, r7
 8002078:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 800207a:	4b75      	ldr	r3, [pc, #468]	; (8002250 <PendSV_Handler+0x26c>)
 800207c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	3a04      	subs	r2, #4
 8002084:	615a      	str	r2, [r3, #20]
			__asm volatile("mov %0,r8 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002086:	4b72      	ldr	r3, [pc, #456]	; (8002250 <PendSV_Handler+0x26c>)
 8002088:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	4642      	mov	r2, r8
 8002090:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 8002092:	4b6f      	ldr	r3, [pc, #444]	; (8002250 <PendSV_Handler+0x26c>)
 8002094:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	3a04      	subs	r2, #4
 800209c:	615a      	str	r2, [r3, #20]
			__asm volatile("mov %0,r9 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 800209e:	4b6c      	ldr	r3, [pc, #432]	; (8002250 <PendSV_Handler+0x26c>)
 80020a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	464a      	mov	r2, r9
 80020a8:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 80020aa:	4b69      	ldr	r3, [pc, #420]	; (8002250 <PendSV_Handler+0x26c>)
 80020ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	3a04      	subs	r2, #4
 80020b4:	615a      	str	r2, [r3, #20]
			__asm volatile("mov %0,r10 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 80020b6:	4b66      	ldr	r3, [pc, #408]	; (8002250 <PendSV_Handler+0x26c>)
 80020b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	4652      	mov	r2, sl
 80020c0:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 80020c2:	4b63      	ldr	r3, [pc, #396]	; (8002250 <PendSV_Handler+0x26c>)
 80020c4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	3a04      	subs	r2, #4
 80020cc:	615a      	str	r2, [r3, #20]
			__asm volatile("mov %0,r11 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 80020ce:	4b60      	ldr	r3, [pc, #384]	; (8002250 <PendSV_Handler+0x26c>)
 80020d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	465a      	mov	r2, fp
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	e041      	b.n	8002160 <PendSV_Handler+0x17c>
			 */
		}
		else
		{
			//basic task reallocate stack
			OS_Control.CurrentTask->Current_PSP= OS_Control.CurrentTask->_S_PSP_Task ;
 80020dc:	4b5c      	ldr	r3, [pc, #368]	; (8002250 <PendSV_Handler+0x26c>)
 80020de:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	4b5a      	ldr	r3, [pc, #360]	; (8002250 <PendSV_Handler+0x26c>)
 80020e6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80020ea:	615a      	str	r2, [r3, #20]
			OS_Control.CurrentTask->Current_PSP-- ;
 80020ec:	4b58      	ldr	r3, [pc, #352]	; (8002250 <PendSV_Handler+0x26c>)
 80020ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	3a04      	subs	r2, #4
 80020f6:	615a      	str	r2, [r3, #20]
			*(OS_Control.CurrentTask->Current_PSP) = 0x01000000;
 80020f8:	4b55      	ldr	r3, [pc, #340]	; (8002250 <PendSV_Handler+0x26c>)
 80020fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002104:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 8002106:	4b52      	ldr	r3, [pc, #328]	; (8002250 <PendSV_Handler+0x26c>)
 8002108:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	3a04      	subs	r2, #4
 8002110:	615a      	str	r2, [r3, #20]
			*(OS_Control.CurrentTask->Current_PSP) = (uint32_t)OS_Control.CurrentTask->P_TaskEntry ;
 8002112:	4b4f      	ldr	r3, [pc, #316]	; (8002250 <PendSV_Handler+0x26c>)
 8002114:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	4b4d      	ldr	r3, [pc, #308]	; (8002250 <PendSV_Handler+0x26c>)
 800211c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 8002124:	4b4a      	ldr	r3, [pc, #296]	; (8002250 <PendSV_Handler+0x26c>)
 8002126:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	3a04      	subs	r2, #4
 800212e:	615a      	str	r2, [r3, #20]
			*(OS_Control.CurrentTask->Current_PSP)  = 0xFFFFFFFD ;
 8002130:	4b47      	ldr	r3, [pc, #284]	; (8002250 <PendSV_Handler+0x26c>)
 8002132:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	f06f 0202 	mvn.w	r2, #2
 800213c:	601a      	str	r2, [r3, #0]
			//set R0 to R12 by value 0
			for (int  i=0 ; i< 13 ; i++ )
 800213e:	2400      	movs	r4, #0
 8002140:	e00c      	b.n	800215c <PendSV_Handler+0x178>
			{
				OS_Control.CurrentTask->Current_PSP-- ;
 8002142:	4b43      	ldr	r3, [pc, #268]	; (8002250 <PendSV_Handler+0x26c>)
 8002144:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	3a04      	subs	r2, #4
 800214c:	615a      	str	r2, [r3, #20]
				*(OS_Control.CurrentTask->Current_PSP)  = 0 ;
 800214e:	4b40      	ldr	r3, [pc, #256]	; (8002250 <PendSV_Handler+0x26c>)
 8002150:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
			for (int  i=0 ; i< 13 ; i++ )
 800215a:	3401      	adds	r4, #1
 800215c:	2c0c      	cmp	r4, #12
 800215e:	ddf0      	ble.n	8002142 <PendSV_Handler+0x15e>

		}
		//====================================
		//Restore the Context of the Next Task
		//====================================
		OS_Control.CurrentTask = OS_Control.NextTask ;
 8002160:	4b3b      	ldr	r3, [pc, #236]	; (8002250 <PendSV_Handler+0x26c>)
 8002162:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002166:	4a3a      	ldr	r2, [pc, #232]	; (8002250 <PendSV_Handler+0x26c>)
 8002168:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		__asm volatile("mov r11,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 800216c:	4b38      	ldr	r3, [pc, #224]	; (8002250 <PendSV_Handler+0x26c>)
 800216e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	469b      	mov	fp, r3
		OS_Control.CurrentTask->Current_PSP++ ;
 8002178:	4b35      	ldr	r3, [pc, #212]	; (8002250 <PendSV_Handler+0x26c>)
 800217a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800217e:	695a      	ldr	r2, [r3, #20]
 8002180:	3204      	adds	r2, #4
 8002182:	615a      	str	r2, [r3, #20]
		__asm volatile("mov r10,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002184:	4b32      	ldr	r3, [pc, #200]	; (8002250 <PendSV_Handler+0x26c>)
 8002186:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	469a      	mov	sl, r3
		OS_Control.CurrentTask->Current_PSP++ ;
 8002190:	4b2f      	ldr	r3, [pc, #188]	; (8002250 <PendSV_Handler+0x26c>)
 8002192:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	3204      	adds	r2, #4
 800219a:	615a      	str	r2, [r3, #20]
		__asm volatile("mov r9,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 800219c:	4b2c      	ldr	r3, [pc, #176]	; (8002250 <PendSV_Handler+0x26c>)
 800219e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4699      	mov	r9, r3
		OS_Control.CurrentTask->Current_PSP++ ;
 80021a8:	4b29      	ldr	r3, [pc, #164]	; (8002250 <PendSV_Handler+0x26c>)
 80021aa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	3204      	adds	r2, #4
 80021b2:	615a      	str	r2, [r3, #20]
		__asm volatile("mov r8,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 80021b4:	4b26      	ldr	r3, [pc, #152]	; (8002250 <PendSV_Handler+0x26c>)
 80021b6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4698      	mov	r8, r3
		OS_Control.CurrentTask->Current_PSP++ ;
 80021c0:	4b23      	ldr	r3, [pc, #140]	; (8002250 <PendSV_Handler+0x26c>)
 80021c2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	3204      	adds	r2, #4
 80021ca:	615a      	str	r2, [r3, #20]
		__asm volatile("mov r7,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 80021cc:	4b20      	ldr	r3, [pc, #128]	; (8002250 <PendSV_Handler+0x26c>)
 80021ce:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	461f      	mov	r7, r3
		OS_Control.CurrentTask->Current_PSP++ ;
 80021d8:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <PendSV_Handler+0x26c>)
 80021da:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	3204      	adds	r2, #4
 80021e2:	615a      	str	r2, [r3, #20]
		__asm volatile("mov r6,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <PendSV_Handler+0x26c>)
 80021e6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	461e      	mov	r6, r3
		OS_Control.CurrentTask->Current_PSP++ ;
 80021f0:	4b17      	ldr	r3, [pc, #92]	; (8002250 <PendSV_Handler+0x26c>)
 80021f2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80021f6:	695a      	ldr	r2, [r3, #20]
 80021f8:	3204      	adds	r2, #4
 80021fa:	615a      	str	r2, [r3, #20]
		__asm volatile("mov r5,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <PendSV_Handler+0x26c>)
 80021fe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461d      	mov	r5, r3
		OS_Control.CurrentTask->Current_PSP++ ;
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <PendSV_Handler+0x26c>)
 800220a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	3204      	adds	r2, #4
 8002212:	615a      	str	r2, [r3, #20]
		__asm volatile("mov r4,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <PendSV_Handler+0x26c>)
 8002216:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	461c      	mov	r4, r3
		OS_Control.CurrentTask->Current_PSP++ ;
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <PendSV_Handler+0x26c>)
 8002222:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	3204      	adds	r2, #4
 800222a:	615a      	str	r2, [r3, #20]
		//update PSP and exit
		OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <PendSV_Handler+0x26c>)
 800222e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	4618      	mov	r0, r3
 8002236:	f380 8809 	msr	PSP, r0
		// return to next task
	}
	OS_Control.NextTask = NULL ;
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <PendSV_Handler+0x26c>)
 800223c:	2200      	movs	r2, #0
 800223e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	OS_Control.Call_Leve=TASK_LEVEL;
 8002242:	4b03      	ldr	r3, [pc, #12]	; (8002250 <PendSV_Handler+0x26c>)
 8002244:	2200      	movs	r2, #0
 8002246:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
	__asm volatile("BX LR");
 800224a:	4770      	bx	lr
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	20000220 	.word	0x20000220

08002254 <MYRTOS_Create_MainStack>:
* @Fn          - MYRTOS_Create_MainStack
* @brief       - Creates the main stack for the MYRTOS (My Real-Time Operating System)
* @retval      - None
******************************************************************************************/
void MYRTOS_Create_MainStack()
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task = &_estack;
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <MYRTOS_Create_MainStack+0x34>)
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <MYRTOS_Create_MainStack+0x38>)
 800225c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP_Task = OS_Control._S_MSP_Task - MainStackSize;
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <MYRTOS_Create_MainStack+0x38>)
 8002262:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8002266:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800226a:	4a08      	ldr	r2, [pc, #32]	; (800228c <MYRTOS_Create_MainStack+0x38>)
 800226c:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	//Aligned 8 Bytes spaces between Main Task and PSP tasks
	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP_Task - 8);
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <MYRTOS_Create_MainStack+0x38>)
 8002272:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8002276:	3b08      	subs	r3, #8
 8002278:	4a04      	ldr	r2, [pc, #16]	; (800228c <MYRTOS_Create_MainStack+0x38>)
 800227a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	//if (_E_MSP_Task <&_eheap) Error:excedded the available stack size
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20005000 	.word	0x20005000
 800228c:	20000220 	.word	0x20000220

08002290 <MYRTOS_Init>:
* @Fn          - MYRTOS_Init
* @brief       - Initializes the MYRTOS (My Real-Time Operating System)
* @retval      - The error code indicating the success or failure of the initialization process
******************************************************************************************/
MY_RTOS_ErrorID MYRTOS_Init()
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
	MY_RTOS_ErrorID error = NO_ERROR ;
 8002296:	2300      	movs	r3, #0
 8002298:	71fb      	strb	r3, [r7, #7]
	//Update OS Mode (OSsuspend)
	OS_Control.OSmodeID = OSsuspend ;
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <MYRTOS_Init+0x60>)
 800229c:	2200      	movs	r2, #0
 800229e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Create main Stack for OS
	MYRTOS_Create_MainStack();
 80022a2:	f7ff ffd7 	bl	8002254 <MYRTOS_Create_MainStack>
	//Create OS Ready Queue
	if (FIFO_init(&Ready_QUEUE, Ready_QUEUE_FIFO, 100) !=FIFO_NO_ERROR)
 80022a6:	2264      	movs	r2, #100	; 0x64
 80022a8:	4912      	ldr	r1, [pc, #72]	; (80022f4 <MYRTOS_Init+0x64>)
 80022aa:	4813      	ldr	r0, [pc, #76]	; (80022f8 <MYRTOS_Init+0x68>)
 80022ac:	f7ff fdf4 	bl	8001e98 <FIFO_init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MYRTOS_Init+0x2a>
	{
		error = Ready_Queue_Init_Error ;
 80022b6:	2301      	movs	r3, #1
 80022b8:	71fb      	strb	r3, [r7, #7]
	}
	//Configure IDLE TASK
	strcpy (MYRTOS_idleTask.Task_Name, "idleTask");
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <MYRTOS_Init+0x6c>)
 80022bc:	4a10      	ldr	r2, [pc, #64]	; (8002300 <MYRTOS_Init+0x70>)
 80022be:	ca07      	ldmia	r2, {r0, r1, r2}
 80022c0:	c303      	stmia	r3!, {r0, r1}
 80022c2:	701a      	strb	r2, [r3, #0]
	MYRTOS_idleTask.priority = 0 ;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <MYRTOS_Init+0x74>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	711a      	strb	r2, [r3, #4]
	MYRTOS_idleTask.P_TaskEntry = MYRTOS_IdleTask ;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <MYRTOS_Init+0x74>)
 80022cc:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <MYRTOS_Init+0x78>)
 80022ce:	609a      	str	r2, [r3, #8]
	MYRTOS_idleTask.Stack_Size = 300 ;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <MYRTOS_Init+0x74>)
 80022d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022d6:	601a      	str	r2, [r3, #0]
	MYRTOS_CreateTask(&MYRTOS_idleTask);
 80022d8:	480a      	ldr	r0, [pc, #40]	; (8002304 <MYRTOS_Init+0x74>)
 80022da:	f000 f855 	bl	8002388 <MYRTOS_CreateTask>
	MYRTOS_idleTask.TaskSchedlerType=FULL_PREEMPTIVE;
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <MYRTOS_Init+0x74>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	return error ;
 80022e6:	79fb      	ldrb	r3, [r7, #7]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000220 	.word	0x20000220
 80022f4:	2000042c 	.word	0x2000042c
 80022f8:	20000418 	.word	0x20000418
 80022fc:	200003e4 	.word	0x200003e4
 8002300:	08003a54 	.word	0x08003a54
 8002304:	200003cc 	.word	0x200003cc
 8002308:	08001fad 	.word	0x08001fad

0800230c <MyRTOS_Create_TaskStack>:
* @brief       - Creates the stack for a specific task in MyRTOS
* @param [in]  - Tref: Pointer to the TaskRefType structure representing the task
* @retval      - None
*****************************************************************************************/
void MyRTOS_Create_TaskStack(TaskRefType* Tref)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	 * DUMMY Value
	 * XPSR should T =1 to thumb mode
	 * LR = 0xFFFFFFFD (EXC_RETURN)Return to thread with PSP
	 */
	//set current PSP
	Tref->Current_PSP = Tref->_S_PSP_Task ;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	461a      	mov	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	615a      	str	r2, [r3, #20]
	Tref->Current_PSP-- ;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	1f1a      	subs	r2, r3, #4
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	615a      	str	r2, [r3, #20]
	*(Tref->Current_PSP) = 0x01000000;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002330:	601a      	str	r2, [r3, #0]
	Tref->Current_PSP-- ;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	1f1a      	subs	r2, r3, #4
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	615a      	str	r2, [r3, #20]
	*(Tref->Current_PSP) = (uint32_t)Tref->P_TaskEntry ;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	601a      	str	r2, [r3, #0]
	Tref->Current_PSP-- ;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	1f1a      	subs	r2, r3, #4
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	615a      	str	r2, [r3, #20]
	*(Tref->Current_PSP)  = 0xFFFFFFFD ;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	f06f 0202 	mvn.w	r2, #2
 8002358:	601a      	str	r2, [r3, #0]
	//set R0 to R12 by value 0
	for (int  i=0 ; i< 13 ; i++ )
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	e00b      	b.n	8002378 <MyRTOS_Create_TaskStack+0x6c>
	{
		Tref->Current_PSP-- ;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	1f1a      	subs	r2, r3, #4
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	615a      	str	r2, [r3, #20]
		*(Tref->Current_PSP)  = 0 ;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
	for (int  i=0 ; i< 13 ; i++ )
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3301      	adds	r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b0c      	cmp	r3, #12
 800237c:	ddf0      	ble.n	8002360 <MyRTOS_Create_TaskStack+0x54>
	}
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <MYRTOS_CreateTask>:
* @brief       - Creates a new task in MyRTOS
* @param [in]  - Tref: Pointer to the TaskRefType structure representing the task
* @retval      - The error code indicating the success or failure of the task creation
*******************************************************************************************/
void MYRTOS_CreateTask(TaskRefType* Tref)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	//Create Its OWN PSP Stack
	// Start PSP Stack for Tref
	Tref->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 8002390:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <MYRTOS_CreateTask+0x80>)
 8002392:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	60da      	str	r2, [r3, #12]
	// End PSP Stack for Tref
	Tref->_E_PSP_Task = Tref->_S_PSP_Task - Tref->Stack_Size ;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	1ad2      	subs	r2, r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	611a      	str	r2, [r3, #16]
	//check that the stack task  does not exceed the stack size
	if(Tref->_E_PSP_Task < (uint32_t)(&(_eheap)))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	4a17      	ldr	r2, [pc, #92]	; (800240c <MYRTOS_CreateTask+0x84>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d201      	bcs.n	80023b6 <MYRTOS_CreateTask+0x2e>
	{
		HardFault_Handler();
 80023b2:	f7ff fc41 	bl	8001c38 <HardFault_Handler>
	}
	//Aligned 8 Bytes spaces between Current Task PSP and next
	OS_Control.PSP_Task_Locator=(Tref->_E_PSP_Task-8);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	3b08      	subs	r3, #8
 80023bc:	4a12      	ldr	r2, [pc, #72]	; (8002408 <MYRTOS_CreateTask+0x80>)
 80023be:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	//Initialize PSP Task Stack
	MyRTOS_Create_TaskStack(Tref);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ffa2 	bl	800230c <MyRTOS_Create_TaskStack>
	//update Scheduler Table
	OS_Control.OSTasks[OS_Control.NoOfActiveTasks]= Tref ;
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <MYRTOS_CreateTask+0x80>)
 80023ca:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80023ce:	490e      	ldr	r1, [pc, #56]	; (8002408 <MYRTOS_CreateTask+0x80>)
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.NoOfActiveTasks++ ;
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <MYRTOS_CreateTask+0x80>)
 80023d8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80023dc:	3301      	adds	r3, #1
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <MYRTOS_CreateTask+0x80>)
 80023e0:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
	//Task by default State is Suspend
	if(Tref->AutoStart)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <MYRTOS_CreateTask+0x6e>
	{
		ActivateTask(Tref);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f852 	bl	8002498 <ActivateTask>
	}
	else
		Tref->TaskState = Suspend ;
}
 80023f4:	e003      	b.n	80023fe <MYRTOS_CreateTask+0x76>
		Tref->TaskState = Suspend ;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000220 	.word	0x20000220
 800240c:	20000c38 	.word	0x20000c38

08002410 <MYRTOS_STARTOS>:
/****************************************************************************************
 * @Fn          - MYRTOS_CreateTask
 ******************************************************************************************/
void MYRTOS_STARTOS()
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
	OS_Control.CurrentTask=&MYRTOS_idleTask;
 8002414:	4b1d      	ldr	r3, [pc, #116]	; (800248c <MYRTOS_STARTOS+0x7c>)
 8002416:	4a1e      	ldr	r2, [pc, #120]	; (8002490 <MYRTOS_STARTOS+0x80>)
 8002418:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	if(Ready_QUEUE.counter==0)
 800241c:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <MYRTOS_STARTOS+0x84>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10c      	bne.n	800243e <MYRTOS_STARTOS+0x2e>
	{
		OS_Control.NextTask=&MYRTOS_idleTask;
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <MYRTOS_STARTOS+0x7c>)
 8002426:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <MYRTOS_STARTOS+0x80>)
 8002428:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		MYRTOS_idleTask.TaskState=Ready;
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <MYRTOS_STARTOS+0x80>)
 800242e:	2203      	movs	r2, #3
 8002430:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		OS_Control.CurrentTask=&MYRTOS_idleTask;
 8002434:	4b15      	ldr	r3, [pc, #84]	; (800248c <MYRTOS_STARTOS+0x7c>)
 8002436:	4a16      	ldr	r2, [pc, #88]	; (8002490 <MYRTOS_STARTOS+0x80>)
 8002438:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
 800243c:	e001      	b.n	8002442 <MYRTOS_STARTOS+0x32>
	}
	else
	{
		Schedule();
 800243e:	f000 f88f 	bl	8002560 <Schedule>
	}
	OS_Control.CurrentTask=&MYRTOS_idleTask;
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <MYRTOS_STARTOS+0x7c>)
 8002444:	4a12      	ldr	r2, [pc, #72]	; (8002490 <MYRTOS_STARTOS+0x80>)
 8002446:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	//Start Ticker
	Start_Ticker(); // 1ms
 800244a:	f7ff fc1d 	bl	8001c88 <Start_Ticker>
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <MYRTOS_STARTOS+0x7c>)
 8002450:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	4618      	mov	r0, r3
 8002458:	f380 8809 	msr	PSP, r0
	//Switch Thread Mode SP from MSP to PSP
	OS_Switch_SP_PSP;
 800245c:	f3ef 8014 	mrs	r0, CONTROL
 8002460:	f040 0002 	orr.w	r0, r0, #2
 8002464:	f380 8814 	msr	CONTROL, r0
	OS_Control.OSmodeID = OsRunning ;
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <MYRTOS_STARTOS+0x7c>)
 800246a:	2201      	movs	r2, #1
 800246c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	trigger_OS_PendSV();
 8002470:	f7ff fbf4 	bl	8001c5c <trigger_OS_PendSV>
	CPU_Access_Level_Unprivileged();
 8002474:	f3ef 8314 	mrs	r3, CONTROL
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	f383 8814 	msr	CONTROL, r3
	MYRTOS_idleTask.P_TaskEntry();
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <MYRTOS_STARTOS+0x80>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4798      	blx	r3
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000220 	.word	0x20000220
 8002490:	200003cc 	.word	0x200003cc
 8002494:	20000418 	.word	0x20000418

08002498 <ActivateTask>:
* @param [in] 		-TaskName:  a reference to the task.
* @retval 			-StatusType
* Note				-The service may be called both on the task level (from a task) and the interrupt level (from ISR).
*/
StatusType ActivateTask(TaskRefType* TaskName)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	//The specified task TaskName is transferred from the suspended state into the ready state.
	StatusType status=E_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]
	if(NULL==TaskName)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d103      	bne.n	80024b2 <ActivateTask+0x1a>
	{
		//the task identifier TaskName is invalid
		status=E_ID;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
		return status;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	e04e      	b.n	8002550 <ActivateTask+0xb8>
	}
	else
	{
		if(TaskName->MultipleActivation==0)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d148      	bne.n	800254e <ActivateTask+0xb6>
		{
			if(TaskName->TaskState==Suspend)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d13f      	bne.n	8002546 <ActivateTask+0xae>
			{
				if(FIFO_is_full(&Ready_QUEUE)==FIFO_NOT_FULL||FIFO_is_full(&Ready_QUEUE)==FIFO_EMPTY)
 80024c6:	4824      	ldr	r0, [pc, #144]	; (8002558 <ActivateTask+0xc0>)
 80024c8:	f7ff fd4a 	bl	8001f60 <FIFO_is_full>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d005      	beq.n	80024de <ActivateTask+0x46>
 80024d2:	4821      	ldr	r0, [pc, #132]	; (8002558 <ActivateTask+0xc0>)
 80024d4:	f7ff fd44 	bl	8001f60 <FIFO_is_full>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d12f      	bne.n	800253e <ActivateTask+0xa6>
				{
					TaskName->TaskState=Ready;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2203      	movs	r2, #3
 80024e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
					if(OS_Control.CurrentTask->TaskSchedlerType!=NONE_PREEMPTIVE)
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <ActivateTask+0xc4>)
 80024e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80024ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d02c      	beq.n	800254e <ActivateTask+0xb6>
					{
						if(TaskName->priority>OS_Control.CurrentTask->priority)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	791a      	ldrb	r2, [r3, #4]
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <ActivateTask+0xc4>)
 80024fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80024fe:	791b      	ldrb	r3, [r3, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	d917      	bls.n	8002534 <ActivateTask+0x9c>
						{
							//the new task high priority than CurrentTask
							OS_Control.NextTask=TaskName;
 8002504:	4a15      	ldr	r2, [pc, #84]	; (800255c <ActivateTask+0xc4>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
							//push current Queue
							FIFO_enqueue(&Ready_QUEUE,OS_Control.CurrentTask);
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <ActivateTask+0xc4>)
 800250e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002512:	4619      	mov	r1, r3
 8002514:	4810      	ldr	r0, [pc, #64]	; (8002558 <ActivateTask+0xc0>)
 8002516:	f7ff fce1 	bl	8001edc <FIFO_enqueue>
							if(OS_Control.OSmodeID==OsRunning)
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <ActivateTask+0xc4>)
 800251c:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8002520:	2b01      	cmp	r3, #1
 8002522:	d102      	bne.n	800252a <ActivateTask+0x92>
							{
								trigger_OS_PendSV();
 8002524:	f7ff fb9a 	bl	8001c5c <trigger_OS_PendSV>
					if(OS_Control.CurrentTask->TaskSchedlerType!=NONE_PREEMPTIVE)
 8002528:	e011      	b.n	800254e <ActivateTask+0xb6>
							}
							else
							{
								/************************************************************************/
								//Add task to ready buffer
								FIFO_enqueue(&Ready_QUEUE, TaskName);
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	480a      	ldr	r0, [pc, #40]	; (8002558 <ActivateTask+0xc0>)
 800252e:	f7ff fcd5 	bl	8001edc <FIFO_enqueue>
					if(OS_Control.CurrentTask->TaskSchedlerType!=NONE_PREEMPTIVE)
 8002532:	e00c      	b.n	800254e <ActivateTask+0xb6>
						}
						else
						{
							/************************************************************************/
							//Add task to ready buffer
							FIFO_enqueue(&Ready_QUEUE, TaskName);
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4808      	ldr	r0, [pc, #32]	; (8002558 <ActivateTask+0xc0>)
 8002538:	f7ff fcd0 	bl	8001edc <FIFO_enqueue>
					if(OS_Control.CurrentTask->TaskSchedlerType!=NONE_PREEMPTIVE)
 800253c:	e007      	b.n	800254e <ActivateTask+0xb6>
					}
				}
				else
				{
					// too many task activations of the specified task or there is no enough resources to activate the task.
					status=E_STATE;
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
					return status;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	e004      	b.n	8002550 <ActivateTask+0xb8>
				}
			}
			else
			{
				// the task identifier TaskName is invalid
				status=E_STATE;
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]
				return status;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	e000      	b.n	8002550 <ActivateTask+0xb8>
		else
		{
			//later (MultipleActivation property in Basic Task)
		}
	}
	return status;
 800254e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000418 	.word	0x20000418
 800255c:	20000220 	.word	0x20000220

08002560 <Schedule>:
* @param [out] 		-None
* @retval 			-StatusType
* Note				-None
*/
StatusType Schedule(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
	StatusType Error=E_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	73bb      	strb	r3, [r7, #14]
	TaskRefType* Temp;
	uint32_t IRQ_Flag=0;
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
	//read state of cpu
	OS_GET_IRQ_Flag(IRQ_Flag);
 800256e:	f3ef 8005 	mrs	r0, IPSR
 8002572:	4603      	mov	r3, r0
 8002574:	60bb      	str	r3, [r7, #8]
	if(IRQ_Flag!=0&&IRQ_Flag!=36)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00d      	beq.n	8002598 <Schedule+0x38>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b24      	cmp	r3, #36	; 0x24
 8002580:	d00a      	beq.n	8002598 <Schedule+0x38>
	{
		if(OS_Control.CurrentTask->TaskType==Extended_Task)
 8002582:	4b34      	ldr	r3, [pc, #208]	; (8002654 <Schedule+0xf4>)
 8002584:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002588:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800258c:	2b01      	cmp	r3, #1
 800258e:	d15b      	bne.n	8002648 <Schedule+0xe8>
		{
			// a call at the interrupt level.
			Error=E_CALLEVEL;
 8002590:	2302      	movs	r3, #2
 8002592:	73bb      	strb	r3, [r7, #14]
			return Error;
 8002594:	7bbb      	ldrb	r3, [r7, #14]
 8002596:	e058      	b.n	800264a <Schedule+0xea>
			// No return to the caller (handle later)
		}
	}
	else
	{
		for(int i=0;i<OS_Control.NoOfActiveTasks-1;i++)
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	e02d      	b.n	80025fa <Schedule+0x9a>
		{
			for(int j=i+1;j<OS_Control.NoOfActiveTasks;j++)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	3301      	adds	r3, #1
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	e020      	b.n	80025e8 <Schedule+0x88>
			{
				if(OS_Control.OSTasks[i]->priority<OS_Control.OSTasks[j]->priority)
 80025a6:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <Schedule+0xf4>)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ae:	791a      	ldrb	r2, [r3, #4]
 80025b0:	4928      	ldr	r1, [pc, #160]	; (8002654 <Schedule+0xf4>)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025b8:	791b      	ldrb	r3, [r3, #4]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d211      	bcs.n	80025e2 <Schedule+0x82>
				{
					Temp=OS_Control.OSTasks[i];
 80025be:	4a25      	ldr	r2, [pc, #148]	; (8002654 <Schedule+0xf4>)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c6:	607b      	str	r3, [r7, #4]
					OS_Control.OSTasks[i]=OS_Control.OSTasks[j];
 80025c8:	4a22      	ldr	r2, [pc, #136]	; (8002654 <Schedule+0xf4>)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025d0:	4920      	ldr	r1, [pc, #128]	; (8002654 <Schedule+0xf4>)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					OS_Control.OSTasks[j]=Temp;
 80025d8:	491e      	ldr	r1, [pc, #120]	; (8002654 <Schedule+0xf4>)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int j=i+1;j<OS_Control.NoOfActiveTasks;j++)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	3301      	adds	r3, #1
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <Schedule+0xf4>)
 80025ea:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d8d8      	bhi.n	80025a6 <Schedule+0x46>
		for(int i=0;i<OS_Control.NoOfActiveTasks-1;i++)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3301      	adds	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	4b16      	ldr	r3, [pc, #88]	; (8002654 <Schedule+0xf4>)
 80025fc:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8002600:	1e5a      	subs	r2, r3, #1
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	429a      	cmp	r2, r3
 8002606:	d8ca      	bhi.n	800259e <Schedule+0x3e>
					//
				}
			}
		}
		//initial value for Next Task
		OS_Control.NextTask=&MYRTOS_idleTask;
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <Schedule+0xf4>)
 800260a:	4a13      	ldr	r2, [pc, #76]	; (8002658 <Schedule+0xf8>)
 800260c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		uint8_t index=0;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
		while(index< OS_Control.NoOfActiveTasks)
 8002614:	e012      	b.n	800263c <Schedule+0xdc>
		{
			//select ready task
			if (OS_Control.OSTasks[index]->TaskState == Ready)
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	4a0e      	ldr	r2, [pc, #56]	; (8002654 <Schedule+0xf4>)
 800261a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002622:	2b03      	cmp	r3, #3
 8002624:	d107      	bne.n	8002636 <Schedule+0xd6>
			{
				OS_Control.NextTask=OS_Control.OSTasks[index] ;
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <Schedule+0xf4>)
 800262a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262e:	4a09      	ldr	r2, [pc, #36]	; (8002654 <Schedule+0xf4>)
 8002630:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
				break ;
 8002634:	e008      	b.n	8002648 <Schedule+0xe8>
			}
			else
			{
				index++ ;
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	3301      	adds	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
		while(index< OS_Control.NoOfActiveTasks)
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	4b05      	ldr	r3, [pc, #20]	; (8002654 <Schedule+0xf4>)
 8002640:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8002644:	429a      	cmp	r2, r3
 8002646:	d3e6      	bcc.n	8002616 <Schedule+0xb6>
			}
		}
	}
	return Error;
 8002648:	7bbb      	ldrb	r3, [r7, #14]
}
 800264a:	4618      	mov	r0, r3
 800264c:	371c      	adds	r7, #28
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	20000220 	.word	0x20000220
 8002658:	200003cc 	.word	0x200003cc

0800265c <get_position>:
 uint8 Flag_DIR_Change[PortNumberOfPortPins]={0};
/*************************************************************************
                               Local Functions
*************************************************************************/
 uint8 get_position(uint8 pinNumber)
 {
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
	 uint8 Pos=0;
 8002666:	2300      	movs	r3, #0
 8002668:	73fb      	strb	r3, [r7, #15]
	 if(pinNumber<PORT_B_PIN_0)
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	2b10      	cmp	r3, #16
 800266e:	d80e      	bhi.n	800268e <get_position+0x32>
	 {
		 if(pinNumber<PORT_A_PIN_8)
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	2b08      	cmp	r3, #8
 8002674:	d805      	bhi.n	8002682 <get_position+0x26>
			 Pos=((pinNumber-1)*4);
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	333f      	adds	r3, #63	; 0x3f
 800267a:	b2db      	uxtb	r3, r3
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	73fb      	strb	r3, [r7, #15]
 8002680:	e01c      	b.n	80026bc <get_position+0x60>
		 else
			 Pos=((pinNumber-1)*4)-32;
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	3337      	adds	r3, #55	; 0x37
 8002686:	b2db      	uxtb	r3, r3
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	73fb      	strb	r3, [r7, #15]
 800268c:	e016      	b.n	80026bc <get_position+0x60>
	 }
	 else if(pinNumber<PORT_C_PIN_13)
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	2b2d      	cmp	r3, #45	; 0x2d
 8002692:	d80e      	bhi.n	80026b2 <get_position+0x56>
	 {
		 if(pinNumber<PORT_B_PIN_8)
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	2b18      	cmp	r3, #24
 8002698:	d805      	bhi.n	80026a6 <get_position+0x4a>
			 Pos=((pinNumber-17)*4);
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	332f      	adds	r3, #47	; 0x2f
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	e00a      	b.n	80026bc <get_position+0x60>
		 else
			 Pos=((pinNumber-17)*4)-32;
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	3327      	adds	r3, #39	; 0x27
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	e004      	b.n	80026bc <get_position+0x60>
	 }
	 else
	 {
		 Pos=((pinNumber-33)*4)-32;
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	3317      	adds	r3, #23
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	73fb      	strb	r3, [r7, #15]
	 }
	 return Pos;
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 }
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <Port_Init>:
* Parameters (out)	:	None
* Return value		:	None
* Description		:	Initializes the Port Driver module.
***********************************************************************/
void Port_Init( const Port_ConfigType* ConfigPtr )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	GPIO_TypeDef* GPIO_Current=NULL_PTR;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]
	 uint8 pos=0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	76fb      	strb	r3, [r7, #27]
	uint32 pin_config=0;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
	volatile uint32 *configregister =NULL_PTR;
 80026dc:	2300      	movs	r3, #0
 80026de:	613b      	str	r3, [r7, #16]
	//uint32 pin_config=0;
	Port_Config = ConfigPtr ;
 80026e0:	4ab3      	ldr	r2, [pc, #716]	; (80029b0 <Port_Init+0x2e8>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6013      	str	r3, [r2, #0]
	#if (TRUE==PortDevErrorDetect)
		// Check APIs called with a Null Pointer
		if (NULL_PTR==ConfigPtr)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d105      	bne.n	80026f8 <Port_Init+0x30>
		{
			Det_ReportError(PORT_VERSION_ID,PORT_INSTANCE_ZERO,PORT_INIT_ID,PORT_E_PARAM_POINTER);
 80026ec:	2310      	movs	r3, #16
 80026ee:	2200      	movs	r2, #0
 80026f0:	2100      	movs	r1, #0
 80026f2:	2028      	movs	r0, #40	; 0x28
 80026f4:	f7ff f946 	bl	8001984 <Det_ReportError>
		else
		{
			//
		}
	#endif
	for(int Pin_Index=0;Pin_Index<PortNumberOfPortPins;Pin_Index++)
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	e21e      	b.n	8002b3c <Port_Init+0x474>
	{
		pin_config=0;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
		//determine GPIO current port
		if(ConfigPtr->PortPin[Pin_Index].PortPinId<PORT_B_PIN_0)
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	440b      	add	r3, r1
 8002710:	3302      	adds	r3, #2
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b10      	cmp	r3, #16
 8002716:	d833      	bhi.n	8002780 <Port_Init+0xb8>
		{
			GPIO_Current=GPIOA;
 8002718:	4ba6      	ldr	r3, [pc, #664]	; (80029b4 <Port_Init+0x2ec>)
 800271a:	61fb      	str	r3, [r7, #28]
			// GPIO->CRL configure pins 0-->>7
			// GPIO->CRH configure pins 8-->>15
			if(ConfigPtr->PortPin[Pin_Index].PortPinId<PORT_A_PIN_8)
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	440b      	add	r3, r1
 800272a:	3302      	adds	r3, #2
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b08      	cmp	r3, #8
 8002730:	d811      	bhi.n	8002756 <Port_Init+0x8e>
			{
				configregister=&GPIO_Current->CRL;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	613b      	str	r3, [r7, #16]
				pos=get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)/4;
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	440b      	add	r3, r1
 8002744:	3302      	adds	r3, #2
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff87 	bl	800265c <get_position>
 800274e:	4603      	mov	r3, r0
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	76fb      	strb	r3, [r7, #27]
 8002754:	e069      	b.n	800282a <Port_Init+0x162>
			}
			else
			{
				configregister=&GPIO_Current->CRH;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3304      	adds	r3, #4
 800275a:	613b      	str	r3, [r7, #16]
				pos=(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)/4)+8;
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	440b      	add	r3, r1
 800276a:	3302      	adds	r3, #2
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff ff74 	bl	800265c <get_position>
 8002774:	4603      	mov	r3, r0
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3308      	adds	r3, #8
 800277c:	76fb      	strb	r3, [r7, #27]
 800277e:	e054      	b.n	800282a <Port_Init+0x162>
			}
		}
		else if(ConfigPtr->PortPin[Pin_Index].PortPinId<PORT_C_PIN_13)
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	440b      	add	r3, r1
 800278e:	3302      	adds	r3, #2
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b2d      	cmp	r3, #45	; 0x2d
 8002794:	d833      	bhi.n	80027fe <Port_Init+0x136>
		{
			GPIO_Current=GPIOB;
 8002796:	4b88      	ldr	r3, [pc, #544]	; (80029b8 <Port_Init+0x2f0>)
 8002798:	61fb      	str	r3, [r7, #28]
			// GPIO->CRL configure pins 0-->>7
			// GPIO->CRH configure pins 8-->>15
			if(ConfigPtr->PortPin[Pin_Index].PortPinId<PORT_B_PIN_8)
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	440b      	add	r3, r1
 80027a8:	3302      	adds	r3, #2
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b18      	cmp	r3, #24
 80027ae:	d811      	bhi.n	80027d4 <Port_Init+0x10c>
			{
				configregister=&GPIO_Current->CRL;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	613b      	str	r3, [r7, #16]
				pos=get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)/4;
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	440b      	add	r3, r1
 80027c2:	3302      	adds	r3, #2
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ff48 	bl	800265c <get_position>
 80027cc:	4603      	mov	r3, r0
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	76fb      	strb	r3, [r7, #27]
 80027d2:	e02a      	b.n	800282a <Port_Init+0x162>
			}
			else
			{
				configregister=&GPIO_Current->CRH;
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	3304      	adds	r3, #4
 80027d8:	613b      	str	r3, [r7, #16]
				pos=(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)/4)+8;
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	440b      	add	r3, r1
 80027e8:	3302      	adds	r3, #2
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff35 	bl	800265c <get_position>
 80027f2:	4603      	mov	r3, r0
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	3308      	adds	r3, #8
 80027fa:	76fb      	strb	r3, [r7, #27]
 80027fc:	e015      	b.n	800282a <Port_Init+0x162>
			}
		}
		else
		{
			GPIO_Current=GPIOC;
 80027fe:	4b6f      	ldr	r3, [pc, #444]	; (80029bc <Port_Init+0x2f4>)
 8002800:	61fb      	str	r3, [r7, #28]
			// GPIO->CRL configure pins 0-->>7
			// GPIO->CRH configure pins 8-->>15
			configregister =&GPIO_Current->CRH;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3304      	adds	r3, #4
 8002806:	613b      	str	r3, [r7, #16]
			pos=(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)/4)+8;
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	440b      	add	r3, r1
 8002816:	3302      	adds	r3, #2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ff1e 	bl	800265c <get_position>
 8002820:	4603      	mov	r3, r0
 8002822:	089b      	lsrs	r3, r3, #2
 8002824:	b2db      	uxtb	r3, r3
 8002826:	3308      	adds	r3, #8
 8002828:	76fb      	strb	r3, [r7, #27]
		}
		//clear MODEy[1:0] and CNFy[1:0]
		(*configregister) &=~(0XF<<get_position(ConfigPtr->PortPin[Pin_Index].PortPinId));
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	440b      	add	r3, r1
 8002838:	3302      	adds	r3, #2
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff0d 	bl	800265c <get_position>
 8002842:	4603      	mov	r3, r0
 8002844:	461a      	mov	r2, r3
 8002846:	230f      	movs	r3, #15
 8002848:	4093      	lsls	r3, r2
 800284a:	43da      	mvns	r2, r3
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	401a      	ands	r2, r3
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	601a      	str	r2, [r3, #0]
		//pin mode
		if(ConfigPtr->PortPin[Pin_Index].PortPinDirection==PORT_PIN_OUT)
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	440b      	add	r3, r1
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	f040 80d5 	bne.w	8002a16 <Port_Init+0x34e>
		{
			//Slew_Rate
			if(ConfigPtr->PortPin[Pin_Index].Slew_Rate==GPIO_Slew_Rate_10M)
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	440b      	add	r3, r1
 800287a:	3308      	adds	r3, #8
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d114      	bne.n	80028ac <Port_Init+0x1e4>
			{
				//01: Output mode, max speed 10 MHz
				pin_config|=(0b01<<get_position(ConfigPtr->PortPin[Pin_Index].PortPinId));
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	440b      	add	r3, r1
 8002890:	3302      	adds	r3, #2
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fee1 	bl	800265c <get_position>
 800289a:	4603      	mov	r3, r0
 800289c:	461a      	mov	r2, r3
 800289e:	2301      	movs	r3, #1
 80028a0:	4093      	lsls	r3, r2
 80028a2:	461a      	mov	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e033      	b.n	8002914 <Port_Init+0x24c>

			}
			else if(ConfigPtr->PortPin[Pin_Index].Slew_Rate==GPIO_Slew_Rate_50M)
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	440b      	add	r3, r1
 80028ba:	3308      	adds	r3, #8
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d114      	bne.n	80028ec <Port_Init+0x224>
			{
				//11: Output mode, max speed 50 MHz
				pin_config|=(0b11<<get_position(ConfigPtr->PortPin[Pin_Index].PortPinId));
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	440b      	add	r3, r1
 80028d0:	3302      	adds	r3, #2
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fec1 	bl	800265c <get_position>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
 80028de:	2303      	movs	r3, #3
 80028e0:	4093      	lsls	r3, r2
 80028e2:	461a      	mov	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	e013      	b.n	8002914 <Port_Init+0x24c>
			}
			else
			{
				//10: Output mode, max speed 2 MHz
				pin_config|=(0b10<<get_position(ConfigPtr->PortPin[Pin_Index].PortPinId));
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	440b      	add	r3, r1
 80028fa:	3302      	adds	r3, #2
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff feac 	bl	800265c <get_position>
 8002904:	4603      	mov	r3, r0
 8002906:	461a      	mov	r2, r3
 8002908:	2302      	movs	r3, #2
 800290a:	4093      	lsls	r3, r2
 800290c:	461a      	mov	r2, r3
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]
			}
			//Pin driven mode
			if(ConfigPtr->PortPin[Pin_Index].PortPinMode==PORT_PIN_MODE_CAN)
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	440b      	add	r3, r1
 8002922:	3305      	adds	r3, #5
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d115      	bne.n	8002956 <Port_Init+0x28e>
			{
				//10: Alternate function output Push-pull
				pin_config|=(0b10<<(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)+2));
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	440b      	add	r3, r1
 8002938:	3302      	adds	r3, #2
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fe8d 	bl	800265c <get_position>
 8002942:	4603      	mov	r3, r0
 8002944:	3302      	adds	r3, #2
 8002946:	2202      	movs	r2, #2
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	461a      	mov	r2, r3
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	e049      	b.n	80029ea <Port_Init+0x322>
			}
			else if(ConfigPtr->PortPin[Pin_Index].PortPinMode==PORT_PIN_MODE_ADC)
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	440b      	add	r3, r1
 8002964:	3305      	adds	r3, #5
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d03e      	beq.n	80029ea <Port_Init+0x322>
			{
				//
			}
			else
			{
				if(ConfigPtr->PortPin[Pin_Index].Pin_Driven_Mode==GPIO_Pin_Driven_Mode_PP)
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	440b      	add	r3, r1
 800297a:	3309      	adds	r3, #9
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d11e      	bne.n	80029c0 <Port_Init+0x2f8>
				{
					//00: General purpose output push-pull
					pin_config&=~(0b11<<(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)+2));
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	440b      	add	r3, r1
 8002990:	3302      	adds	r3, #2
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fe61 	bl	800265c <get_position>
 800299a:	4603      	mov	r3, r0
 800299c:	3302      	adds	r3, #2
 800299e:	2203      	movs	r2, #3
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	4013      	ands	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	e01c      	b.n	80029ea <Port_Init+0x322>
 80029b0:	20000108 	.word	0x20000108
 80029b4:	40010800 	.word	0x40010800
 80029b8:	40010c00 	.word	0x40010c00
 80029bc:	40011000 	.word	0x40011000
				}
				else
				{
					//01: General purpose output Open-drain
					pin_config|=(0b01<<(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)+2));
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	440b      	add	r3, r1
 80029ce:	3302      	adds	r3, #2
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fe42 	bl	800265c <get_position>
 80029d8:	4603      	mov	r3, r0
 80029da:	3302      	adds	r3, #2
 80029dc:	2201      	movs	r2, #1
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
				}
			}
			// Port Pin Level value from Port pin list.
			if(ConfigPtr->PortPin[Pin_Index].PortPinLevelValue==STD_HIGH)
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	440b      	add	r3, r1
 80029f8:	3304      	adds	r3, #4
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	f040 8094 	bne.w	8002b2a <Port_Init+0x462>
			{
				GPIO_Current->ODR|=1<<pos;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	7efa      	ldrb	r2, [r7, #27]
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	60da      	str	r2, [r3, #12]
 8002a14:	e089      	b.n	8002b2a <Port_Init+0x462>
			else
			{
				//
			}
		}
		else if(ConfigPtr->PortPin[Pin_Index].PortPinDirection==PORT_PIN_IN)
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	440b      	add	r3, r1
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d17f      	bne.n	8002b2a <Port_Init+0x462>
		{
			//Pin driven mode
			if(ConfigPtr->PortPin[Pin_Index].PortPinMode==PORT_PIN_MODE_CAN)
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	440b      	add	r3, r1
 8002a38:	3305      	adds	r3, #5
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d11e      	bne.n	8002a7e <Port_Init+0x3b6>
			{
				//10: Input with pull-up / pull-down
				pin_config|=(0b10<<(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)+2));
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3302      	adds	r3, #2
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fe02 	bl	800265c <get_position>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]
				//  port bit configuration table px_ODR =1
				GPIO_Current->ODR|=1<<pos;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	7efa      	ldrb	r2, [r7, #27]
 8002a70:	2101      	movs	r1, #1
 8002a72:	fa01 f202 	lsl.w	r2, r1, r2
 8002a76:	431a      	orrs	r2, r3
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	60da      	str	r2, [r3, #12]
 8002a7c:	e055      	b.n	8002b2a <Port_Init+0x462>
			}
			else if(ConfigPtr->PortPin[Pin_Index].PortPinMode==PORT_PIN_MODE_ADC)
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3305      	adds	r3, #5
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d116      	bne.n	8002ac2 <Port_Init+0x3fa>
			{
				//00: Analog mode
				pin_config&=~(0b11<<(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)+2));
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fdd8 	bl	800265c <get_position>
 8002aac:	4603      	mov	r3, r0
 8002aae:	3302      	adds	r3, #2
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	4013      	ands	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	e033      	b.n	8002b2a <Port_Init+0x462>
			}
			else
			{
				if(ConfigPtr->PortPin[Pin_Index].Pull_UP==TRUE)
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	440b      	add	r3, r1
 8002ad0:	3307      	adds	r3, #7
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d128      	bne.n	8002b2a <Port_Init+0x462>
				{
					//10: Input with pull-up / pull-down
					pin_config|=(0b10<<(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)+2));
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fdb6 	bl	800265c <get_position>
 8002af0:	4603      	mov	r3, r0
 8002af2:	3302      	adds	r3, #2
 8002af4:	2202      	movs	r2, #2
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
					//  port bit configuration table px_ODR =1
					if(ConfigPtr->PortPin[Pin_Index].PortPinLevelValue==STD_HIGH)
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	440b      	add	r3, r1
 8002b10:	3304      	adds	r3, #4
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d108      	bne.n	8002b2a <Port_Init+0x462>
					{
						GPIO_Current->ODR|=1<<pos;
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	7efa      	ldrb	r2, [r7, #27]
 8002b1e:	2101      	movs	r1, #1
 8002b20:	fa01 f202 	lsl.w	r2, r1, r2
 8002b24:	431a      	orrs	r2, r3
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	60da      	str	r2, [r3, #12]
		}
		else
		{
			//
		}
		*configregister|=pin_config;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	601a      	str	r2, [r3, #0]
	for(int Pin_Index=0;Pin_Index<PortNumberOfPortPins;Pin_Index++)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b1f      	cmp	r3, #31
 8002b40:	f77f addd 	ble.w	80026fe <Port_Init+0x36>
	}
	/*
	 [SWS_Port_00002] The function Port_Init shall initialize all variables used by the
	 PORT driver module to an initial state.
	 */
	Port_Status=PORT_INITIALIZED;
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <Port_Init+0x48c>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
}
 8002b4a:	bf00      	nop
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000105 	.word	0x20000105

08002b58 <Pwm_Init>:
 * Parameters (out)  	: None
 * Return value     	: None
 * Description       	: Service for PWM initialization
 ********************************************************************************/
void Pwm_Init (const Pwm_ConfigType* ConfigPtr)
{
 8002b58:	b5b0      	push	{r4, r5, r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	uint32 Max_Counter=0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
	uint32 Duty_cycle=0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
	Pwm_Config=*ConfigPtr;
 8002b68:	4abb      	ldr	r2, [pc, #748]	; (8002e58 <Pwm_Init+0x300>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	2350      	movs	r3, #80	; 0x50
 8002b72:	461a      	mov	r2, r3
 8002b74:	f000 ff56 	bl	8003a24 <memcpy>
	/*
	 [SWS_Pwm_00118] If development error detection is enabled, calling the routine
	 Pwm_Init while the PWM driver and hardware are already initialized will cause a development
	 error PWM_E_ALREADY_INITIALIZED. The desired functionality shall be left without any action.
	 */
	if(PWM_State==PWM_INITIALIZED)
 8002b78:	4bb8      	ldr	r3, [pc, #736]	; (8002e5c <Pwm_Init+0x304>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <Pwm_Init+0x34>
	{
		/*
		 [SWS_Pwm_00121] A re-initialization of the Pwm driver by executing the
		 Pwm_Init() function requires a de-initialization before by executing a Pwm_DeInit().
		*/
		Det_ReportError(PWM_VERSION_ID,PwmIndex_Zero, PWM_INIT_ID, PWM_E_ALREADY_INITIALIZED);
 8002b80:	2314      	movs	r3, #20
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	2025      	movs	r0, #37	; 0x25
 8002b88:	f7fe fefc 	bl	8001984 <Det_ReportError>
	else
	{
		//
	}
	//API Pwm_GetVersionInfo is called with a NULL parameter.
	if(ConfigPtr==NULL_PTR)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d105      	bne.n	8002b9e <Pwm_Init+0x46>
	{
		Det_ReportError(PWM_VERSION_ID,PwmIndex_Zero, PWM_INIT_ID, PWM_E_PARAM_POINTER);
 8002b92:	2315      	movs	r3, #21
 8002b94:	2200      	movs	r2, #0
 8002b96:	2100      	movs	r1, #0
 8002b98:	2025      	movs	r0, #37	; 0x25
 8002b9a:	f7fe fef3 	bl	8001984 <Det_ReportError>
		//
	}
#endif
	//enable interrupt
	//NVIC_IRQ28_TIM2_Enable();
	for(int ch_index=0;ch_index<=Max_Num_CH;ch_index++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba2:	e015      	b.n	8002bd0 <Pwm_Init+0x78>
	{
		TIM2->DIER|=1<<(Pwm_Config.Config_Pwm.Channel_Config[ch_index].PwmChannelId);
 8002ba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ba8:	68d9      	ldr	r1, [r3, #12]
 8002baa:	48ab      	ldr	r0, [pc, #684]	; (8002e58 <Pwm_Init+0x300>)
 8002bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4403      	add	r3, r0
 8002bb8:	3301      	adds	r3, #1
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	4093      	lsls	r3, r2
 8002bc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	60d3      	str	r3, [r2, #12]
	for(int ch_index=0;ch_index<=Max_Num_CH;ch_index++)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	3301      	adds	r3, #1
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	dde6      	ble.n	8002ba4 <Pwm_Init+0x4c>
	}
	/*
	 [SWS_Pwm_00052] The function Pwm_Init shall disable all notifications.
	 */
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	623b      	str	r3, [r7, #32]
 8002bda:	e00f      	b.n	8002bfc <Pwm_Init+0xa4>
	{
		Flag_Notifications|=0b11<<ch_index;
 8002bdc:	2203      	movs	r2, #3
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	b25a      	sxtb	r2, r3
 8002be6:	4b9e      	ldr	r3, [pc, #632]	; (8002e60 <Pwm_Init+0x308>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	b25b      	sxtb	r3, r3
 8002bec:	4313      	orrs	r3, r2
 8002bee:	b25b      	sxtb	r3, r3
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4b9b      	ldr	r3, [pc, #620]	; (8002e60 <Pwm_Init+0x308>)
 8002bf4:	701a      	strb	r2, [r3, #0]
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	623b      	str	r3, [r7, #32]
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	ddec      	ble.n	8002bdc <Pwm_Init+0x84>
	}
	// Only counter overflow/underflow generates an update interrupt
	TIM2->CR1|=1<<2;
 8002c02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	6013      	str	r3, [r2, #0]
	// Auto-reload preload enable
	TIM2->CR1|=1<<7;
 8002c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c20:	6013      	str	r3, [r2, #0]
	// output state of the PWM after the signal is stopped
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	e036      	b.n	8002c96 <Pwm_Init+0x13e>
	{
		if(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmIdleState==PWM_HIGH)
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	3304      	adds	r3, #4
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10e      	bne.n	8002c5c <Pwm_Init+0x104>
		{
			//1: OC1 active low.
			TIM2->CCER|=1<<(1+(ch_index*4));
 8002c3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	69fa      	ldr	r2, [r7, #28]
 8002c46:	0092      	lsls	r2, r2, #2
 8002c48:	3201      	adds	r2, #1
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c50:	4611      	mov	r1, r2
 8002c52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c56:	430b      	orrs	r3, r1
 8002c58:	6213      	str	r3, [r2, #32]
 8002c5a:	e019      	b.n	8002c90 <Pwm_Init+0x138>
		}
		else if(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmIdleState==PWM_LOW)
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d10e      	bne.n	8002c90 <Pwm_Init+0x138>
		{
			//0: OC1 active high.
			TIM2->CCER&=~(1<<(1+(ch_index*4)));
 8002c72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	3201      	adds	r2, #1
 8002c7e:	2101      	movs	r1, #1
 8002c80:	fa01 f202 	lsl.w	r2, r1, r2
 8002c84:	43d2      	mvns	r2, r2
 8002c86:	4611      	mov	r1, r2
 8002c88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c8c:	400b      	ands	r3, r1
 8002c8e:	6213      	str	r3, [r2, #32]
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	3301      	adds	r3, #1
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	ddc5      	ble.n	8002c28 <Pwm_Init+0xd0>
		{
			//Error
		}
	}
	//Defines the starting polarity of each PWM channel.
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	e142      	b.n	8002f28 <Pwm_Init+0x3d0>
	{
		if(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmPolarity==PWM_HIGH)
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	3310      	adds	r3, #16
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f040 808f 	bne.w	8002dd8 <Pwm_Init+0x280>
		{
			if(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmIdleState==PWM_LOW)
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3304      	adds	r3, #4
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d13b      	bne.n	8002d48 <Pwm_Init+0x1f0>
			{
				//110: PWM mode_1 channel x is active as long as TIMx_CNT<TIMx_CCR1 else inactive
				switch(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmChannelId)
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3301      	adds	r3, #1
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	f200 8116 	bhi.w	8002f14 <Pwm_Init+0x3bc>
 8002ce8:	a201      	add	r2, pc, #4	; (adr r2, 8002cf0 <Pwm_Init+0x198>)
 8002cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cee:	bf00      	nop
 8002cf0:	08002d01 	.word	0x08002d01
 8002cf4:	08002d13 	.word	0x08002d13
 8002cf8:	08002d25 	.word	0x08002d25
 8002cfc:	08002d37 	.word	0x08002d37
				{
				case PwmChannelId_0:
					TIM2->CCMR1 |=13<<3;
 8002d00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d0a:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8002d0e:	6193      	str	r3, [r2, #24]
					break;
 8002d10:	e107      	b.n	8002f22 <Pwm_Init+0x3ca>
				case PwmChannelId_1:
					TIM2->CCMR1 |=13<<11;
 8002d12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d1c:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8002d20:	6193      	str	r3, [r2, #24]
					break;
 8002d22:	e0fe      	b.n	8002f22 <Pwm_Init+0x3ca>
				case PwmChannelId_2:
					TIM2->CCMR2 |=13<<3;
 8002d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d2e:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8002d32:	61d3      	str	r3, [r2, #28]
					break;
 8002d34:	e0f5      	b.n	8002f22 <Pwm_Init+0x3ca>
				case PwmChannelId_3:
					TIM2->CCMR2 |=13<<11;
 8002d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d40:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8002d44:	61d3      	str	r3, [r2, #28]
					break;
 8002d46:	e0ec      	b.n	8002f22 <Pwm_Init+0x3ca>
				default:
					//Error
					break;
				}
			}
			else if(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmIdleState==PWM_HIGH)
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	3304      	adds	r3, #4
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 80e1 	bne.w	8002f22 <Pwm_Init+0x3ca>
			{
				//111: PWM mode_2 channel 1 is inactive as long as TIMx_CNT<TIMx_CCR1 else active
				switch(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmChannelId)
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	3301      	adds	r3, #1
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	f200 80d0 	bhi.w	8002f18 <Pwm_Init+0x3c0>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <Pwm_Init+0x228>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002d91 	.word	0x08002d91
 8002d84:	08002da3 	.word	0x08002da3
 8002d88:	08002db5 	.word	0x08002db5
 8002d8c:	08002dc7 	.word	0x08002dc7
				{
				case PwmChannelId_0:
					TIM2->CCMR1 |=15<<3;
 8002d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d9a:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 8002d9e:	6193      	str	r3, [r2, #24]
					break;
 8002da0:	e0bf      	b.n	8002f22 <Pwm_Init+0x3ca>
				case PwmChannelId_1:
					TIM2->CCMR1 |=15<<11;
 8002da2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dac:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8002db0:	6193      	str	r3, [r2, #24]
					break;
 8002db2:	e0b6      	b.n	8002f22 <Pwm_Init+0x3ca>
				case PwmChannelId_2:
					TIM2->CCMR2 |=15<<3;
 8002db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dbe:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 8002dc2:	61d3      	str	r3, [r2, #28]
					break;
 8002dc4:	e0ad      	b.n	8002f22 <Pwm_Init+0x3ca>
				case PwmChannelId_3:
					TIM2->CCMR2 |=15<<11;
 8002dc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dd0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8002dd4:	61d3      	str	r3, [r2, #28]
					break;
 8002dd6:	e0a4      	b.n	8002f22 <Pwm_Init+0x3ca>
			else
			{
				//Error
			}
		}
		else if(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmPolarity==PWM_LOW)
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3310      	adds	r3, #16
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	f040 8099 	bne.w	8002f22 <Pwm_Init+0x3ca>
		{
			//111: PWM mode_2 channel 1 is inactive as long as TIMx_CNT<TIMx_CCR1 else active
			if(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmIdleState==PWM_HIGH)
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3304      	adds	r3, #4
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d140      	bne.n	8002e88 <Pwm_Init+0x330>
			{
				//110: PWM mode_1 channel x is active as long as TIMx_CNT<TIMx_CCR1 else inactive
				switch(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmChannelId)
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	3301      	adds	r3, #1
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d87f      	bhi.n	8002f1c <Pwm_Init+0x3c4>
 8002e1c:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <Pwm_Init+0x2cc>)
 8002e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e22:	bf00      	nop
 8002e24:	08002e35 	.word	0x08002e35
 8002e28:	08002e47 	.word	0x08002e47
 8002e2c:	08002e65 	.word	0x08002e65
 8002e30:	08002e77 	.word	0x08002e77
				{
				case PwmChannelId_0:
					TIM2->CCMR1 |=13<<3;
 8002e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e3e:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8002e42:	6193      	str	r3, [r2, #24]
					break;
 8002e44:	e06d      	b.n	8002f22 <Pwm_Init+0x3ca>
				case PwmChannelId_1:
					TIM2->CCMR1 |=13<<11;
 8002e46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e50:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8002e54:	6193      	str	r3, [r2, #24]
					break;
 8002e56:	e064      	b.n	8002f22 <Pwm_Init+0x3ca>
 8002e58:	20000454 	.word	0x20000454
 8002e5c:	2000010c 	.word	0x2000010c
 8002e60:	2000010d 	.word	0x2000010d
				case PwmChannelId_2:
					TIM2->CCMR2 |=13<<3;
 8002e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e6e:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8002e72:	61d3      	str	r3, [r2, #28]
					break;
 8002e74:	e055      	b.n	8002f22 <Pwm_Init+0x3ca>
				case PwmChannelId_3:
					TIM2->CCMR2 |=13<<11;
 8002e76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e80:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8002e84:	61d3      	str	r3, [r2, #28]
					break;
 8002e86:	e04c      	b.n	8002f22 <Pwm_Init+0x3ca>
				default:
					//Error
					break;
				}
			}
			else if(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmIdleState==PWM_LOW)
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	3304      	adds	r3, #4
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d141      	bne.n	8002f22 <Pwm_Init+0x3ca>
			{
				//111: PWM mode_2 channel 1 is inactive as long as TIMx_CNT<TIMx_CCR1 else active
				switch(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmChannelId)
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3301      	adds	r3, #1
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d835      	bhi.n	8002f20 <Pwm_Init+0x3c8>
 8002eb4:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <Pwm_Init+0x364>)
 8002eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eba:	bf00      	nop
 8002ebc:	08002ecd 	.word	0x08002ecd
 8002ec0:	08002edf 	.word	0x08002edf
 8002ec4:	08002ef1 	.word	0x08002ef1
 8002ec8:	08002f03 	.word	0x08002f03
				{
				case PwmChannelId_0:
					TIM2->CCMR1 |=15<<3;
 8002ecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ed6:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 8002eda:	6193      	str	r3, [r2, #24]
					break;
 8002edc:	e021      	b.n	8002f22 <Pwm_Init+0x3ca>
				case PwmChannelId_1:
					TIM2->CCMR1 |=15<<11;
 8002ede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ee8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8002eec:	6193      	str	r3, [r2, #24]
					break;
 8002eee:	e018      	b.n	8002f22 <Pwm_Init+0x3ca>
				case PwmChannelId_2:
					TIM2->CCMR2 |=15<<3;
 8002ef0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002efa:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 8002efe:	61d3      	str	r3, [r2, #28]
					break;
 8002f00:	e00f      	b.n	8002f22 <Pwm_Init+0x3ca>
				case PwmChannelId_3:
					TIM2->CCMR2 |=15<<11;
 8002f02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f0c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8002f10:	61d3      	str	r3, [r2, #28]
					break;
 8002f12:	e006      	b.n	8002f22 <Pwm_Init+0x3ca>
					break;
 8002f14:	bf00      	nop
 8002f16:	e004      	b.n	8002f22 <Pwm_Init+0x3ca>
					break;
 8002f18:	bf00      	nop
 8002f1a:	e002      	b.n	8002f22 <Pwm_Init+0x3ca>
					break;
 8002f1c:	bf00      	nop
 8002f1e:	e000      	b.n	8002f22 <Pwm_Init+0x3ca>
				default:
					//Error
					break;
 8002f20:	bf00      	nop
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	3301      	adds	r3, #1
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	f77f aeb9 	ble.w	8002ca2 <Pwm_Init+0x14a>
		{
			//Error
		}
	}
	// set Prescalers (frequency is 1MH)
	TIM2->PSC =7;
 8002f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f34:	2207      	movs	r2, #7
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
	//Value of period used for Initialization(in seconds)
	Max_Counter=1000000*ConfigPtr->Config_Pwm.Channel_Config[PwmChannelId_0].PwmPeriodDefault;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4942      	ldr	r1, [pc, #264]	; (8003048 <Pwm_Init+0x4f0>)
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fd fd04 	bl	800094c <__aeabi_fmul>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd fe50 	bl	8000bec <__aeabi_f2uiz>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	60fb      	str	r3, [r7, #12]
	TIM2->ARR=Max_Counter;
 8002f50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	62d3      	str	r3, [r2, #44]	; 0x2c
	//Value of duty cycle used for Initialization 0 represents 0% 0x8000 represents 100%
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	e04c      	b.n	8002ff8 <Pwm_Init+0x4a0>
	{
		Duty_cycle=(ConfigPtr->Config_Pwm.Channel_Config[PwmChannelId_0].PwmDutycycleDefault/32768.0)*Max_Counter;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	885b      	ldrh	r3, [r3, #2]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd fa56 	bl	8000414 <__aeabi_i2d>
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	4b37      	ldr	r3, [pc, #220]	; (800304c <Pwm_Init+0x4f4>)
 8002f6e:	f7fd fbe5 	bl	800073c <__aeabi_ddiv>
 8002f72:	4603      	mov	r3, r0
 8002f74:	460c      	mov	r4, r1
 8002f76:	4625      	mov	r5, r4
 8002f78:	461c      	mov	r4, r3
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7fd fa3a 	bl	80003f4 <__aeabi_ui2d>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4620      	mov	r0, r4
 8002f86:	4629      	mov	r1, r5
 8002f88:	f7fd faae 	bl	80004e8 <__aeabi_dmul>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	460c      	mov	r4, r1
 8002f90:	4618      	mov	r0, r3
 8002f92:	4621      	mov	r1, r4
 8002f94:	f7fd fcba 	bl	800090c <__aeabi_d2uiz>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	60bb      	str	r3, [r7, #8]
		switch(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmChannelId)
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	3301      	adds	r3, #1
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d81e      	bhi.n	8002ff0 <Pwm_Init+0x498>
 8002fb2:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <Pwm_Init+0x460>)
 8002fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb8:	08002fc9 	.word	0x08002fc9
 8002fbc:	08002fd3 	.word	0x08002fd3
 8002fc0:	08002fdd 	.word	0x08002fdd
 8002fc4:	08002fe7 	.word	0x08002fe7
		{
		case PwmChannelId_0:
			TIM2->CCR1=Duty_cycle;
 8002fc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8002fd0:	e00f      	b.n	8002ff2 <Pwm_Init+0x49a>
		case PwmChannelId_1:
			TIM2->CCR2=Duty_cycle;
 8002fd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8002fda:	e00a      	b.n	8002ff2 <Pwm_Init+0x49a>
		case PwmChannelId_2:
			TIM2->CCR3=Duty_cycle;
 8002fdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8002fe4:	e005      	b.n	8002ff2 <Pwm_Init+0x49a>
		case PwmChannelId_3:
			TIM2->CCR4=Duty_cycle;
 8002fe6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8002fee:	e000      	b.n	8002ff2 <Pwm_Init+0x49a>
		default:
			//Error
			break;
 8002ff0:	bf00      	nop
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	ddaf      	ble.n	8002f5e <Pwm_Init+0x406>
		}
	}
	//Compare x output enable
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	e00f      	b.n	8003024 <Pwm_Init+0x4cc>
	{
		TIM2->CCER|=1<<(ch_index*4);
 8003004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	0092      	lsls	r2, r2, #2
 800300e:	2101      	movs	r1, #1
 8003010:	fa01 f202 	lsl.w	r2, r1, r2
 8003014:	4611      	mov	r1, r2
 8003016:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800301a:	430b      	orrs	r3, r1
 800301c:	6213      	str	r3, [r2, #32]
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	3301      	adds	r3, #1
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	2b03      	cmp	r3, #3
 8003028:	ddec      	ble.n	8003004 <Pwm_Init+0x4ac>
	}
	// Counter enable
	TIM2->CR1|=1<<0;
 800302a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6013      	str	r3, [r2, #0]
	PWM_State=PWM_INITIALIZED;
 800303a:	4b05      	ldr	r3, [pc, #20]	; (8003050 <Pwm_Init+0x4f8>)
 800303c:	2201      	movs	r2, #1
 800303e:	701a      	strb	r2, [r3, #0]
}
 8003040:	bf00      	nop
 8003042:	3728      	adds	r7, #40	; 0x28
 8003044:	46bd      	mov	sp, r7
 8003046:	bdb0      	pop	{r4, r5, r7, pc}
 8003048:	49742400 	.word	0x49742400
 800304c:	40e00000 	.word	0x40e00000
 8003050:	2000010c 	.word	0x2000010c

08003054 <Pwm_SetDutyCycle>:
 * Parameters (out)  	: None
 * Return value     	: None
 * Description       	: Service sets the duty cycle of the PWM channel.
 ********************************************************************************/
void Pwm_SetDutyCycle (Pwm_ChannelType ChannelNumber,uint16 DutyCycle)
{
 8003054:	b5b0      	push	{r4, r5, r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	460a      	mov	r2, r1
 800305e:	71fb      	strb	r3, [r7, #7]
 8003060:	4613      	mov	r3, r2
 8003062:	80bb      	strh	r3, [r7, #4]
	uint16 Duty_cycle=0;
 8003064:	2300      	movs	r3, #0
 8003066:	81fb      	strh	r3, [r7, #14]
#if(PwmDevErrorDetect==TRUE)
	if(ChannelNumber<PwmChannelId_0||ChannelNumber>PwmChannelId_3)
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d905      	bls.n	800307a <Pwm_SetDutyCycle+0x26>
	{
		Det_ReportError(PWM_VERSION_ID,PwmIndex_Zero, PWM_SETDUTYCYCLE_ID, PWM_E_PARAM_CHANNEL);
 800306e:	2312      	movs	r3, #18
 8003070:	2202      	movs	r2, #2
 8003072:	2100      	movs	r1, #0
 8003074:	2025      	movs	r0, #37	; 0x25
 8003076:	f7fe fc85 	bl	8001984 <Det_ReportError>
	 duty cycle.
	 Thus for 0% requested Duty Cycle the output will be the inverse of the configured
	 polarity parameter, and for 100% Duty Cycle the output will be equal to the
	 configured polarity parameter.
	 */
	Duty_cycle=(DutyCycle/32768.0)*TIM2->ARR;
 800307a:	88bb      	ldrh	r3, [r7, #4]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd f9c9 	bl	8000414 <__aeabi_i2d>
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	4b31      	ldr	r3, [pc, #196]	; (800314c <Pwm_SetDutyCycle+0xf8>)
 8003088:	f7fd fb58 	bl	800073c <__aeabi_ddiv>
 800308c:	4603      	mov	r3, r0
 800308e:	460c      	mov	r4, r1
 8003090:	4625      	mov	r5, r4
 8003092:	461c      	mov	r4, r3
 8003094:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd f9aa 	bl	80003f4 <__aeabi_ui2d>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4620      	mov	r0, r4
 80030a6:	4629      	mov	r1, r5
 80030a8:	f7fd fa1e 	bl	80004e8 <__aeabi_dmul>
 80030ac:	4603      	mov	r3, r0
 80030ae:	460c      	mov	r4, r1
 80030b0:	4618      	mov	r0, r3
 80030b2:	4621      	mov	r1, r4
 80030b4:	f7fd fc2a 	bl	800090c <__aeabi_d2uiz>
 80030b8:	4603      	mov	r3, r0
 80030ba:	81fb      	strh	r3, [r7, #14]
	//Value of duty cycle used for Initialization 0 represents 0% 0x8000 represents 100%
	switch(ChannelNumber)
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d81e      	bhi.n	8003100 <Pwm_SetDutyCycle+0xac>
 80030c2:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <Pwm_SetDutyCycle+0x74>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	080030d9 	.word	0x080030d9
 80030cc:	080030e3 	.word	0x080030e3
 80030d0:	080030ed 	.word	0x080030ed
 80030d4:	080030f7 	.word	0x080030f7
	{
	case PwmChannelId_0:
		TIM2->CCR1=Duty_cycle;
 80030d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030dc:	89fb      	ldrh	r3, [r7, #14]
 80030de:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 80030e0:	e00f      	b.n	8003102 <Pwm_SetDutyCycle+0xae>
	case PwmChannelId_1:
		TIM2->CCR2=Duty_cycle;
 80030e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030e6:	89fb      	ldrh	r3, [r7, #14]
 80030e8:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80030ea:	e00a      	b.n	8003102 <Pwm_SetDutyCycle+0xae>
	case PwmChannelId_2:
		TIM2->CCR3=Duty_cycle;
 80030ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030f0:	89fb      	ldrh	r3, [r7, #14]
 80030f2:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80030f4:	e005      	b.n	8003102 <Pwm_SetDutyCycle+0xae>
	case PwmChannelId_3:
		TIM2->CCR4=Duty_cycle;
 80030f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030fa:	89fb      	ldrh	r3, [r7, #14]
 80030fc:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80030fe:	e000      	b.n	8003102 <Pwm_SetDutyCycle+0xae>
	default:
		//Error
		break;
 8003100:	bf00      	nop
	/*
	 [SWS_Pwm_20086] After the call of the function Pwm_SetOutputToIdle, channels
	 shall be reactivated using the Api Pwm_SetDutyCycle( ) to activate the PWM channel
	 with the old period.
	 */
	if((TIM2->CCER&(1<<ChannelNumber*4))==0)
 8003102:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	79fa      	ldrb	r2, [r7, #7]
 800310a:	0092      	lsls	r2, r2, #2
 800310c:	2101      	movs	r1, #1
 800310e:	fa01 f202 	lsl.w	r2, r1, r2
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10c      	bne.n	8003132 <Pwm_SetDutyCycle+0xde>
	{
		TIM2->CCER|=1<<(ChannelNumber*4);
 8003118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	79fa      	ldrb	r2, [r7, #7]
 8003120:	0092      	lsls	r2, r2, #2
 8003122:	2101      	movs	r1, #1
 8003124:	fa01 f202 	lsl.w	r2, r1, r2
 8003128:	4611      	mov	r1, r2
 800312a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800312e:	430b      	orrs	r3, r1
 8003130:	6213      	str	r3, [r2, #32]
	else
	{
		//
	}
	//to update
	TIM2->EGR |=1<<0;
 8003132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6153      	str	r3, [r2, #20]
}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bdb0      	pop	{r4, r5, r7, pc}
 800314a:	bf00      	nop
 800314c:	40e00000 	.word	0x40e00000

08003150 <Task1_Entry>:
DeclareTask(Task3);
DeclareTask(Task4);
DeclareTask(CAT2_CAN_Task);

TASK(Task1)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
	while(1)
	{
		WaitEvent(0xff);
 8003154:	20ff      	movs	r0, #255	; 0xff
 8003156:	f7fe fe57 	bl	8001e08 <WaitEvent>
		Main_SWC();
 800315a:	f000 fb55 	bl	8003808 <Main_SWC>
		ClearEvent(0xff);
 800315e:	20ff      	movs	r0, #255	; 0xff
 8003160:	f7fe fe06 	bl	8001d70 <ClearEvent>
		WaitEvent(0xff);
 8003164:	e7f6      	b.n	8003154 <Task1_Entry+0x4>

08003166 <Task3_Entry>:
	}
}

TASK(Task3)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	af00      	add	r7, sp, #0
	while(1)
	{
		WaitEvent(0X0F);
 800316a:	200f      	movs	r0, #15
 800316c:	f7fe fe4c 	bl	8001e08 <WaitEvent>
		LED_SWC();
 8003170:	f000 fb2e 	bl	80037d0 <LED_SWC>
		ClearEvent(0X0F);
 8003174:	200f      	movs	r0, #15
 8003176:	f7fe fdfb 	bl	8001d70 <ClearEvent>
		WaitEvent(0X0F);
 800317a:	e7f6      	b.n	800316a <Task3_Entry+0x4>

0800317c <Task4_Entry>:
	}
}

TASK(Task4)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
	while(1)
	{
		WaitEvent(0X1F);
 8003180:	201f      	movs	r0, #31
 8003182:	f7fe fe41 	bl	8001e08 <WaitEvent>
		Motor_SWC();
 8003186:	f000 fb7d 	bl	8003884 <Motor_SWC>
		ClearEvent(0X1F);
 800318a:	201f      	movs	r0, #31
 800318c:	f7fe fdf0 	bl	8001d70 <ClearEvent>
		WaitEvent(0X1F);
 8003190:	e7f6      	b.n	8003180 <Task4_Entry+0x4>
	...

08003194 <Task2_Entry>:
	}
}

TASK(Task2)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
	int x=0;
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
	while (1)
	{
		//delay_ms(500);
		x++;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3301      	adds	r3, #1
 80031a2:	607b      	str	r3, [r7, #4]
		if(x==10)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b0a      	cmp	r3, #10
 80031a8:	d1f9      	bne.n	800319e <Task2_Entry+0xa>
		{
			x=0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	607b      	str	r3, [r7, #4]
			Can_Write(Hth,&PduInfo);
 80031ae:	4b03      	ldr	r3, [pc, #12]	; (80031bc <Task2_Entry+0x28>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	4903      	ldr	r1, [pc, #12]	; (80031c0 <Task2_Entry+0x2c>)
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd ffc1 	bl	800113c <Can_Write>
		x++;
 80031ba:	e7f0      	b.n	800319e <Task2_Entry+0xa>
 80031bc:	20000130 	.word	0x20000130
 80031c0:	20000628 	.word	0x20000628

080031c4 <ECUM_Init>:
		}
	}
}

void ECUM_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
	 HW_init();
 80031c8:	f7fe fd3f 	bl	8001c4a <HW_init>
	if (MYRTOS_Init() != NO_ERROR)
 80031cc:	f7ff f860 	bl	8002290 <MYRTOS_Init>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d000      	beq.n	80031d8 <ECUM_Init+0x14>
		while (1);
 80031d6:	e7fe      	b.n	80031d6 <ECUM_Init+0x12>
	DefineTask(Task1,512,Task_Suspend,6,FULL_PREEMPTIVE,Extended_Task);
 80031d8:	4b47      	ldr	r3, [pc, #284]	; (80032f8 <ECUM_Init+0x134>)
 80031da:	4a48      	ldr	r2, [pc, #288]	; (80032fc <ECUM_Init+0x138>)
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	4b46      	ldr	r3, [pc, #280]	; (80032f8 <ECUM_Init+0x134>)
 80031e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	4b44      	ldr	r3, [pc, #272]	; (80032f8 <ECUM_Init+0x134>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80031ee:	4b44      	ldr	r3, [pc, #272]	; (8003300 <ECUM_Init+0x13c>)
 80031f0:	4a44      	ldr	r2, [pc, #272]	; (8003304 <ECUM_Init+0x140>)
 80031f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031f6:	6018      	str	r0, [r3, #0]
 80031f8:	3304      	adds	r3, #4
 80031fa:	8019      	strh	r1, [r3, #0]
 80031fc:	4b3e      	ldr	r3, [pc, #248]	; (80032f8 <ECUM_Init+0x134>)
 80031fe:	2206      	movs	r2, #6
 8003200:	711a      	strb	r2, [r3, #4]
 8003202:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <ECUM_Init+0x134>)
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800320a:	483b      	ldr	r0, [pc, #236]	; (80032f8 <ECUM_Init+0x134>)
 800320c:	f7ff f8bc 	bl	8002388 <MYRTOS_CreateTask>
 8003210:	4b39      	ldr	r3, [pc, #228]	; (80032f8 <ECUM_Init+0x134>)
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	DefineTask(Task2,512,Task_Suspend,4,FULL_PREEMPTIVE,Extended_Task);
 8003218:	4b3b      	ldr	r3, [pc, #236]	; (8003308 <ECUM_Init+0x144>)
 800321a:	4a3c      	ldr	r2, [pc, #240]	; (800330c <ECUM_Init+0x148>)
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	4b3a      	ldr	r3, [pc, #232]	; (8003308 <ECUM_Init+0x144>)
 8003220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	4b38      	ldr	r3, [pc, #224]	; (8003308 <ECUM_Init+0x144>)
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800322e:	4b38      	ldr	r3, [pc, #224]	; (8003310 <ECUM_Init+0x14c>)
 8003230:	4a38      	ldr	r2, [pc, #224]	; (8003314 <ECUM_Init+0x150>)
 8003232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003236:	6018      	str	r0, [r3, #0]
 8003238:	3304      	adds	r3, #4
 800323a:	8019      	strh	r1, [r3, #0]
 800323c:	4b32      	ldr	r3, [pc, #200]	; (8003308 <ECUM_Init+0x144>)
 800323e:	2204      	movs	r2, #4
 8003240:	711a      	strb	r2, [r3, #4]
 8003242:	4b31      	ldr	r3, [pc, #196]	; (8003308 <ECUM_Init+0x144>)
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800324a:	482f      	ldr	r0, [pc, #188]	; (8003308 <ECUM_Init+0x144>)
 800324c:	f7ff f89c 	bl	8002388 <MYRTOS_CreateTask>
 8003250:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <ECUM_Init+0x144>)
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	DefineTask(Task3,512,Task_Suspend,5,FULL_PREEMPTIVE,Extended_Task);
 8003258:	4b2f      	ldr	r3, [pc, #188]	; (8003318 <ECUM_Init+0x154>)
 800325a:	4a30      	ldr	r2, [pc, #192]	; (800331c <ECUM_Init+0x158>)
 800325c:	609a      	str	r2, [r3, #8]
 800325e:	4b2e      	ldr	r3, [pc, #184]	; (8003318 <ECUM_Init+0x154>)
 8003260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <ECUM_Init+0x154>)
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800326e:	4b2c      	ldr	r3, [pc, #176]	; (8003320 <ECUM_Init+0x15c>)
 8003270:	4a2c      	ldr	r2, [pc, #176]	; (8003324 <ECUM_Init+0x160>)
 8003272:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003276:	6018      	str	r0, [r3, #0]
 8003278:	3304      	adds	r3, #4
 800327a:	8019      	strh	r1, [r3, #0]
 800327c:	4b26      	ldr	r3, [pc, #152]	; (8003318 <ECUM_Init+0x154>)
 800327e:	2205      	movs	r2, #5
 8003280:	711a      	strb	r2, [r3, #4]
 8003282:	4b25      	ldr	r3, [pc, #148]	; (8003318 <ECUM_Init+0x154>)
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800328a:	4823      	ldr	r0, [pc, #140]	; (8003318 <ECUM_Init+0x154>)
 800328c:	f7ff f87c 	bl	8002388 <MYRTOS_CreateTask>
 8003290:	4b21      	ldr	r3, [pc, #132]	; (8003318 <ECUM_Init+0x154>)
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	DefineTask(Task4,512,Task_Suspend,5,FULL_PREEMPTIVE,Extended_Task);
 8003298:	4b23      	ldr	r3, [pc, #140]	; (8003328 <ECUM_Init+0x164>)
 800329a:	4a24      	ldr	r2, [pc, #144]	; (800332c <ECUM_Init+0x168>)
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	4b22      	ldr	r3, [pc, #136]	; (8003328 <ECUM_Init+0x164>)
 80032a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <ECUM_Init+0x164>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80032ae:	4b20      	ldr	r3, [pc, #128]	; (8003330 <ECUM_Init+0x16c>)
 80032b0:	4a20      	ldr	r2, [pc, #128]	; (8003334 <ECUM_Init+0x170>)
 80032b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032b6:	6018      	str	r0, [r3, #0]
 80032b8:	3304      	adds	r3, #4
 80032ba:	8019      	strh	r1, [r3, #0]
 80032bc:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <ECUM_Init+0x164>)
 80032be:	2205      	movs	r2, #5
 80032c0:	711a      	strb	r2, [r3, #4]
 80032c2:	4b19      	ldr	r3, [pc, #100]	; (8003328 <ECUM_Init+0x164>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80032ca:	4817      	ldr	r0, [pc, #92]	; (8003328 <ECUM_Init+0x164>)
 80032cc:	f7ff f85c 	bl	8002388 <MYRTOS_CreateTask>
 80032d0:	4b15      	ldr	r3, [pc, #84]	; (8003328 <ECUM_Init+0x164>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	ActivateTask(&Task1);
 80032d8:	4807      	ldr	r0, [pc, #28]	; (80032f8 <ECUM_Init+0x134>)
 80032da:	f7ff f8dd 	bl	8002498 <ActivateTask>
	ActivateTask(&Task2);
 80032de:	480a      	ldr	r0, [pc, #40]	; (8003308 <ECUM_Init+0x144>)
 80032e0:	f7ff f8da 	bl	8002498 <ActivateTask>
	ActivateTask(&Task3);
 80032e4:	480c      	ldr	r0, [pc, #48]	; (8003318 <ECUM_Init+0x154>)
 80032e6:	f7ff f8d7 	bl	8002498 <ActivateTask>
	ActivateTask(&Task4);
 80032ea:	480f      	ldr	r0, [pc, #60]	; (8003328 <ECUM_Init+0x164>)
 80032ec:	f7ff f8d4 	bl	8002498 <ActivateTask>
	MYRTOS_STARTOS();
 80032f0:	f7ff f88e 	bl	8002410 <MYRTOS_STARTOS>
}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20000534 	.word	0x20000534
 80032fc:	08003151 	.word	0x08003151
 8003300:	2000054c 	.word	0x2000054c
 8003304:	08003a60 	.word	0x08003a60
 8003308:	200005c4 	.word	0x200005c4
 800330c:	08003195 	.word	0x08003195
 8003310:	200005dc 	.word	0x200005dc
 8003314:	08003a68 	.word	0x08003a68
 8003318:	2000057c 	.word	0x2000057c
 800331c:	08003167 	.word	0x08003167
 8003320:	20000594 	.word	0x20000594
 8003324:	08003a70 	.word	0x08003a70
 8003328:	200004ec 	.word	0x200004ec
 800332c:	0800317d 	.word	0x0800317d
 8003330:	20000504 	.word	0x20000504
 8003334:	08003a78 	.word	0x08003a78

08003338 <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_LED_Warning_LED_Warning>:




void Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_LED_Warning_LED_Warning (my_uint8 LED_Warning)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_BSW_SWC)->BSW_SWC_Runnable_PP_LED_Warning_LED_Warning->value = LED_Warning;
 8003342:	4b04      	ldr	r3, [pc, #16]	; (8003354 <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_LED_Warning_LED_Warning+0x1c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	79fa      	ldrb	r2, [r7, #7]
 8003348:	701a      	strb	r2, [r3, #0]
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	08003bc0 	.word	0x08003bc0

08003358 <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_Motor_Speed_Motor_Speed>:
my_uint8* Rte_IWriteRef_BSW_SWC_BSW_SWC_Runnable_PP_LED_Warning_LED_Warning(void)
{
	return &(Rte_Inst_BSW_SWC)->BSW_SWC_Runnable_PP_LED_Warning_LED_Warning->value;
}
void Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_Motor_Speed_Motor_Speed (my_uint8 Motor_Speed)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_BSW_SWC)->BSW_SWC_Runnable_PP_Motor_Speed_Motor_Speed->value = Motor_Speed;
 8003362:	4b04      	ldr	r3, [pc, #16]	; (8003374 <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_Motor_Speed_Motor_Speed+0x1c>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	79fa      	ldrb	r2, [r7, #7]
 8003368:	701a      	strb	r2, [r3, #0]
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	08003bc0 	.word	0x08003bc0

08003378 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning>:




void Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning (my_uint8 LED_Warning)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_DNPW_SWC)->DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning->value = LED_Warning;
 8003382:	4b04      	ldr	r3, [pc, #16]	; (8003394 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning+0x1c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	79fa      	ldrb	r2, [r7, #7]
 8003388:	701a      	strb	r2, [r3, #0]
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	08003bcc 	.word	0x08003bcc

08003398 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_Motor_Speed_Motor_Speed>:
my_uint8* Rte_IWriteRef_DNPW_SWC_DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning(void)
{
	return &(Rte_Inst_DNPW_SWC)->DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning->value;
}
void Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_Motor_Speed_Motor_Speed (my_uint8 Motor_Speed)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_DNPW_SWC)->DNPW_SWC_Runnable_PP_Motor_Speed_Motor_Speed->value = Motor_Speed;
 80033a2:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_Motor_Speed_Motor_Speed+0x1c>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	79fa      	ldrb	r2, [r7, #7]
 80033a8:	701a      	strb	r2, [r3, #0]
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr
 80033b4:	08003bcc 	.word	0x08003bcc

080033b8 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LCD_LCD_Warning>:
my_uint8* Rte_IWriteRef_DNPW_SWC_DNPW_SWC_Runnable_PP_Motor_Speed_Motor_Speed(void)
{
	return &(Rte_Inst_DNPW_SWC)->DNPW_SWC_Runnable_PP_Motor_Speed_Motor_Speed->value;
}
void Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LCD_LCD_Warning (my_uint8 LCD_Warning)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_DNPW_SWC)->DNPW_SWC_Runnable_PP_LCD_LCD_Warning->value = LCD_Warning;
 80033c2:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LCD_LCD_Warning+0x1c>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	79fa      	ldrb	r2, [r7, #7]
 80033c8:	701a      	strb	r2, [r3, #0]
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	08003bcc 	.word	0x08003bcc

080033d8 <Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_LED_Warning_LED_Warning>:




void Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_LED_Warning_LED_Warning (my_uint8 LED_Warning)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_EEBL_SWC)->EEBL_SWC_Runnable_PP_LED_Warning_LED_Warning->value = LED_Warning;
 80033e2:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_LED_Warning_LED_Warning+0x1c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	79fa      	ldrb	r2, [r7, #7]
 80033e8:	701a      	strb	r2, [r3, #0]
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr
 80033f4:	08003bd8 	.word	0x08003bd8

080033f8 <Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_Motor_Speed_Motor_Speed>:
my_uint8* Rte_IWriteRef_EEBL_SWC_EEBL_SWC_Runnable_PP_LED_Warning_LED_Warning(void)
{
	return &(Rte_Inst_EEBL_SWC)->EEBL_SWC_Runnable_PP_LED_Warning_LED_Warning->value;
}
void Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_Motor_Speed_Motor_Speed (my_uint8 Motor_Speed)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_EEBL_SWC)->EEBL_SWC_Runnable_PP_Motor_Speed_Motor_Speed->value = Motor_Speed;
 8003402:	4b04      	ldr	r3, [pc, #16]	; (8003414 <Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_Motor_Speed_Motor_Speed+0x1c>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	79fa      	ldrb	r2, [r7, #7]
 8003408:	701a      	strb	r2, [r3, #0]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	08003bd8 	.word	0x08003bd8

08003418 <Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_LCD_LCD_Warning>:
my_uint8* Rte_IWriteRef_EEBL_SWC_EEBL_SWC_Runnable_PP_Motor_Speed_Motor_Speed(void)
{
	return &(Rte_Inst_EEBL_SWC)->EEBL_SWC_Runnable_PP_Motor_Speed_Motor_Speed->value;
}
void Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_LCD_LCD_Warning (my_uint8 LCD_Warning)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_EEBL_SWC)->EEBL_SWC_Runnable_PP_LCD_LCD_Warning->value = LCD_Warning;
 8003422:	4b04      	ldr	r3, [pc, #16]	; (8003434 <Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_LCD_LCD_Warning+0x1c>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	79fa      	ldrb	r2, [r7, #7]
 8003428:	701a      	strb	r2, [r3, #0]
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	08003bd8 	.word	0x08003bd8

08003438 <Rte_IWrite_Empty_For_Test_Empty_For_Test_Runnable_PP_CAN_Frame_CAN_Frame>:




void Rte_IWrite_Empty_For_Test_Empty_For_Test_Runnable_PP_CAN_Frame_CAN_Frame (const my_uint8* CAN_Frame)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	memcpy((Rte_Inst_Empty_For_Test)->Empty_For_Test_Runnable_PP_CAN_Frame_CAN_Frame->value, CAN_Frame, sizeof(my_uint8)*8);
 8003440:	4b07      	ldr	r3, [pc, #28]	; (8003460 <Rte_IWrite_Empty_For_Test_Empty_For_Test_Runnable_PP_CAN_Frame_CAN_Frame+0x28>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2208      	movs	r2, #8
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4618      	mov	r0, r3
 800344a:	f000 faeb 	bl	8003a24 <memcpy>
	SetEvent(&Task1, 0xff);
 800344e:	21ff      	movs	r1, #255	; 0xff
 8003450:	4804      	ldr	r0, [pc, #16]	; (8003464 <Rte_IWrite_Empty_For_Test_Empty_For_Test_Runnable_PP_CAN_Frame_CAN_Frame+0x2c>)
 8003452:	f7fe fc31 	bl	8001cb8 <SetEvent>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	08003be4 	.word	0x08003be4
 8003464:	20000534 	.word	0x20000534

08003468 <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_LED_Warning_LED_Warning>:




void Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_LED_Warning_LED_Warning (my_uint8 LED_Warning)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_FCW_SWC)->FCW_SWC_Runnable_PP_LED_Warning_LED_Warning->value = LED_Warning;
 8003472:	4b04      	ldr	r3, [pc, #16]	; (8003484 <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_LED_Warning_LED_Warning+0x1c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	79fa      	ldrb	r2, [r7, #7]
 8003478:	701a      	strb	r2, [r3, #0]
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr
 8003484:	08003be8 	.word	0x08003be8

08003488 <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_Motor_Speed_Motor_Speed>:
my_uint8* Rte_IWriteRef_FCW_SWC_FCW_SWC_Runnable_PP_LED_Warning_LED_Warning(void)
{
	return &(Rte_Inst_FCW_SWC)->FCW_SWC_Runnable_PP_LED_Warning_LED_Warning->value;
}
void Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_Motor_Speed_Motor_Speed (my_uint8 Motor_Speed)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_FCW_SWC)->FCW_SWC_Runnable_PP_Motor_Speed_Motor_Speed->value = Motor_Speed;
 8003492:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_Motor_Speed_Motor_Speed+0x1c>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	79fa      	ldrb	r2, [r7, #7]
 8003498:	701a      	strb	r2, [r3, #0]
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	08003be8 	.word	0x08003be8

080034a8 <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_LCD_LCD_Warning>:
my_uint8* Rte_IWriteRef_FCW_SWC_FCW_SWC_Runnable_PP_Motor_Speed_Motor_Speed(void)
{
	return &(Rte_Inst_FCW_SWC)->FCW_SWC_Runnable_PP_Motor_Speed_Motor_Speed->value;
}
void Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_LCD_LCD_Warning (my_uint8 LCD_Warning)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_FCW_SWC)->FCW_SWC_Runnable_PP_LCD_LCD_Warning->value = LCD_Warning;
 80034b2:	4b04      	ldr	r3, [pc, #16]	; (80034c4 <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_LCD_LCD_Warning+0x1c>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	79fa      	ldrb	r2, [r7, #7]
 80034b8:	701a      	strb	r2, [r3, #0]
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr
 80034c4:	08003be8 	.word	0x08003be8

080034c8 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LED_Warning_LED_Warning>:




void Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LED_Warning_LED_Warning (my_uint8 LED_Warning)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_IMA_SWC)->IMA_SWC_Runnable_PP_LED_Warning_LED_Warning->value = LED_Warning;
 80034d2:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LED_Warning_LED_Warning+0x1c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	79fa      	ldrb	r2, [r7, #7]
 80034d8:	701a      	strb	r2, [r3, #0]
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	08003bf4 	.word	0x08003bf4

080034e8 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed>:
my_uint8* Rte_IWriteRef_IMA_SWC_IMA_SWC_Runnable_PP_LED_Warning_LED_Warning(void)
{
	return &(Rte_Inst_IMA_SWC)->IMA_SWC_Runnable_PP_LED_Warning_LED_Warning->value;
}
void Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed (my_uint8 Motor_Speed)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_IMA_SWC)->IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed->value = Motor_Speed;
 80034f2:	4b04      	ldr	r3, [pc, #16]	; (8003504 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed+0x1c>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	79fa      	ldrb	r2, [r7, #7]
 80034f8:	701a      	strb	r2, [r3, #0]
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr
 8003504:	08003bf4 	.word	0x08003bf4

08003508 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LCD_LCD_Warning>:
my_uint8* Rte_IWriteRef_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed(void)
{
	return &(Rte_Inst_IMA_SWC)->IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed->value;
}
void Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LCD_LCD_Warning (my_uint8 LCD_Warning)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_IMA_SWC)->IMA_SWC_Runnable_PP_LCD_LCD_Warning->value = LCD_Warning;
 8003512:	4b04      	ldr	r3, [pc, #16]	; (8003524 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LCD_LCD_Warning+0x1c>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	79fa      	ldrb	r2, [r7, #7]
 8003518:	701a      	strb	r2, [r3, #0]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	08003bf4 	.word	0x08003bf4

08003528 <Rte_IRead_LED_SWC_LED_SWC_Runnable_RP_LED_Warning_LED_Warning>:




my_uint8 Rte_IRead_LED_SWC_LED_SWC_Runnable_RP_LED_Warning_LED_Warning (void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
	return (Rte_Inst_LED_SWC)->LED_SWC_Runnable_RP_LED_Warning_LED_Warning->value;
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <Rte_IRead_LED_SWC_LED_SWC_Runnable_RP_LED_Warning_LED_Warning+0x14>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	781b      	ldrb	r3, [r3, #0]
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	08003c00 	.word	0x08003c00

08003540 <Rte_IRead_Main_SWC_Main_SWC_Runnable_RP_CAN_Frame_CAN_Frame>:
FunctionPtr_Main_SWC_RP_Call_DNPW_Call_Subsystem Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem_Delegate = 0;
FunctionPtr_Main_SWC_RP_Call_FCW_Call_Subsystem Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem_Delegate = 0;
FunctionPtr_Main_SWC_RP_Call_IMA_Call_Subsystem Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem_Delegate = 0;

const my_uint8* Rte_IRead_Main_SWC_Main_SWC_Runnable_RP_CAN_Frame_CAN_Frame (void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
	return (Rte_Inst_Main_SWC)->Main_SWC_Runnable_RP_CAN_Frame_CAN_Frame->value;
 8003544:	4b02      	ldr	r3, [pc, #8]	; (8003550 <Rte_IRead_Main_SWC_Main_SWC_Runnable_RP_CAN_Frame_CAN_Frame+0x10>)
 8003546:	681b      	ldr	r3, [r3, #0]
}
 8003548:	4618      	mov	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr
 8003550:	08003c04 	.word	0x08003c04

08003554 <Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem>:
Std_ReturnType Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem (const my_uint8* CAN_Frame)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
	Std_ReturnType __result = Main_SWC_RP_Call_BSW_Call_Subsystem_Buffer_retcode;
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem+0x38>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	73fb      	strb	r3, [r7, #15]
	if ( Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem_Delegate != 0 ) {
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem+0x3c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem+0x22>
		__result = Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem_Delegate(CAN_Frame);
 800356a:	4b09      	ldr	r3, [pc, #36]	; (8003590 <Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem+0x3c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	4798      	blx	r3
 8003572:	4603      	mov	r3, r0
 8003574:	73fb      	strb	r3, [r7, #15]
	}
	__result=BSW_SWC(CAN_Frame);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f898 	bl	80036ac <BSW_SWC>
 800357c:	4603      	mov	r3, r0
 800357e:	73fb      	strb	r3, [r7, #15]
	return __result;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	2000010e 	.word	0x2000010e
 8003590:	20000114 	.word	0x20000114

08003594 <Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem>:
Std_ReturnType Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem (const my_uint8* CAN_Frame)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	Std_ReturnType __result = Main_SWC_RP_Call_EEBL_Call_Subsystem_Buffer_retcode;
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem+0x38>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	73fb      	strb	r3, [r7, #15]
	if ( Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem_Delegate != 0 ) {
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem+0x3c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem+0x22>
		__result = Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem_Delegate(CAN_Frame);
 80035aa:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem+0x3c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
 80035b2:	4603      	mov	r3, r0
 80035b4:	73fb      	strb	r3, [r7, #15]
	}
	__result=EEBL_SWC(CAN_Frame);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f8c5 	bl	8003746 <EEBL_SWC>
 80035bc:	4603      	mov	r3, r0
 80035be:	73fb      	strb	r3, [r7, #15]
	return __result;
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	2000010f 	.word	0x2000010f
 80035d0:	20000118 	.word	0x20000118

080035d4 <Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem>:
Std_ReturnType Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem (const my_uint8* CAN_Frame)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	Std_ReturnType __result = Main_SWC_RP_Call_DNPW_Call_Subsystem_Buffer_retcode;
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem+0x38>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	73fb      	strb	r3, [r7, #15]
	if ( Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem_Delegate != 0 ) {
 80035e2:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem+0x3c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem+0x22>
		__result = Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem_Delegate(CAN_Frame);
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem+0x3c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	4798      	blx	r3
 80035f2:	4603      	mov	r3, r0
 80035f4:	73fb      	strb	r3, [r7, #15]
	}
	__result=DNPW_SWC(CAN_Frame);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f88e 	bl	8003718 <DNPW_SWC>
 80035fc:	4603      	mov	r3, r0
 80035fe:	73fb      	strb	r3, [r7, #15]
	return __result;
 8003600:	7bfb      	ldrb	r3, [r7, #15]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20000110 	.word	0x20000110
 8003610:	2000011c 	.word	0x2000011c

08003614 <Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem>:
Std_ReturnType Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem (const my_uint8* CAN_Frame)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	Std_ReturnType __result = Main_SWC_RP_Call_FCW_Call_Subsystem_Buffer_retcode;
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem+0x38>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	73fb      	strb	r3, [r7, #15]
	if ( Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem_Delegate != 0 ) {
 8003622:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem+0x3c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem+0x22>
		__result = Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem_Delegate(CAN_Frame);
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem+0x3c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	4798      	blx	r3
 8003632:	4603      	mov	r3, r0
 8003634:	73fb      	strb	r3, [r7, #15]
	}
	__result=FCW_SWC(CAN_Frame);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f89c 	bl	8003774 <FCW_SWC>
 800363c:	4603      	mov	r3, r0
 800363e:	73fb      	strb	r3, [r7, #15]
	return __result;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000111 	.word	0x20000111
 8003650:	20000120 	.word	0x20000120

08003654 <Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem>:
Std_ReturnType Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem (const my_uint8* CAN_Frame)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	Std_ReturnType __result = Main_SWC_RP_Call_IMA_Call_Subsystem_Buffer_retcode;
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem+0x38>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	73fb      	strb	r3, [r7, #15]
	if ( Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem_Delegate != 0 ) {
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem+0x3c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem+0x22>
		__result = Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem_Delegate(CAN_Frame);
 800366a:	4b09      	ldr	r3, [pc, #36]	; (8003690 <Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem+0x3c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
 8003672:	4603      	mov	r3, r0
 8003674:	73fb      	strb	r3, [r7, #15]
	}
	__result=IMA_SWC(CAN_Frame);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f893 	bl	80037a2 <IMA_SWC>
 800367c:	4603      	mov	r3, r0
 800367e:	73fb      	strb	r3, [r7, #15]
	return __result;
 8003680:	7bfb      	ldrb	r3, [r7, #15]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20000112 	.word	0x20000112
 8003690:	20000124 	.word	0x20000124

08003694 <Rte_IRead_Motor_SWC_Motor_SWC_Runnable_RP_Motor_Speed_Motor_Speed>:




my_uint8 Rte_IRead_Motor_SWC_Motor_SWC_Runnable_RP_Motor_Speed_Motor_Speed (void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
	return (Rte_Inst_Motor_SWC)->Motor_SWC_Runnable_RP_Motor_Speed_Motor_Speed->value;
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <Rte_IRead_Motor_SWC_Motor_SWC_Runnable_RP_Motor_Speed_Motor_Speed+0x14>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	781b      	ldrb	r3, [r3, #0]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	08003c08 	.word	0x08003c08

080036ac <BSW_SWC>:
uint8 FRAME[2]={0};
/*******************************************************
 **********************Runnable*************************
 *******************************************************/
Std_ReturnType BSW_SWC(const my_uint8* CAN_Frame)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
	Std_ReturnType Stutas=E_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	73fb      	strb	r3, [r7, #15]
	for(int i=0;i<2;i++)
 80036b8:	2300      	movs	r3, #0
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	e00b      	b.n	80036d6 <BSW_SWC+0x2a>
		FRAME[i]=CAN_Frame[i];
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	4413      	add	r3, r2
 80036c4:	7819      	ldrb	r1, [r3, #0]
 80036c6:	4a13      	ldr	r2, [pc, #76]	; (8003714 <BSW_SWC+0x68>)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4413      	add	r3, r2
 80036cc:	460a      	mov	r2, r1
 80036ce:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<2;i++)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	3301      	adds	r3, #1
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	ddf0      	ble.n	80036be <BSW_SWC+0x12>
	switch (FRAME[1])
 80036dc:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <BSW_SWC+0x68>)
 80036de:	785b      	ldrb	r3, [r3, #1]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <BSW_SWC+0x4a>
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d10d      	bne.n	8003704 <BSW_SWC+0x58>
	{
		case TRUE:
			Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_LED_Warning_LED_Warning(LED_BSW_ON);
 80036e8:	2001      	movs	r0, #1
 80036ea:	f7ff fe25 	bl	8003338 <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_LED_Warning_LED_Warning>
			Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_Motor_Speed_Motor_Speed(LOW_Speed);
 80036ee:	2002      	movs	r0, #2
 80036f0:	f7ff fe32 	bl	8003358 <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
			break;
 80036f4:	e009      	b.n	800370a <BSW_SWC+0x5e>
		case FALSE:
			Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_LED_Warning_LED_Warning(LED_BSW_OFF);
 80036f6:	2000      	movs	r0, #0
 80036f8:	f7ff fe1e 	bl	8003338 <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_LED_Warning_LED_Warning>
			Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_Motor_Speed_Motor_Speed(HIGH_Speed);
 80036fc:	2004      	movs	r0, #4
 80036fe:	f7ff fe2b 	bl	8003358 <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
			break;
 8003702:	e002      	b.n	800370a <BSW_SWC+0x5e>
		default:
			Stutas=E_NOT_OK;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
			break;
 8003708:	bf00      	nop
	}
	return Stutas;
 800370a:	7bfb      	ldrb	r3, [r7, #15]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000128 	.word	0x20000128

08003718 <DNPW_SWC>:
 */

#include "Rte_DNPW_SWC.h"

Std_ReturnType DNPW_SWC(const my_uint8* CAN_Frame)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	my_uint8 Motor_Speed;
	my_uint8 LED_Warning;
	my_uint8 LCD_Warning;
	Std_ReturnType Stutas=E_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	73fb      	strb	r3, [r7, #15]
	Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_Motor_Speed_Motor_Speed (Motor_Speed);
 8003724:	7bbb      	ldrb	r3, [r7, #14]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff fe36 	bl	8003398 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
	Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning(LED_Warning);
 800372c:	7b7b      	ldrb	r3, [r7, #13]
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff fe22 	bl	8003378 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning>
	Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LCD_LCD_Warning (LCD_Warning);
 8003734:	7b3b      	ldrb	r3, [r7, #12]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff fe3e 	bl	80033b8 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LCD_LCD_Warning>
	return Stutas;
 800373c:	7bfb      	ldrb	r3, [r7, #15]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <EEBL_SWC>:


#include "Rte_EEBL_SWC.h"

Std_ReturnType EEBL_SWC(const my_uint8* CAN_Frame)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
	Std_ReturnType Stutas=E_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
	my_uint8 Motor_Speed;
	my_uint8 LED_Warning;
	my_uint8 LCD_Warning;
	Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_LED_Warning_LED_Warning(LED_Warning);
 8003752:	7bbb      	ldrb	r3, [r7, #14]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fe3f 	bl	80033d8 <Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_LED_Warning_LED_Warning>
	Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_Motor_Speed_Motor_Speed(Motor_Speed);
 800375a:	7b7b      	ldrb	r3, [r7, #13]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fe4b 	bl	80033f8 <Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
	Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_LCD_LCD_Warning(LCD_Warning);
 8003762:	7b3b      	ldrb	r3, [r7, #12]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fe57 	bl	8003418 <Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_LCD_LCD_Warning>
	return Stutas;
 800376a:	7bfb      	ldrb	r3, [r7, #15]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <FCW_SWC>:
 *      Author: ELBOSTAN
 */
#include "Rte_FCW_SWC.h"

Std_ReturnType FCW_SWC(const my_uint8* CAN_Frame)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	Std_ReturnType Stutas=E_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	73fb      	strb	r3, [r7, #15]
	my_uint8 Motor_Speed;
	my_uint8 LED_Warning;
	my_uint8 LCD_Warning;
	Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_LED_Warning_LED_Warning(LED_Warning);
 8003780:	7bbb      	ldrb	r3, [r7, #14]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fe70 	bl	8003468 <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_LED_Warning_LED_Warning>
	Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_Motor_Speed_Motor_Speed(Motor_Speed);
 8003788:	7b7b      	ldrb	r3, [r7, #13]
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff fe7c 	bl	8003488 <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
	Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_LCD_LCD_Warning(LCD_Warning);
 8003790:	7b3b      	ldrb	r3, [r7, #12]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fe88 	bl	80034a8 <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_LCD_LCD_Warning>
	return Stutas;
 8003798:	7bfb      	ldrb	r3, [r7, #15]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <IMA_SWC>:
 */

#include "Rte_IMA_SWC.h"

Std_ReturnType IMA_SWC(const my_uint8* CAN_Frame)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
	my_uint8 Motor_Speed;
	my_uint8 LED_Warning;
	my_uint8 LCD_Warning;
	Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LED_Warning_LED_Warning(LED_Warning);
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fe8b 	bl	80034c8 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LED_Warning_LED_Warning>
	Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed(Motor_Speed);
 80037b2:	7bbb      	ldrb	r3, [r7, #14]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fe97 	bl	80034e8 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
	Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LCD_LCD_Warning(LCD_Warning);
 80037ba:	7b7b      	ldrb	r3, [r7, #13]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fea3 	bl	8003508 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LCD_LCD_Warning>
	Std_ReturnType Stutas=E_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	733b      	strb	r3, [r7, #12]
	return Stutas;
 80037c6:	7b3b      	ldrb	r3, [r7, #12]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <LED_SWC>:
#define LED_BSW_OFF (uint8)0
/*******************************************************
 **********************Runnable*************************
 *******************************************************/
void LED_SWC(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
	uint8 LED_Status;
	LED_Status=Rte_IRead_LED_SWC_LED_SWC_Runnable_RP_LED_Warning_LED_Warning();
 80037d6:	f7ff fea7 	bl	8003528 <Rte_IRead_LED_SWC_LED_SWC_Runnable_RP_LED_Warning_LED_Warning>
 80037da:	4603      	mov	r3, r0
 80037dc:	71fb      	strb	r3, [r7, #7]
	switch (LED_Status)
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d007      	beq.n	80037f4 <LED_SWC+0x24>
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d000      	beq.n	80037ea <LED_SWC+0x1a>
			break;
		case LED_BSW_OFF:
			Dio_WriteChannel(channel_45,STD_HIGH);
			break;
		default:
			break;
 80037e8:	e009      	b.n	80037fe <LED_SWC+0x2e>
			Dio_WriteChannel(channel_45,STD_LOW);
 80037ea:	2100      	movs	r1, #0
 80037ec:	202d      	movs	r0, #45	; 0x2d
 80037ee:	f7fe f8d9 	bl	80019a4 <Dio_WriteChannel>
			break;
 80037f2:	e004      	b.n	80037fe <LED_SWC+0x2e>
			Dio_WriteChannel(channel_45,STD_HIGH);
 80037f4:	2101      	movs	r1, #1
 80037f6:	202d      	movs	r0, #45	; 0x2d
 80037f8:	f7fe f8d4 	bl	80019a4 <Dio_WriteChannel>
			break;
 80037fc:	bf00      	nop
	}
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <Main_SWC>:
const uint8* Frame=NULL_PTR;
/*******************************************************
 **********************Runnable*************************
 *******************************************************/
void Main_SWC(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
	Frame=Rte_IRead_Main_SWC_Main_SWC_Runnable_RP_CAN_Frame_CAN_Frame();
 800380c:	f7ff fe98 	bl	8003540 <Rte_IRead_Main_SWC_Main_SWC_Runnable_RP_CAN_Frame_CAN_Frame>
 8003810:	4602      	mov	r2, r0
 8003812:	4b1b      	ldr	r3, [pc, #108]	; (8003880 <Main_SWC+0x78>)
 8003814:	601a      	str	r2, [r3, #0]
	switch(Frame[0])
 8003816:	4b1a      	ldr	r3, [pc, #104]	; (8003880 <Main_SWC+0x78>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	3b01      	subs	r3, #1
 800381e:	2b04      	cmp	r3, #4
 8003820:	d82a      	bhi.n	8003878 <Main_SWC+0x70>
 8003822:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <Main_SWC+0x20>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	0800383d 	.word	0x0800383d
 800382c:	08003849 	.word	0x08003849
 8003830:	08003855 	.word	0x08003855
 8003834:	08003861 	.word	0x08003861
 8003838:	0800386d 	.word	0x0800386d
	{
	case 1:
		Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem(Frame);
 800383c:	4b10      	ldr	r3, [pc, #64]	; (8003880 <Main_SWC+0x78>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fe87 	bl	8003554 <Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem>
		break;
 8003846:	e018      	b.n	800387a <Main_SWC+0x72>
	case 2:
		Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem(Frame);
 8003848:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <Main_SWC+0x78>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff fea1 	bl	8003594 <Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem>
		break;
 8003852:	e012      	b.n	800387a <Main_SWC+0x72>
	case 3:
		Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem(Frame);
 8003854:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <Main_SWC+0x78>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff febb 	bl	80035d4 <Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem>
		break;
 800385e:	e00c      	b.n	800387a <Main_SWC+0x72>
	case 4:
		Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem(Frame);
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <Main_SWC+0x78>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff fed5 	bl	8003614 <Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem>
		break;
 800386a:	e006      	b.n	800387a <Main_SWC+0x72>
	case 5:
		Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem(Frame);
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <Main_SWC+0x78>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff feef 	bl	8003654 <Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem>
		break;
 8003876:	e000      	b.n	800387a <Main_SWC+0x72>
	default:
		break;
 8003878:	bf00      	nop
	}
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	2000012c 	.word	0x2000012c

08003884 <Motor_SWC>:
#include "Pwm.h"
/*******************************************************
 **********************Runnable*************************
 *******************************************************/
void Motor_SWC(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
	uint8 Speed;
	uint16 Dutycycle;
	Speed=Rte_IRead_Motor_SWC_Motor_SWC_Runnable_RP_Motor_Speed_Motor_Speed();
 800388a:	f7ff ff03 	bl	8003694 <Rte_IRead_Motor_SWC_Motor_SWC_Runnable_RP_Motor_Speed_Motor_Speed>
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
	Dutycycle=Speed*6553;
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	b29b      	uxth	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	0052      	lsls	r2, r2, #1
 800389a:	441a      	add	r2, r3
 800389c:	0092      	lsls	r2, r2, #2
 800389e:	441a      	add	r2, r3
 80038a0:	4611      	mov	r1, r2
 80038a2:	0189      	lsls	r1, r1, #6
 80038a4:	1a8a      	subs	r2, r1, r2
 80038a6:	00d2      	lsls	r2, r2, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	80bb      	strh	r3, [r7, #4]
	Pwm_SetDutyCycle(PwmChannelId_0,Dutycycle);
 80038ac:	88bb      	ldrh	r3, [r7, #4]
 80038ae:	4619      	mov	r1, r3
 80038b0:	2000      	movs	r0, #0
 80038b2:	f7ff fbcf 	bl	8003054 <Pwm_SetDutyCycle>
	Pwm_SetDutyCycle(PwmChannelId_1,Dutycycle);
 80038b6:	88bb      	ldrh	r3, [r7, #4]
 80038b8:	4619      	mov	r1, r3
 80038ba:	2001      	movs	r0, #1
 80038bc:	f7ff fbca 	bl	8003054 <Pwm_SetDutyCycle>
	Pwm_SetDutyCycle(PwmChannelId_2,Dutycycle);
 80038c0:	88bb      	ldrh	r3, [r7, #4]
 80038c2:	4619      	mov	r1, r3
 80038c4:	2002      	movs	r0, #2
 80038c6:	f7ff fbc5 	bl	8003054 <Pwm_SetDutyCycle>
	Pwm_SetDutyCycle(PwmChannelId_3,Dutycycle);
 80038ca:	88bb      	ldrh	r3, [r7, #4]
 80038cc:	4619      	mov	r1, r3
 80038ce:	2003      	movs	r0, #3
 80038d0:	f7ff fbc0 	bl	8003054 <Pwm_SetDutyCycle>
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <main>:
}

void ECUM_Init(void);

int main(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_Enable();
 80038e2:	4b23      	ldr	r3, [pc, #140]	; (8003970 <main+0x94>)
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	4a22      	ldr	r2, [pc, #136]	; (8003970 <main+0x94>)
 80038e8:	f043 0304 	orr.w	r3, r3, #4
 80038ec:	6193      	str	r3, [r2, #24]
	RCC_TIM2_CLK_Enable();
 80038ee:	4b20      	ldr	r3, [pc, #128]	; (8003970 <main+0x94>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	4a1f      	ldr	r2, [pc, #124]	; (8003970 <main+0x94>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	61d3      	str	r3, [r2, #28]
	RCC_GPIOB_CLK_Enable();
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <main+0x94>)
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	4a1c      	ldr	r2, [pc, #112]	; (8003970 <main+0x94>)
 8003900:	f043 0308 	orr.w	r3, r3, #8
 8003904:	6193      	str	r3, [r2, #24]
	RCC_GPIOC_CLK_Enable();
 8003906:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <main+0x94>)
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	4a19      	ldr	r2, [pc, #100]	; (8003970 <main+0x94>)
 800390c:	f043 0310 	orr.w	r3, r3, #16
 8003910:	6193      	str	r3, [r2, #24]
	Port_Init(&Port);
 8003912:	4818      	ldr	r0, [pc, #96]	; (8003974 <main+0x98>)
 8003914:	f7fe fed8 	bl	80026c8 <Port_Init>
	Pwm_Init(&PWM_Config);
 8003918:	4817      	ldr	r0, [pc, #92]	; (8003978 <main+0x9c>)
 800391a:	f7ff f91d 	bl	8002b58 <Pwm_Init>
    Can_Init(&Can);
 800391e:	4817      	ldr	r0, [pc, #92]	; (800397c <main+0xa0>)
 8003920:	f7fd fa54 	bl	8000dcc <Can_Init>
    //Configuration Pdu
	PduInfo.id=0x000007ff;
 8003924:	4b16      	ldr	r3, [pc, #88]	; (8003980 <main+0xa4>)
 8003926:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800392a:	601a      	str	r2, [r3, #0]
	PduInfo.sdu=Data;
 800392c:	4b14      	ldr	r3, [pc, #80]	; (8003980 <main+0xa4>)
 800392e:	4a15      	ldr	r2, [pc, #84]	; (8003984 <main+0xa8>)
 8003930:	605a      	str	r2, [r3, #4]
	PduInfo.swPduHandle=5;
 8003932:	4b13      	ldr	r3, [pc, #76]	; (8003980 <main+0xa4>)
 8003934:	2205      	movs	r2, #5
 8003936:	721a      	strb	r2, [r3, #8]
	PduInfo.length=8;
 8003938:	4b11      	ldr	r3, [pc, #68]	; (8003980 <main+0xa4>)
 800393a:	2208      	movs	r2, #8
 800393c:	725a      	strb	r2, [r3, #9]
	//Configuration Filter Bank 0
	CAN_Filter_Config_t Filter_Config;
	Filter_Config.Filter_Bank=CAN_Filter_Bank_0;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
	Filter_Config.Filter_FIFO_Assignment=CAN_Filter_FIFO_Assignment_FIFO0;
 8003942:	2300      	movs	r3, #0
 8003944:	60bb      	str	r3, [r7, #8]
	Filter_Config.Filter_ID=0XFFFFFFFF;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
 800394a:	603b      	str	r3, [r7, #0]
	Filter_Config.Filter_Mask_ID=0X00000000;
 800394c:	2300      	movs	r3, #0
 800394e:	607b      	str	r3, [r7, #4]
	Filter_Config.Filter_Mode=CAN_Filter_Mode_Mask;
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
	Filter_Config.Filter_Scale=CAN_Filter_Scale_32;
 8003954:	2301      	movs	r3, #1
 8003956:	617b      	str	r3, [r7, #20]
	MCAL_CAN_Config_Filter(&Filter_Config);
 8003958:	463b      	mov	r3, r7
 800395a:	4618      	mov	r0, r3
 800395c:	f7fd fef6 	bl	800174c <MCAL_CAN_Config_Filter>
	Can_SetControllerMode(CONTROLLER_ZERO,CAN_CS_STARTED);
 8003960:	2101      	movs	r1, #1
 8003962:	2000      	movs	r0, #0
 8003964:	f7fd fb36 	bl	8000fd4 <Can_SetControllerMode>

	ECUM_Init();
 8003968:	f7ff fc2c 	bl	80031c4 <ECUM_Init>

	while(1)
 800396c:	e7fe      	b.n	800396c <main+0x90>
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000
 8003974:	08003a80 	.word	0x08003a80
 8003978:	2000007c 	.word	0x2000007c
 800397c:	20000000 	.word	0x20000000
 8003980:	20000628 	.word	0x20000628
 8003984:	200000cc 	.word	0x200000cc

08003988 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003988:	480d      	ldr	r0, [pc, #52]	; (80039c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800398a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800398c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003990:	480c      	ldr	r0, [pc, #48]	; (80039c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003992:	490d      	ldr	r1, [pc, #52]	; (80039c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003994:	4a0d      	ldr	r2, [pc, #52]	; (80039cc <LoopForever+0xe>)
  movs r3, #0
 8003996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003998:	e002      	b.n	80039a0 <LoopCopyDataInit>

0800399a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800399a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800399c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800399e:	3304      	adds	r3, #4

080039a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039a4:	d3f9      	bcc.n	800399a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039a6:	4a0a      	ldr	r2, [pc, #40]	; (80039d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80039a8:	4c0a      	ldr	r4, [pc, #40]	; (80039d4 <LoopForever+0x16>)
  movs r3, #0
 80039aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039ac:	e001      	b.n	80039b2 <LoopFillZerobss>

080039ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039b0:	3204      	adds	r2, #4

080039b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039b4:	d3fb      	bcc.n	80039ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80039b6:	f000 f811 	bl	80039dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039ba:	f7ff ff8f 	bl	80038dc <main>

080039be <LoopForever>:

LoopForever:
    b LoopForever
 80039be:	e7fe      	b.n	80039be <LoopForever>
  ldr   r0, =_estack
 80039c0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80039c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039c8:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80039cc:	08003c14 	.word	0x08003c14
  ldr r2, =_sbss
 80039d0:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80039d4:	20000634 	.word	0x20000634

080039d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039d8:	e7fe      	b.n	80039d8 <ADC1_2_IRQHandler>
	...

080039dc <__libc_init_array>:
 80039dc:	b570      	push	{r4, r5, r6, lr}
 80039de:	2500      	movs	r5, #0
 80039e0:	4e0c      	ldr	r6, [pc, #48]	; (8003a14 <__libc_init_array+0x38>)
 80039e2:	4c0d      	ldr	r4, [pc, #52]	; (8003a18 <__libc_init_array+0x3c>)
 80039e4:	1ba4      	subs	r4, r4, r6
 80039e6:	10a4      	asrs	r4, r4, #2
 80039e8:	42a5      	cmp	r5, r4
 80039ea:	d109      	bne.n	8003a00 <__libc_init_array+0x24>
 80039ec:	f000 f826 	bl	8003a3c <_init>
 80039f0:	2500      	movs	r5, #0
 80039f2:	4e0a      	ldr	r6, [pc, #40]	; (8003a1c <__libc_init_array+0x40>)
 80039f4:	4c0a      	ldr	r4, [pc, #40]	; (8003a20 <__libc_init_array+0x44>)
 80039f6:	1ba4      	subs	r4, r4, r6
 80039f8:	10a4      	asrs	r4, r4, #2
 80039fa:	42a5      	cmp	r5, r4
 80039fc:	d105      	bne.n	8003a0a <__libc_init_array+0x2e>
 80039fe:	bd70      	pop	{r4, r5, r6, pc}
 8003a00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a04:	4798      	blx	r3
 8003a06:	3501      	adds	r5, #1
 8003a08:	e7ee      	b.n	80039e8 <__libc_init_array+0xc>
 8003a0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a0e:	4798      	blx	r3
 8003a10:	3501      	adds	r5, #1
 8003a12:	e7f2      	b.n	80039fa <__libc_init_array+0x1e>
 8003a14:	08003c0c 	.word	0x08003c0c
 8003a18:	08003c0c 	.word	0x08003c0c
 8003a1c:	08003c0c 	.word	0x08003c0c
 8003a20:	08003c10 	.word	0x08003c10

08003a24 <memcpy>:
 8003a24:	b510      	push	{r4, lr}
 8003a26:	1e43      	subs	r3, r0, #1
 8003a28:	440a      	add	r2, r1
 8003a2a:	4291      	cmp	r1, r2
 8003a2c:	d100      	bne.n	8003a30 <memcpy+0xc>
 8003a2e:	bd10      	pop	{r4, pc}
 8003a30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a38:	e7f7      	b.n	8003a2a <memcpy+0x6>
	...

08003a3c <_init>:
 8003a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3e:	bf00      	nop
 8003a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a42:	bc08      	pop	{r3}
 8003a44:	469e      	mov	lr, r3
 8003a46:	4770      	bx	lr

08003a48 <_fini>:
 8003a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4a:	bf00      	nop
 8003a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4e:	bc08      	pop	{r3}
 8003a50:	469e      	mov	lr, r3
 8003a52:	4770      	bx	lr
