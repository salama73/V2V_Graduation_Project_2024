
Graduation_Project_V0.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08004824  08004824  00014824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049dc  080049dc  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  080049dc  080049dc  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049dc  080049dc  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049dc  080049dc  000149dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  080049e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  200000ec  08004ad0  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000878  08004ad0  00020878  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183d4  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048e4  00000000  00000000  000384e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a50  00000000  00000000  0003cdd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000740  00000000  00000000  0003d820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00008500  00000000  00000000  0003df60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ccdc  00000000  00000000  00046460  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00018290  00000000  00000000  0005313c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0006b3cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d84  00000000  00000000  0006b448  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000ec 	.word	0x200000ec
 800014c:	00000000 	.word	0x00000000
 8000150:	0800480c 	.word	0x0800480c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000f0 	.word	0x200000f0
 800016c:	0800480c 	.word	0x0800480c

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <__aeabi_fmul>:
 800094c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000950:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000954:	bf1e      	ittt	ne
 8000956:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800095a:	ea92 0f0c 	teqne	r2, ip
 800095e:	ea93 0f0c 	teqne	r3, ip
 8000962:	d06f      	beq.n	8000a44 <__aeabi_fmul+0xf8>
 8000964:	441a      	add	r2, r3
 8000966:	ea80 0c01 	eor.w	ip, r0, r1
 800096a:	0240      	lsls	r0, r0, #9
 800096c:	bf18      	it	ne
 800096e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000972:	d01e      	beq.n	80009b2 <__aeabi_fmul+0x66>
 8000974:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000978:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800097c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000980:	fba0 3101 	umull	r3, r1, r0, r1
 8000984:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000988:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800098c:	bf3e      	ittt	cc
 800098e:	0049      	lslcc	r1, r1, #1
 8000990:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000994:	005b      	lslcc	r3, r3, #1
 8000996:	ea40 0001 	orr.w	r0, r0, r1
 800099a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800099e:	2afd      	cmp	r2, #253	; 0xfd
 80009a0:	d81d      	bhi.n	80009de <__aeabi_fmul+0x92>
 80009a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009aa:	bf08      	it	eq
 80009ac:	f020 0001 	biceq.w	r0, r0, #1
 80009b0:	4770      	bx	lr
 80009b2:	f090 0f00 	teq	r0, #0
 80009b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009ba:	bf08      	it	eq
 80009bc:	0249      	lsleq	r1, r1, #9
 80009be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80009c6:	3a7f      	subs	r2, #127	; 0x7f
 80009c8:	bfc2      	ittt	gt
 80009ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009d2:	4770      	bxgt	lr
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	f04f 0300 	mov.w	r3, #0
 80009dc:	3a01      	subs	r2, #1
 80009de:	dc5d      	bgt.n	8000a9c <__aeabi_fmul+0x150>
 80009e0:	f112 0f19 	cmn.w	r2, #25
 80009e4:	bfdc      	itt	le
 80009e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80009ea:	4770      	bxle	lr
 80009ec:	f1c2 0200 	rsb	r2, r2, #0
 80009f0:	0041      	lsls	r1, r0, #1
 80009f2:	fa21 f102 	lsr.w	r1, r1, r2
 80009f6:	f1c2 0220 	rsb	r2, r2, #32
 80009fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80009fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a02:	f140 0000 	adc.w	r0, r0, #0
 8000a06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a0a:	bf08      	it	eq
 8000a0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a10:	4770      	bx	lr
 8000a12:	f092 0f00 	teq	r2, #0
 8000a16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a1a:	bf02      	ittt	eq
 8000a1c:	0040      	lsleq	r0, r0, #1
 8000a1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a22:	3a01      	subeq	r2, #1
 8000a24:	d0f9      	beq.n	8000a1a <__aeabi_fmul+0xce>
 8000a26:	ea40 000c 	orr.w	r0, r0, ip
 8000a2a:	f093 0f00 	teq	r3, #0
 8000a2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a32:	bf02      	ittt	eq
 8000a34:	0049      	lsleq	r1, r1, #1
 8000a36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a3a:	3b01      	subeq	r3, #1
 8000a3c:	d0f9      	beq.n	8000a32 <__aeabi_fmul+0xe6>
 8000a3e:	ea41 010c 	orr.w	r1, r1, ip
 8000a42:	e78f      	b.n	8000964 <__aeabi_fmul+0x18>
 8000a44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a48:	ea92 0f0c 	teq	r2, ip
 8000a4c:	bf18      	it	ne
 8000a4e:	ea93 0f0c 	teqne	r3, ip
 8000a52:	d00a      	beq.n	8000a6a <__aeabi_fmul+0x11e>
 8000a54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a58:	bf18      	it	ne
 8000a5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a5e:	d1d8      	bne.n	8000a12 <__aeabi_fmul+0xc6>
 8000a60:	ea80 0001 	eor.w	r0, r0, r1
 8000a64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a68:	4770      	bx	lr
 8000a6a:	f090 0f00 	teq	r0, #0
 8000a6e:	bf17      	itett	ne
 8000a70:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000a74:	4608      	moveq	r0, r1
 8000a76:	f091 0f00 	teqne	r1, #0
 8000a7a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000a7e:	d014      	beq.n	8000aaa <__aeabi_fmul+0x15e>
 8000a80:	ea92 0f0c 	teq	r2, ip
 8000a84:	d101      	bne.n	8000a8a <__aeabi_fmul+0x13e>
 8000a86:	0242      	lsls	r2, r0, #9
 8000a88:	d10f      	bne.n	8000aaa <__aeabi_fmul+0x15e>
 8000a8a:	ea93 0f0c 	teq	r3, ip
 8000a8e:	d103      	bne.n	8000a98 <__aeabi_fmul+0x14c>
 8000a90:	024b      	lsls	r3, r1, #9
 8000a92:	bf18      	it	ne
 8000a94:	4608      	movne	r0, r1
 8000a96:	d108      	bne.n	8000aaa <__aeabi_fmul+0x15e>
 8000a98:	ea80 0001 	eor.w	r0, r0, r1
 8000a9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_fdiv>:
 8000ab4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ab8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000abc:	bf1e      	ittt	ne
 8000abe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ac2:	ea92 0f0c 	teqne	r2, ip
 8000ac6:	ea93 0f0c 	teqne	r3, ip
 8000aca:	d069      	beq.n	8000ba0 <__aeabi_fdiv+0xec>
 8000acc:	eba2 0203 	sub.w	r2, r2, r3
 8000ad0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ad4:	0249      	lsls	r1, r1, #9
 8000ad6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ada:	d037      	beq.n	8000b4c <__aeabi_fdiv+0x98>
 8000adc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ae0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ae4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ae8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000aec:	428b      	cmp	r3, r1
 8000aee:	bf38      	it	cc
 8000af0:	005b      	lslcc	r3, r3, #1
 8000af2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000af6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000afa:	428b      	cmp	r3, r1
 8000afc:	bf24      	itt	cs
 8000afe:	1a5b      	subcs	r3, r3, r1
 8000b00:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b08:	bf24      	itt	cs
 8000b0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b16:	bf24      	itt	cs
 8000b18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b24:	bf24      	itt	cs
 8000b26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b2e:	011b      	lsls	r3, r3, #4
 8000b30:	bf18      	it	ne
 8000b32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b36:	d1e0      	bne.n	8000afa <__aeabi_fdiv+0x46>
 8000b38:	2afd      	cmp	r2, #253	; 0xfd
 8000b3a:	f63f af50 	bhi.w	80009de <__aeabi_fmul+0x92>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b54:	327f      	adds	r2, #127	; 0x7f
 8000b56:	bfc2      	ittt	gt
 8000b58:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b60:	4770      	bxgt	lr
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	f04f 0300 	mov.w	r3, #0
 8000b6a:	3a01      	subs	r2, #1
 8000b6c:	e737      	b.n	80009de <__aeabi_fmul+0x92>
 8000b6e:	f092 0f00 	teq	r2, #0
 8000b72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b76:	bf02      	ittt	eq
 8000b78:	0040      	lsleq	r0, r0, #1
 8000b7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b7e:	3a01      	subeq	r2, #1
 8000b80:	d0f9      	beq.n	8000b76 <__aeabi_fdiv+0xc2>
 8000b82:	ea40 000c 	orr.w	r0, r0, ip
 8000b86:	f093 0f00 	teq	r3, #0
 8000b8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b8e:	bf02      	ittt	eq
 8000b90:	0049      	lsleq	r1, r1, #1
 8000b92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b96:	3b01      	subeq	r3, #1
 8000b98:	d0f9      	beq.n	8000b8e <__aeabi_fdiv+0xda>
 8000b9a:	ea41 010c 	orr.w	r1, r1, ip
 8000b9e:	e795      	b.n	8000acc <__aeabi_fdiv+0x18>
 8000ba0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ba4:	ea92 0f0c 	teq	r2, ip
 8000ba8:	d108      	bne.n	8000bbc <__aeabi_fdiv+0x108>
 8000baa:	0242      	lsls	r2, r0, #9
 8000bac:	f47f af7d 	bne.w	8000aaa <__aeabi_fmul+0x15e>
 8000bb0:	ea93 0f0c 	teq	r3, ip
 8000bb4:	f47f af70 	bne.w	8000a98 <__aeabi_fmul+0x14c>
 8000bb8:	4608      	mov	r0, r1
 8000bba:	e776      	b.n	8000aaa <__aeabi_fmul+0x15e>
 8000bbc:	ea93 0f0c 	teq	r3, ip
 8000bc0:	d104      	bne.n	8000bcc <__aeabi_fdiv+0x118>
 8000bc2:	024b      	lsls	r3, r1, #9
 8000bc4:	f43f af4c 	beq.w	8000a60 <__aeabi_fmul+0x114>
 8000bc8:	4608      	mov	r0, r1
 8000bca:	e76e      	b.n	8000aaa <__aeabi_fmul+0x15e>
 8000bcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000bd0:	bf18      	it	ne
 8000bd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000bd6:	d1ca      	bne.n	8000b6e <__aeabi_fdiv+0xba>
 8000bd8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000bdc:	f47f af5c 	bne.w	8000a98 <__aeabi_fmul+0x14c>
 8000be0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000be4:	f47f af3c 	bne.w	8000a60 <__aeabi_fmul+0x114>
 8000be8:	e75f      	b.n	8000aaa <__aeabi_fmul+0x15e>
 8000bea:	bf00      	nop

08000bec <__aeabi_f2uiz>:
 8000bec:	0042      	lsls	r2, r0, #1
 8000bee:	d20e      	bcs.n	8000c0e <__aeabi_f2uiz+0x22>
 8000bf0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bf4:	d30b      	bcc.n	8000c0e <__aeabi_f2uiz+0x22>
 8000bf6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bfa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bfe:	d409      	bmi.n	8000c14 <__aeabi_f2uiz+0x28>
 8000c00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c08:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0c:	4770      	bx	lr
 8000c0e:	f04f 0000 	mov.w	r0, #0
 8000c12:	4770      	bx	lr
 8000c14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c18:	d101      	bne.n	8000c1e <__aeabi_f2uiz+0x32>
 8000c1a:	0242      	lsls	r2, r0, #9
 8000c1c:	d102      	bne.n	8000c24 <__aeabi_f2uiz+0x38>
 8000c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c22:	4770      	bx	lr
 8000c24:	f04f 0000 	mov.w	r0, #0
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <CanIf_RxIndication>:
PduInfoType RX_PduInfoPtr;
Can_IdType ID=0;
Can_HwHandleType HrH=0;

void CanIf_RxIndication (const Can_HwType* Mailbox,const PduInfoType* PduInfoPtr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	uint8 Data_RX[8]={0};
 8000c36:	f107 030c 	add.w	r3, r7, #12
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
	for(int i=0;i<8;i++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e00d      	b.n	8000c62 <CanIf_RxIndication+0x36>
	{
		Data_RX[i]=PduInfoPtr->SduDataPtr[i];
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	7819      	ldrb	r1, [r3, #0]
 8000c50:	f107 020c 	add.w	r2, r7, #12
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	4413      	add	r3, r2
 8000c58:	460a      	mov	r2, r1
 8000c5a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<8;i++)
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	2b07      	cmp	r3, #7
 8000c66:	ddee      	ble.n	8000c46 <CanIf_RxIndication+0x1a>
	}
	DLC_RX=PduInfoPtr->SduLength;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	791a      	ldrb	r2, [r3, #4]
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <CanIf_RxIndication+0x70>)
 8000c6e:	701a      	strb	r2, [r3, #0]
	ID=Mailbox->CanId;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <CanIf_RxIndication+0x74>)
 8000c76:	6013      	str	r3, [r2, #0]
	HrH=Mailbox->Hoh;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	791a      	ldrb	r2, [r3, #4]
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <CanIf_RxIndication+0x78>)
 8000c7e:	701a      	strb	r2, [r3, #0]
	RX_Mailbox.ControllerId=Mailbox->ControllerId;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	795a      	ldrb	r2, [r3, #5]
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <CanIf_RxIndication+0x7c>)
 8000c86:	715a      	strb	r2, [r3, #5]
	Rte_IWrite_Empty_For_Test_Empty_For_Test_Runnable_PP_CAN_Frame_CAN_Frame(Data_RX);
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f003 f899 	bl	8003dc4 <Rte_IWrite_Empty_For_Test_Empty_For_Test_Runnable_PP_CAN_Frame_CAN_Frame>
}
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000108 	.word	0x20000108
 8000ca0:	2000010c 	.word	0x2000010c
 8000ca4:	20000110 	.word	0x20000110
 8000ca8:	200001d8 	.word	0x200001d8

08000cac <CanIf_TxConfirmation>:

void CanIf_TxConfirmation(PduIdType CanTxPduId)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]

}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <CanIf_ControllerModeIndication>:

void CanIf_ControllerModeIndication(uint8 Controller, CanIf_ControllerModeType ControllerMode)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	460a      	mov	r2, r1
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	71bb      	strb	r3, [r7, #6]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
	...

08000cdc <Can_Init>:
 * Parameters (out)  	: None
 * Return value     	: None
 * Description       	: This function initializes the module.
 */
void Can_Init (const Can_ConfigType* Config)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	uint32 CAN_BTR_temp=0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
	uint32 Prescaler=0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
	uint32 BaudRate=0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
	uint32 Bits_Timing=0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
	#if(CanDevErrorDetect==STD_ON)
		if(NULL_PTR==Config)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d105      	bne.n	8000d06 <Can_Init+0x2a>
			Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_Init_ID,CAN_E_PARAM_POINTER);
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	200b      	movs	r0, #11
 8000d02:	f000 fc8b 	bl	800161c <Det_ReportError>
		/*
		 [SWS_Can_00174] [ If development error detection for the Can module is enabled:
		  The function Can_Init shall raise the error CAN_E_TRANSITION if the driver is not in
		  state CAN_UNINIT ]
		 */
		if(CanDriverState!=CAN_UNINIT)
 8000d06:	4b67      	ldr	r3, [pc, #412]	; (8000ea4 <Can_Init+0x1c8>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d005      	beq.n	8000d1a <Can_Init+0x3e>
			Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_Init_ID,CAN_E_TRANSITION);
 8000d0e:	2306      	movs	r3, #6
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	200b      	movs	r0, #11
 8000d16:	f000 fc81 	bl	800161c <Det_ReportError>
		/*
		 [SWS_Can_00408] [ If development error detection for the Can module is enabled:
		  The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
		  controllers are not in state UNINIT]
		*/
		if(Can_Controller_State!=CAN_CS_UNINIT)
 8000d1a:	4b63      	ldr	r3, [pc, #396]	; (8000ea8 <Can_Init+0x1cc>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d005      	beq.n	8000d2e <Can_Init+0x52>
			Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_Init_ID,CAN_E_TRANSITION);
 8000d22:	2306      	movs	r3, #6
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	200b      	movs	r0, #11
 8000d2a:	f000 fc77 	bl	800161c <Det_ReportError>
	#endif
	/*
	 The Can module configuration defines the global CAN HW Unit settings and
	 references to the default CAN controller configuration sets.
	 */
	CAN_HW_Unit_settings=*Config;
 8000d2e:	4a5f      	ldr	r2, [pc, #380]	; (8000eac <Can_Init+0x1d0>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4610      	mov	r0, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	237c      	movs	r3, #124	; 0x7c
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f003 fd5b 	bl	80047f4 <memcpy>
	//CAN controller is used in the configuration.
	if(TRUE==Config->CanConfigSet.CanController.CanControllerActivation)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	785b      	ldrb	r3, [r3, #1]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	f040 8095 	bne.w	8000e72 <Can_Init+0x196>
	{
		// Enable Can peripheral clock
		RCC_CAN_CLK_Enable();
 8000d48:	4b59      	ldr	r3, [pc, #356]	; (8000eb0 <Can_Init+0x1d4>)
 8000d4a:	69db      	ldr	r3, [r3, #28]
 8000d4c:	4a58      	ldr	r2, [pc, #352]	; (8000eb0 <Can_Init+0x1d4>)
 8000d4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d52:	61d3      	str	r3, [r2, #28]
		//Software sets this bit to request the CAN hardware to enter initialization mode.
		CAN_MCR &=~(1<<1);
 8000d54:	4b57      	ldr	r3, [pc, #348]	; (8000eb4 <Can_Init+0x1d8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a56      	ldr	r2, [pc, #344]	; (8000eb4 <Can_Init+0x1d8>)
 8000d5a:	f023 0302 	bic.w	r3, r3, #2
 8000d5e:	6013      	str	r3, [r2, #0]
		CAN_MCR |=(1<<0);
 8000d60:	4b54      	ldr	r3, [pc, #336]	; (8000eb4 <Can_Init+0x1d8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a53      	ldr	r2, [pc, #332]	; (8000eb4 <Can_Init+0x1d8>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6013      	str	r3, [r2, #0]
		//CAN bit timing register (baud Rate)
		CAN_BTR_temp=CAN_BTR;
 8000d6c:	4b52      	ldr	r3, [pc, #328]	; (8000eb8 <Can_Init+0x1dc>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	61bb      	str	r3, [r7, #24]
		CAN_BTR_temp &=0XC0000000;
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000d78:	61bb      	str	r3, [r7, #24]
		//set Prescaler
		Bits_Timing=Config->CanConfigSet.CanController.CanControllerDefaultBaudrate->CanControllerPropSeg;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7e:	88db      	ldrh	r3, [r3, #6]
 8000d80:	60fb      	str	r3, [r7, #12]
		Bits_Timing+=Config->CanConfigSet.CanController.CanControllerDefaultBaudrate->CanControllerSeg1;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d86:	7a1b      	ldrb	r3, [r3, #8]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]
		Bits_Timing+=Config->CanConfigSet.CanController.CanControllerDefaultBaudrate->CanControllerSeg2;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d94:	7a5b      	ldrb	r3, [r3, #9]
 8000d96:	461a      	mov	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
		BaudRate=Config->CanConfigSet.CanController.CanControllerDefaultBaudrate->CanControllerBaudRate;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff21 	bl	8000bec <__aeabi_f2uiz>
 8000daa:	4603      	mov	r3, r0
 8000dac:	613b      	str	r3, [r7, #16]
		Prescaler=(8000000)/(Bits_Timing*1000*BaudRate);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	fb02 f303 	mul.w	r3, r2, r3
 8000db6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dba:	fb02 f303 	mul.w	r3, r2, r3
 8000dbe:	4a3f      	ldr	r2, [pc, #252]	; (8000ebc <Can_Init+0x1e0>)
 8000dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc4:	617b      	str	r3, [r7, #20]
		CAN_BTR_temp |=(Prescaler-1)<<0;
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
		//set TimeSeg1
		CAN_BTR_temp |=(Config->CanConfigSet.CanController.CanControllerDefaultBaudrate->CanControllerSeg1-1)<<16;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd4:	7a1b      	ldrb	r3, [r3, #8]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	041b      	lsls	r3, r3, #16
 8000dda:	461a      	mov	r2, r3
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
		//set TimeSeg2
		CAN_BTR_temp |=(Config->CanConfigSet.CanController.CanControllerDefaultBaudrate->CanControllerSeg2-1)<<20;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de6:	7a5b      	ldrb	r3, [r3, #9]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	051b      	lsls	r3, r3, #20
 8000dec:	461a      	mov	r2, r3
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
		CAN_BTR=CAN_BTR_temp;
 8000df4:	4a30      	ldr	r2, [pc, #192]	; (8000eb8 <Can_Init+0x1dc>)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	6013      	str	r3, [r2, #0]
		//CAN_BTR |=(1<<31);
		//CAN_BTR |=(1<<30);
		/*
		 enable Transmit interrupt
		 */
		CAN_IER |=(1<<0);
 8000dfa:	4b31      	ldr	r3, [pc, #196]	; (8000ec0 <Can_Init+0x1e4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a30      	ldr	r2, [pc, #192]	; (8000ec0 <Can_Init+0x1e4>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6013      	str	r3, [r2, #0]
		NVIC_IRQ19_CAN_TX_Enable();
 8000e06:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <Can_Init+0x1e8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a2e      	ldr	r2, [pc, #184]	; (8000ec4 <Can_Init+0x1e8>)
 8000e0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e10:	6013      	str	r3, [r2, #0]
		/*
		 enable Receive Fifo 0 interrupt
		 */
		//FIFO message pending interrupt enable
		CAN_IER |=(1<<1);
 8000e12:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <Can_Init+0x1e4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a2a      	ldr	r2, [pc, #168]	; (8000ec0 <Can_Init+0x1e4>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	6013      	str	r3, [r2, #0]
		//FIFO full interrupt enable
		CAN_IER |=(1<<2);
 8000e1e:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <Can_Init+0x1e4>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a27      	ldr	r2, [pc, #156]	; (8000ec0 <Can_Init+0x1e4>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6013      	str	r3, [r2, #0]
		//FIFO overrun interrupt enable
		CAN_IER |=(1<<3);
 8000e2a:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <Can_Init+0x1e4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a24      	ldr	r2, [pc, #144]	; (8000ec0 <Can_Init+0x1e4>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	6013      	str	r3, [r2, #0]
		NVIC_IRQ20_CAN_RX0_Enable();
 8000e36:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <Can_Init+0x1e8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a22      	ldr	r2, [pc, #136]	; (8000ec4 <Can_Init+0x1e8>)
 8000e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e40:	6013      	str	r3, [r2, #0]
		/*
		 enable Receive Fifo 1 interrupt
		 */
		//FIFO message pending interrupt enable
		CAN_IER |=(1<<4);
 8000e42:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <Can_Init+0x1e4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a1e      	ldr	r2, [pc, #120]	; (8000ec0 <Can_Init+0x1e4>)
 8000e48:	f043 0310 	orr.w	r3, r3, #16
 8000e4c:	6013      	str	r3, [r2, #0]
		//FIFO full interrupt enable
		CAN_IER |=(1<<5);
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <Can_Init+0x1e4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <Can_Init+0x1e4>)
 8000e54:	f043 0320 	orr.w	r3, r3, #32
 8000e58:	6013      	str	r3, [r2, #0]
		//FIFO overrun interrupt enable
		CAN_IER |=(1<<6);
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <Can_Init+0x1e4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a18      	ldr	r2, [pc, #96]	; (8000ec0 <Can_Init+0x1e4>)
 8000e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e64:	6013      	str	r3, [r2, #0]
		NVIC_IRQ21_CAN_RX1_Enable();
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <Can_Init+0x1e8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a16      	ldr	r2, [pc, #88]	; (8000ec4 <Can_Init+0x1e8>)
 8000e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e70:	6013      	str	r3, [r2, #0]
	else
	{
		//
	}
    // Hardware Object
    for (int i = 0; i < Max_Num_HOH ; i++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
 8000e76:	e007      	b.n	8000e88 <Can_Init+0x1ac>
    {
    	// Set Message Objects as Free
    	Message_ObjectStatus[i].Object_Free= TRUE;
 8000e78:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <Can_Init+0x1ec>)
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < Max_Num_HOH ; i++)
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3301      	adds	r3, #1
 8000e86:	61fb      	str	r3, [r7, #28]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	ddf4      	ble.n	8000e78 <Can_Init+0x19c>
    }
    /*
    [SWS_Can_00246] The function Can_Init shall change the module state to
    CAN_READY, after initializing all controllers inside the HW Unit.
    */
    CanDriverState=CAN_READY;
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <Can_Init+0x1c8>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	701a      	strb	r2, [r3, #0]
	Can_Controller_State=CAN_CS_STOPPED;
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <Can_Init+0x1cc>)
 8000e96:	2202      	movs	r2, #2
 8000e98:	701a      	strb	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	3720      	adds	r7, #32
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000111 	.word	0x20000111
 8000ea8:	20000112 	.word	0x20000112
 8000eac:	2000023c 	.word	0x2000023c
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40006400 	.word	0x40006400
 8000eb8:	4000641c 	.word	0x4000641c
 8000ebc:	007a1200 	.word	0x007a1200
 8000ec0:	40006414 	.word	0x40006414
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	200001ec 	.word	0x200001ec

08000ecc <Can_SetControllerMode>:
               	   	      E_OK (request accepted)
               	   	   	  E_NOT_OK (request not accepted)
 * Description			: This service reports about the current status of the requested CAN controller.
*******************************************************************************/
Std_ReturnType Can_SetControllerMode (uint8 Controller,Can_ControllerStateType Transition)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	71bb      	strb	r3, [r7, #6]
	Std_ReturnType Status=E_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]
	/*
	[SWS_Can_00198]  If development error detection for the Can module is enabled: if
	the module is not yet initialized, the function Can_SetControllerMode shall raise
	development error CAN_E_UNINIT and return E_NOT_OK.
	*/
	if(CanDriverState!=CAN_READY)
 8000ee0:	4b4f      	ldr	r3, [pc, #316]	; (8001020 <Can_SetControllerMode+0x154>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d009      	beq.n	8000efc <Can_SetControllerMode+0x30>
	{
		Status=E_NOT_OK;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
		Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_SetControllerMode_ID,CAN_E_UNINIT);
 8000eec:	2305      	movs	r3, #5
 8000eee:	2203      	movs	r2, #3
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	200b      	movs	r0, #11
 8000ef4:	f000 fb92 	bl	800161c <Det_ReportError>
		return Status;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	e08d      	b.n	8001018 <Can_SetControllerMode+0x14c>
	/*
	 The function Can_SetControllerMode(CAN_CS_STARTED)
	 shall set the hardware registers in a way that makes the CAN controller participating
	 on the network
	 */
	if(Transition==CAN_CS_STARTED)
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d12e      	bne.n	8000f60 <Can_SetControllerMode+0x94>
		/*
		 When the function Can_SetControllerMode
		 (CAN_CS_STARTED) is entered and the CAN controller is not in state STOPPED it
		 shall detect a invalid state transition
		 */
		if(Can_Controller_State==CAN_CS_STOPPED)
 8000f02:	4b48      	ldr	r3, [pc, #288]	; (8001024 <Can_SetControllerMode+0x158>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d120      	bne.n	8000f4c <Can_SetControllerMode+0x80>
		{
			if(CAN_HW_Unit_settings.CanConfigSet.CanController.CanBusoffProcessing==INTERRUPT||CAN_HW_Unit_settings.CanConfigSet.CanController.CanTxProcessing==INTERRUPT||CAN_HW_Unit_settings.CanConfigSet.CanController.CanRxProcessing==INTERRUPT)
 8000f0a:	4b47      	ldr	r3, [pc, #284]	; (8001028 <Can_SetControllerMode+0x15c>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d007      	beq.n	8000f22 <Can_SetControllerMode+0x56>
 8000f12:	4b45      	ldr	r3, [pc, #276]	; (8001028 <Can_SetControllerMode+0x15c>)
 8000f14:	7a9b      	ldrb	r3, [r3, #10]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d003      	beq.n	8000f22 <Can_SetControllerMode+0x56>
 8000f1a:	4b43      	ldr	r3, [pc, #268]	; (8001028 <Can_SetControllerMode+0x15c>)
 8000f1c:	7a5b      	ldrb	r3, [r3, #9]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d103      	bne.n	8000f2a <Can_SetControllerMode+0x5e>
			{
				Can_EnableControllerInterrupts(Controller);
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 f8ef 	bl	8001108 <Can_EnableControllerInterrupts>
			 [SWS_Can_00261] ⌈ The function Can_SetControllerMode(CAN_CS_STARTED)
			 shall set the hardware registers in a way that makes the CAN controller participating
			 on the network
			 */
			// enter STARTED mode
			CAN_MCR &=~(1<<0);
 8000f2a:	4b40      	ldr	r3, [pc, #256]	; (800102c <Can_SetControllerMode+0x160>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a3f      	ldr	r2, [pc, #252]	; (800102c <Can_SetControllerMode+0x160>)
 8000f30:	f023 0301 	bic.w	r3, r3, #1
 8000f34:	6013      	str	r3, [r2, #0]
			/*
			 This bit is cleared by hardware when the CAN hardware has left the initialization mode (to
			 be synchronized on the CAN bus). To be synchronized the hardware has to monitor a
			 sequence of 11 consecutive recessive bits on the CAN RX signal.
			 */
			while(CAN_MSR & (1<<0));
 8000f36:	bf00      	nop
 8000f38:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <Can_SetControllerMode+0x164>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1f9      	bne.n	8000f38 <Can_SetControllerMode+0x6c>
			Can_Controller_State=CAN_CS_STARTED;
 8000f44:	4b37      	ldr	r3, [pc, #220]	; (8001024 <Can_SetControllerMode+0x158>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	e05d      	b.n	8001008 <Can_SetControllerMode+0x13c>
			 [SWS_Can_00409] When the function Can_SetControllerMode
			 (CAN_CS_STARTED) is entered and the CAN controller is not in state STOPPED it
			 shall detect a invalid state transition
			 */
		#if(CanDevErrorDetect==STD_ON)
			Status=E_NOT_OK;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
			Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_SetControllerMode_ID,CAN_E_TRANSITION);
 8000f50:	2306      	movs	r3, #6
 8000f52:	2203      	movs	r2, #3
 8000f54:	2100      	movs	r1, #0
 8000f56:	200b      	movs	r0, #11
 8000f58:	f000 fb60 	bl	800161c <Det_ReportError>
			return Status;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	e05b      	b.n	8001018 <Can_SetControllerMode+0x14c>
		#endif

		}
	}
	else if(Transition==CAN_CS_STOPPED)
 8000f60:	79bb      	ldrb	r3, [r7, #6]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d12b      	bne.n	8000fbe <Can_SetControllerMode+0xf2>
	{
		if(Can_Controller_State==CAN_CS_SLEEP||Can_Controller_State==CAN_CS_STARTED)
 8000f66:	4b2f      	ldr	r3, [pc, #188]	; (8001024 <Can_SetControllerMode+0x158>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d003      	beq.n	8000f76 <Can_SetControllerMode+0xaa>
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <Can_SetControllerMode+0x158>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d119      	bne.n	8000faa <Can_SetControllerMode+0xde>
			/*
			 [SWS_Can_00263] ⌈ The function Can_SetControllerMode(CAN_CS_STOPPED)
			 shall set the bits inside the CAN hardware such that the CAN controller stops
			 participating on the network.
			 */
			CAN_MCR |=(1<<0);
 8000f76:	4b2d      	ldr	r3, [pc, #180]	; (800102c <Can_SetControllerMode+0x160>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a2c      	ldr	r2, [pc, #176]	; (800102c <Can_SetControllerMode+0x160>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6013      	str	r3, [r2, #0]
			if(CAN_HW_Unit_settings.CanConfigSet.CanController.CanBusoffProcessing==INTERRUPT||CAN_HW_Unit_settings.CanConfigSet.CanController.CanTxProcessing==INTERRUPT||CAN_HW_Unit_settings.CanConfigSet.CanController.CanRxProcessing==INTERRUPT)
 8000f82:	4b29      	ldr	r3, [pc, #164]	; (8001028 <Can_SetControllerMode+0x15c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d007      	beq.n	8000f9a <Can_SetControllerMode+0xce>
 8000f8a:	4b27      	ldr	r3, [pc, #156]	; (8001028 <Can_SetControllerMode+0x15c>)
 8000f8c:	7a9b      	ldrb	r3, [r3, #10]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d003      	beq.n	8000f9a <Can_SetControllerMode+0xce>
 8000f92:	4b25      	ldr	r3, [pc, #148]	; (8001028 <Can_SetControllerMode+0x15c>)
 8000f94:	7a5b      	ldrb	r3, [r3, #9]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d103      	bne.n	8000fa2 <Can_SetControllerMode+0xd6>
			{
				Can_DisableControllerInterrupts(Controller);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 f849 	bl	8001034 <Can_DisableControllerInterrupts>
			}
			else
			{
				//
			}
			Can_Controller_State=CAN_CS_STOPPED;
 8000fa2:	4b20      	ldr	r3, [pc, #128]	; (8001024 <Can_SetControllerMode+0x158>)
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	e02e      	b.n	8001008 <Can_SetControllerMode+0x13c>
		}
		else
		{
			Status=E_NOT_OK;
 8000faa:	2301      	movs	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
			Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_SetControllerMode_ID,CAN_E_TRANSITION);
 8000fae:	2306      	movs	r3, #6
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	200b      	movs	r0, #11
 8000fb6:	f000 fb31 	bl	800161c <Det_ReportError>
			return Status;
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	e02c      	b.n	8001018 <Can_SetControllerMode+0x14c>
		}
	}
	else if(Transition==CAN_CS_SLEEP)
 8000fbe:	79bb      	ldrb	r3, [r7, #6]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d117      	bne.n	8000ff4 <Can_SetControllerMode+0x128>
	{
		if(Can_Controller_State==CAN_CS_STOPPED)
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <Can_SetControllerMode+0x158>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d109      	bne.n	8000fe0 <Can_SetControllerMode+0x114>
			/*
			 This bit is set by software to request the CAN hardware to enter the Sleep mode. Sleep
			 mode will be entered as soon as the current CAN activity (transmission or reception of a
			 CAN frame) has been completed.
			 */
			CAN_MCR |=(1<<1);
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <Can_SetControllerMode+0x160>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a16      	ldr	r2, [pc, #88]	; (800102c <Can_SetControllerMode+0x160>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	6013      	str	r3, [r2, #0]
			Can_Controller_State=CAN_CS_SLEEP;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <Can_SetControllerMode+0x158>)
 8000fda:	2203      	movs	r2, #3
 8000fdc:	701a      	strb	r2, [r3, #0]
 8000fde:	e013      	b.n	8001008 <Can_SetControllerMode+0x13c>
			/*
			  When the function Can_SetControllerMode(CAN_CS_SLEEP)
			 is entered and the CAN controller is neither in state STOPPED nor in state SLEEP, it
			 shall detect a invalid state transition
			 */
			Status=E_NOT_OK;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
			Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_SetControllerMode_ID,CAN_E_TRANSITION);
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	2100      	movs	r1, #0
 8000fea:	200b      	movs	r0, #11
 8000fec:	f000 fb16 	bl	800161c <Det_ReportError>
			return Status;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	e011      	b.n	8001018 <Can_SetControllerMode+0x14c>
		[SWS_Can_00200] ⌈ If development error detection for the Can module is enabled: if
		an invalid transition has been requested, the function Can_SetControllerMode shall
		raise the error CAN_E_TRANSITION and return E_NOT_OK.
		*/
	#if(CanDevErrorDetect==STD_ON)
		Status=E_NOT_OK;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
		Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_SetControllerMode_ID,CAN_E_TRANSITION);
 8000ff8:	2306      	movs	r3, #6
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	200b      	movs	r0, #11
 8001000:	f000 fb0c 	bl	800161c <Det_ReportError>
		return Status;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	e007      	b.n	8001018 <Can_SetControllerMode+0x14c>
	}
	/*
	 The Can module notifies the upper layer (CanIf_ControllerModeIndication) after a
	 successful state transition about the new state.
	 */
	CanIf_ControllerModeIndication(Controller,Can_Controller_State);
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <Can_SetControllerMode+0x158>)
 800100a:	781a      	ldrb	r2, [r3, #0]
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fe55 	bl	8000cc0 <CanIf_ControllerModeIndication>
	return Status;
 8001016:	7bfb      	ldrb	r3, [r7, #15]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000111 	.word	0x20000111
 8001024:	20000112 	.word	0x20000112
 8001028:	2000023c 	.word	0x2000023c
 800102c:	40006400 	.word	0x40006400
 8001030:	40006404 	.word	0x40006404

08001034 <Can_DisableControllerInterrupts>:
 * Parameters (out)  	: None
 * Return value      	: None
 * Description       	: This function disables all interrupts for this CAN controller
*******************************************************************************/
void Can_DisableControllerInterrupts (uint8 Controller)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	/*
	 [SWS_Can_00205] If development error detection for the Can module is enabled:
	 The function Can_DisableControllerInterrupts shall raise the error CAN_E_UNINIT if
	 the driver not yet initialized.
	 */
	if(CanDriverState!=CAN_READY)
 800103e:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <Can_DisableControllerInterrupts+0xc0>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d005      	beq.n	8001052 <Can_DisableControllerInterrupts+0x1e>
	Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_DisableControllerInterrupts_ID,CAN_E_UNINIT);
 8001046:	2305      	movs	r3, #5
 8001048:	2204      	movs	r2, #4
 800104a:	2100      	movs	r1, #0
 800104c:	200b      	movs	r0, #11
 800104e:	f000 fae5 	bl	800161c <Det_ReportError>
#endif
	if(CAN_HW_Unit_settings.CanConfigSet.CanController.CanBusoffProcessing==INTERRUPT||CAN_HW_Unit_settings.CanConfigSet.CanController.CanTxProcessing==INTERRUPT||CAN_HW_Unit_settings.CanConfigSet.CanController.CanRxProcessing==INTERRUPT)
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <Can_DisableControllerInterrupts+0xc4>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d007      	beq.n	800106a <Can_DisableControllerInterrupts+0x36>
 800105a:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <Can_DisableControllerInterrupts+0xc4>)
 800105c:	7a9b      	ldrb	r3, [r3, #10]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d003      	beq.n	800106a <Can_DisableControllerInterrupts+0x36>
 8001062:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <Can_DisableControllerInterrupts+0xc4>)
 8001064:	7a5b      	ldrb	r3, [r3, #9]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d140      	bne.n	80010ec <Can_DisableControllerInterrupts+0xb8>
		/*
		 The function Can_DisableControllerInterrupts can increase a counter on every
		 execution that indicates how many Can_EnableControllerInterrupts need to be called
		 before the interrupts will be enabled
		 */
		Interrupt_Disable_Counter++;
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <Can_DisableControllerInterrupts+0xc8>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b22      	ldr	r3, [pc, #136]	; (80010fc <Can_DisableControllerInterrupts+0xc8>)
 8001074:	701a      	strb	r2, [r3, #0]
		// disable all interrupts for that CAN controller only, if interrupts for that CAN Controller are enabled.
		if(CAN_IER&(1<<0))
 8001076:	4b22      	ldr	r3, [pc, #136]	; (8001100 <Can_DisableControllerInterrupts+0xcc>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d034      	beq.n	80010ec <Can_DisableControllerInterrupts+0xb8>
			/*
			 When Can_EnableControllerInterrupts has been called several
			 times, Can_DisableControllerInterrupts must be called as many times before the
			 interrupts are re-disabled.
			*/
			if(Interrupt_Enable_Counter>0)
 8001082:	4b20      	ldr	r3, [pc, #128]	; (8001104 <Can_DisableControllerInterrupts+0xd0>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d006      	beq.n	8001098 <Can_DisableControllerInterrupts+0x64>
			{
				Interrupt_Enable_Counter--;
 800108a:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <Can_DisableControllerInterrupts+0xd0>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	3b01      	subs	r3, #1
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <Can_DisableControllerInterrupts+0xd0>)
 8001094:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		//
	}
}
 8001096:	e029      	b.n	80010ec <Can_DisableControllerInterrupts+0xb8>
				CAN_IER &=~(1<<0);
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <Can_DisableControllerInterrupts+0xcc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a18      	ldr	r2, [pc, #96]	; (8001100 <Can_DisableControllerInterrupts+0xcc>)
 800109e:	f023 0301 	bic.w	r3, r3, #1
 80010a2:	6013      	str	r3, [r2, #0]
				CAN_IER &=~(1<<1);
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <Can_DisableControllerInterrupts+0xcc>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a15      	ldr	r2, [pc, #84]	; (8001100 <Can_DisableControllerInterrupts+0xcc>)
 80010aa:	f023 0302 	bic.w	r3, r3, #2
 80010ae:	6013      	str	r3, [r2, #0]
				CAN_IER &=~(1<<2);
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <Can_DisableControllerInterrupts+0xcc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <Can_DisableControllerInterrupts+0xcc>)
 80010b6:	f023 0304 	bic.w	r3, r3, #4
 80010ba:	6013      	str	r3, [r2, #0]
				CAN_IER &=~(1<<3);
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <Can_DisableControllerInterrupts+0xcc>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <Can_DisableControllerInterrupts+0xcc>)
 80010c2:	f023 0308 	bic.w	r3, r3, #8
 80010c6:	6013      	str	r3, [r2, #0]
				CAN_IER &=~(1<<4);
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <Can_DisableControllerInterrupts+0xcc>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <Can_DisableControllerInterrupts+0xcc>)
 80010ce:	f023 0310 	bic.w	r3, r3, #16
 80010d2:	6013      	str	r3, [r2, #0]
				CAN_IER &=~(1<<5);
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <Can_DisableControllerInterrupts+0xcc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a09      	ldr	r2, [pc, #36]	; (8001100 <Can_DisableControllerInterrupts+0xcc>)
 80010da:	f023 0320 	bic.w	r3, r3, #32
 80010de:	6013      	str	r3, [r2, #0]
				CAN_IER &=~(1<<6);
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <Can_DisableControllerInterrupts+0xcc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a06      	ldr	r2, [pc, #24]	; (8001100 <Can_DisableControllerInterrupts+0xcc>)
 80010e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000111 	.word	0x20000111
 80010f8:	2000023c 	.word	0x2000023c
 80010fc:	20000114 	.word	0x20000114
 8001100:	40006414 	.word	0x40006414
 8001104:	20000113 	.word	0x20000113

08001108 <Can_EnableControllerInterrupts>:
 * Parameters (out)  	: None
 * Return value      	: None
 * Description       	: This function enables all allowed interrupts
******************************************************************************/
void Can_EnableControllerInterrupts (uint8 Controller)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	/*
	 [SWS_Can_00209] If development error detection for the Can module is enabled:
	 The function Can_EnableControllerInterrupts shall raise the error CAN_E_UNINIT if
	 the driver not yet initialized.
	 */
	if(CanDriverState!=CAN_READY)
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <Can_EnableControllerInterrupts+0xc0>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d005      	beq.n	8001126 <Can_EnableControllerInterrupts+0x1e>
	Det_ReportError(CAN_VERSION_ID,CONTROLLER_ZERO,Can_EnableControllerInterrupts_ID,CAN_E_UNINIT);
 800111a:	2305      	movs	r3, #5
 800111c:	2205      	movs	r2, #5
 800111e:	2100      	movs	r1, #0
 8001120:	200b      	movs	r0, #11
 8001122:	f000 fa7b 	bl	800161c <Det_ReportError>
#endif
	if(CAN_HW_Unit_settings.CanConfigSet.CanController.CanBusoffProcessing==INTERRUPT||CAN_HW_Unit_settings.CanConfigSet.CanController.CanTxProcessing==INTERRUPT||CAN_HW_Unit_settings.CanConfigSet.CanController.CanRxProcessing==INTERRUPT)
 8001126:	4b29      	ldr	r3, [pc, #164]	; (80011cc <Can_EnableControllerInterrupts+0xc4>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d007      	beq.n	800113e <Can_EnableControllerInterrupts+0x36>
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <Can_EnableControllerInterrupts+0xc4>)
 8001130:	7a9b      	ldrb	r3, [r3, #10]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d003      	beq.n	800113e <Can_EnableControllerInterrupts+0x36>
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <Can_EnableControllerInterrupts+0xc4>)
 8001138:	7a5b      	ldrb	r3, [r3, #9]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d140      	bne.n	80011c0 <Can_EnableControllerInterrupts+0xb8>
		/*
		 The function Can_EnableControllerInterrupts can increase a counter on every
		 execution that indicates how many Can_DisableControllerInterrupts need to be called
		 before the interrupts will be disabled
		 */
		Interrupt_Enable_Counter++;
 800113e:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <Can_EnableControllerInterrupts+0xc8>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <Can_EnableControllerInterrupts+0xc8>)
 8001148:	701a      	strb	r2, [r3, #0]
		// enable all interrupts for that CAN controller only, if interrupts for that CAN Controller are disabled.
		if((CAN_IER&(1<<0))==0)
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <Can_EnableControllerInterrupts+0xcc>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d134      	bne.n	80011c0 <Can_EnableControllerInterrupts+0xb8>
			/*
			 [SWS_Can_00202] When Can_DisableControllerInterrupts has been called several
			 times, Can_EnableControllerInterrupts must be called as many times before the
			 interrupts are re-enabled.
			*/
			if(Interrupt_Disable_Counter>0)
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <Can_EnableControllerInterrupts+0xd0>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <Can_EnableControllerInterrupts+0x64>
			{
				Interrupt_Disable_Counter--;
 800115e:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <Can_EnableControllerInterrupts+0xd0>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	3b01      	subs	r3, #1
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <Can_EnableControllerInterrupts+0xd0>)
 8001168:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		//
	}
}
 800116a:	e029      	b.n	80011c0 <Can_EnableControllerInterrupts+0xb8>
				CAN_IER |=(1<<0);
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <Can_EnableControllerInterrupts+0xcc>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <Can_EnableControllerInterrupts+0xcc>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6013      	str	r3, [r2, #0]
				CAN_IER |=(1<<1);
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <Can_EnableControllerInterrupts+0xcc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a15      	ldr	r2, [pc, #84]	; (80011d4 <Can_EnableControllerInterrupts+0xcc>)
 800117e:	f043 0302 	orr.w	r3, r3, #2
 8001182:	6013      	str	r3, [r2, #0]
				CAN_IER |=(1<<2);
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <Can_EnableControllerInterrupts+0xcc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <Can_EnableControllerInterrupts+0xcc>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	6013      	str	r3, [r2, #0]
				CAN_IER |=(1<<3);
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <Can_EnableControllerInterrupts+0xcc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <Can_EnableControllerInterrupts+0xcc>)
 8001196:	f043 0308 	orr.w	r3, r3, #8
 800119a:	6013      	str	r3, [r2, #0]
				CAN_IER |=(1<<4);
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <Can_EnableControllerInterrupts+0xcc>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <Can_EnableControllerInterrupts+0xcc>)
 80011a2:	f043 0310 	orr.w	r3, r3, #16
 80011a6:	6013      	str	r3, [r2, #0]
				CAN_IER |=(1<<5);
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <Can_EnableControllerInterrupts+0xcc>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <Can_EnableControllerInterrupts+0xcc>)
 80011ae:	f043 0320 	orr.w	r3, r3, #32
 80011b2:	6013      	str	r3, [r2, #0]
				CAN_IER |=(1<<6);
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <Can_EnableControllerInterrupts+0xcc>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <Can_EnableControllerInterrupts+0xcc>)
 80011ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000111 	.word	0x20000111
 80011cc:	2000023c 	.word	0x2000023c
 80011d0:	20000113 	.word	0x20000113
 80011d4:	40006414 	.word	0x40006414
 80011d8:	20000114 	.word	0x20000114

080011dc <USB_HP_CAN_TX_IRQHandler>:
}
/*************************************************************************
 *************************************ISR*********************************
 ************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
	//Check which mailbox transmit is complete
	// RQCPx: Request completed mailbox
	//Set by hardware when the last request (transmit or abort) has been performed.
	if((CAN_TSR & (1<<0))==1)
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <USB_HP_CAN_TX_IRQHandler+0x8c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d134      	bne.n	8001258 <USB_HP_CAN_TX_IRQHandler+0x7c>
	{
		 //Request completed mailbox0
		CAN_TSR |=1<<0;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <USB_HP_CAN_TX_IRQHandler+0x8c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <USB_HP_CAN_TX_IRQHandler+0x8c>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6013      	str	r3, [r2, #0]
		for(int i=0;i<Max_Num_HOH;i++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	e027      	b.n	8001250 <USB_HP_CAN_TX_IRQHandler+0x74>
		{
			if(CAN_HW_Unit_settings.CanConfigSet.CanHardwareObject[i].CanObjectType==TRANSMIT)
 8001200:	491a      	ldr	r1, [pc, #104]	; (800126c <USB_HP_CAN_TX_IRQHandler+0x90>)
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	3332      	adds	r3, #50	; 0x32
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d119      	bne.n	800124a <USB_HP_CAN_TX_IRQHandler+0x6e>
			{
				if(Message_ObjectStatus[i].mailbox==Transmi_mailbox_0)
 8001216:	4a16      	ldr	r2, [pc, #88]	; (8001270 <USB_HP_CAN_TX_IRQHandler+0x94>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	789b      	ldrb	r3, [r3, #2]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d112      	bne.n	800124a <USB_HP_CAN_TX_IRQHandler+0x6e>
				{
					if(Message_ObjectStatus[i].Object_Free==FALSE)
 8001224:	4a12      	ldr	r2, [pc, #72]	; (8001270 <USB_HP_CAN_TX_IRQHandler+0x94>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10c      	bne.n	800124a <USB_HP_CAN_TX_IRQHandler+0x6e>
					{
						Message_ObjectStatus[i].Object_Free=TRUE;
 8001230:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <USB_HP_CAN_TX_IRQHandler+0x94>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2101      	movs	r1, #1
 8001236:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
						CanIf_TxConfirmation(Message_ObjectStatus[i].swPduHandle);
 800123a:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <USB_HP_CAN_TX_IRQHandler+0x94>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	78db      	ldrb	r3, [r3, #3]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fd31 	bl	8000cac <CanIf_TxConfirmation>
		for(int i=0;i<Max_Num_HOH;i++)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3301      	adds	r3, #1
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b03      	cmp	r3, #3
 8001254:	ddd4      	ble.n	8001200 <USB_HP_CAN_TX_IRQHandler+0x24>
	}
	else
	{
		// no call back
	}
}
 8001256:	e003      	b.n	8001260 <USB_HP_CAN_TX_IRQHandler+0x84>
	else if((CAN_TSR & (1<<8))==1)
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <USB_HP_CAN_TX_IRQHandler+0x8c>)
 800125a:	681b      	ldr	r3, [r3, #0]
	else if((CAN_TSR & (1<<16))==1)
 800125c:	4b02      	ldr	r3, [pc, #8]	; (8001268 <USB_HP_CAN_TX_IRQHandler+0x8c>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40006408 	.word	0x40006408
 800126c:	2000023c 	.word	0x2000023c
 8001270:	200001ec 	.word	0x200001ec

08001274 <USB_LP_CAN_RX0_IRQHandler>:

void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
	//These bits indicate how many messages are pending in the receive FIFO
	if ((CAN_RF0R & (3<<0))!=0)
 800127a:	4b55      	ldr	r3, [pc, #340]	; (80013d0 <USB_LP_CAN_RX0_IRQHandler+0x15c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 809c 	beq.w	80013c0 <USB_LP_CAN_RX0_IRQHandler+0x14c>
	{
		for(int i=0;i<Max_Num_HOH;i++)
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
 800128c:	e08d      	b.n	80013aa <USB_LP_CAN_RX0_IRQHandler+0x136>
		{
			if(CAN_HW_Unit_settings.CanConfigSet.CanHardwareObject[i].CanObjectType==RECEIVE)
 800128e:	4951      	ldr	r1, [pc, #324]	; (80013d4 <USB_LP_CAN_RX0_IRQHandler+0x160>)
 8001290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	3332      	adds	r3, #50	; 0x32
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d17f      	bne.n	80013a4 <USB_LP_CAN_RX0_IRQHandler+0x130>
			{
				if(Message_ObjectStatus[i].Object_Free==TRUE)
 80012a4:	4a4c      	ldr	r2, [pc, #304]	; (80013d8 <USB_LP_CAN_RX0_IRQHandler+0x164>)
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d179      	bne.n	80013a4 <USB_LP_CAN_RX0_IRQHandler+0x130>
				{
					//Identifier extension
					if((CAN_RX_FIFO_0->CAN_RIxR & (1<<2))==1)
 80012b0:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <USB_LP_CAN_RX0_IRQHandler+0x168>)
 80012b2:	681b      	ldr	r3, [r3, #0]
						}
					}
					else
					{
						//0: Standard identifier
						if(CAN_HW_Unit_settings.CanConfigSet.CanHardwareObject[i].CanIdType==STANDARD)
 80012b4:	4947      	ldr	r1, [pc, #284]	; (80013d4 <USB_LP_CAN_RX0_IRQHandler+0x160>)
 80012b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	3330      	adds	r3, #48	; 0x30
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d166      	bne.n	8001398 <USB_LP_CAN_RX0_IRQHandler+0x124>
						{
							if((CAN_RX_FIFO_0->CAN_RIxR>>21)==CAN_HW_Unit_settings.CanConfigSet.CanHardwareObject[i].CanHwFilter.CanHwFilterCode)
 80012ca:	4b44      	ldr	r3, [pc, #272]	; (80013dc <USB_LP_CAN_RX0_IRQHandler+0x168>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	0d59      	lsrs	r1, r3, #21
 80012d0:	4840      	ldr	r0, [pc, #256]	; (80013d4 <USB_LP_CAN_RX0_IRQHandler+0x160>)
 80012d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4403      	add	r3, r0
 80012de:	3338      	adds	r3, #56	; 0x38
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4299      	cmp	r1, r3
 80012e4:	d15e      	bne.n	80013a4 <USB_LP_CAN_RX0_IRQHandler+0x130>
							{
								Can_HwType Mailbox;
								PduInfoType PduInfoPtr;
								//HOH is busy
								Message_ObjectStatus[i].Object_Free=FALSE;
 80012e6:	4a3c      	ldr	r2, [pc, #240]	; (80013d8 <USB_LP_CAN_RX0_IRQHandler+0x164>)
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	2100      	movs	r1, #0
 80012ec:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
								//00 CAN FD frame with Extended CAN ID
								Message_Object[i].ID=(CAN_RX_FIFO_0->CAN_RIxR>>21);
 80012f0:	4b3a      	ldr	r3, [pc, #232]	; (80013dc <USB_LP_CAN_RX0_IRQHandler+0x168>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	0d5a      	lsrs	r2, r3, #21
 80012f6:	493a      	ldr	r1, [pc, #232]	; (80013e0 <USB_LP_CAN_RX0_IRQHandler+0x16c>)
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	440b      	add	r3, r1
 80012fe:	601a      	str	r2, [r3, #0]
								//Data Length
								Message_Object[i].DLC=(CAN_RX_FIFO_0->CAN_RDTxR & 0x0000000F);
 8001300:	4b36      	ldr	r3, [pc, #216]	; (80013dc <USB_LP_CAN_RX0_IRQHandler+0x168>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	b2d9      	uxtb	r1, r3
 800130c:	4a34      	ldr	r2, [pc, #208]	; (80013e0 <USB_LP_CAN_RX0_IRQHandler+0x16c>)
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	4413      	add	r3, r2
 8001314:	3304      	adds	r3, #4
 8001316:	460a      	mov	r2, r1
 8001318:	701a      	strb	r2, [r3, #0]
								//Data
								*((volatile uint32*)Message_Object[i].SDU)=CAN_RX_FIFO_0->CAN_RDLxR;
 800131a:	4a30      	ldr	r2, [pc, #192]	; (80013dc <USB_LP_CAN_RX0_IRQHandler+0x168>)
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	492f      	ldr	r1, [pc, #188]	; (80013e0 <USB_LP_CAN_RX0_IRQHandler+0x16c>)
 8001322:	440b      	add	r3, r1
 8001324:	3305      	adds	r3, #5
 8001326:	6892      	ldr	r2, [r2, #8]
 8001328:	601a      	str	r2, [r3, #0]
								*(((volatile uint32*)Message_Object[i].SDU)+1)=CAN_RX_FIFO_0->CAN_RDHxR;
 800132a:	4a2c      	ldr	r2, [pc, #176]	; (80013dc <USB_LP_CAN_RX0_IRQHandler+0x168>)
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	492b      	ldr	r1, [pc, #172]	; (80013e0 <USB_LP_CAN_RX0_IRQHandler+0x16c>)
 8001332:	440b      	add	r3, r1
 8001334:	3305      	adds	r3, #5
 8001336:	3304      	adds	r3, #4
 8001338:	68d2      	ldr	r2, [r2, #12]
 800133a:	601a      	str	r2, [r3, #0]
								Mailbox.CanId=Message_Object[i].ID;
 800133c:	4a28      	ldr	r2, [pc, #160]	; (80013e0 <USB_LP_CAN_RX0_IRQHandler+0x16c>)
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	4413      	add	r3, r2
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	60fb      	str	r3, [r7, #12]
								Mailbox.Hoh=CAN_HW_Unit_settings.CanConfigSet.CanHardwareObject[i].CanObjectId;
 8001348:	4922      	ldr	r1, [pc, #136]	; (80013d4 <USB_LP_CAN_RX0_IRQHandler+0x160>)
 800134a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	3331      	adds	r3, #49	; 0x31
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	743b      	strb	r3, [r7, #16]
								Mailbox.ControllerId=CAN_HW_Unit_settings.CanConfigSet.CanController.CanControllerId;
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <USB_LP_CAN_RX0_IRQHandler+0x160>)
 800135e:	7a1b      	ldrb	r3, [r3, #8]
 8001360:	747b      	strb	r3, [r7, #17]
								PduInfoPtr.SduDataPtr=Message_Object[i].SDU;
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <USB_LP_CAN_RX0_IRQHandler+0x16c>)
 8001368:	4413      	add	r3, r2
 800136a:	3305      	adds	r3, #5
 800136c:	607b      	str	r3, [r7, #4]
								PduInfoPtr.SduLength=Message_Object[i].DLC;
 800136e:	4a1c      	ldr	r2, [pc, #112]	; (80013e0 <USB_LP_CAN_RX0_IRQHandler+0x16c>)
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	4413      	add	r3, r2
 8001376:	3304      	adds	r3, #4
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	723b      	strb	r3, [r7, #8]
								//callback function to upper layer
								//CanIf_RxIndication(CAN_HW_Unit_settings.CanConfigSet.CanHardwareObject[i].CanObjectId,Message_Object[i].ID,Message_Object[i].DLC,Message_Object[i].SDU);
								CanIf_RxIndication (&Mailbox,&PduInfoPtr);
 800137c:	1d3a      	adds	r2, r7, #4
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fc51 	bl	8000c2c <CanIf_RxIndication>
								Message_ObjectStatus[i].Object_Free=TRUE;
 800138a:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <USB_LP_CAN_RX0_IRQHandler+0x164>)
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	2101      	movs	r1, #1
 8001390:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
								break;
 8001394:	bf00      	nop
 8001396:	e00c      	b.n	80013b2 <USB_LP_CAN_RX0_IRQHandler+0x13e>
						}
						else
						{
							//Clear message
							//Set by software to release the output mailbox of the FIFO
							CAN_RF0R |=(1<<5);
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <USB_LP_CAN_RX0_IRQHandler+0x15c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <USB_LP_CAN_RX0_IRQHandler+0x15c>)
 800139e:	f043 0320 	orr.w	r3, r3, #32
 80013a2:	6013      	str	r3, [r2, #0]
		for(int i=0;i<Max_Num_HOH;i++)
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	3301      	adds	r3, #1
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	f77f af6e 	ble.w	800128e <USB_LP_CAN_RX0_IRQHandler+0x1a>
				//
			}
		}
		//Clear message
		//Set by software to release the output mailbox of the FIFO
		CAN_RF0R |=(1<<5);
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <USB_LP_CAN_RX0_IRQHandler+0x15c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <USB_LP_CAN_RX0_IRQHandler+0x15c>)
 80013b8:	f043 0320 	orr.w	r3, r3, #32
 80013bc:	6013      	str	r3, [r2, #0]
	}
	else
	{
		//
	}
}
 80013be:	e003      	b.n	80013c8 <USB_LP_CAN_RX0_IRQHandler+0x154>
	else if((CAN_RF0R & (1<<3))==1)
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <USB_LP_CAN_RX0_IRQHandler+0x15c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
	else if((CAN_RF0R & (1<<4))==1)
 80013c4:	4b02      	ldr	r3, [pc, #8]	; (80013d0 <USB_LP_CAN_RX0_IRQHandler+0x15c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	4000640c 	.word	0x4000640c
 80013d4:	2000023c 	.word	0x2000023c
 80013d8:	200001ec 	.word	0x200001ec
 80013dc:	400065b0 	.word	0x400065b0
 80013e0:	200001fc 	.word	0x200001fc

080013e4 <MCAL_CAN_Config_Filter>:
* @param [in] 		-Filter_Config: configuration information for the specified Can Filter
* @retval 			-Can_Status_t	status of Can hardware (CAN_OK,CAN_ERROR,...)
* Note				-None
*/
void MCAL_CAN_Config_Filter(CAN_Filter_Config_t* Filter_Config)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	// Current Filter Bank
	CAN_Filter_Bank_TypeDef* Current_Bank ;
	switch (Filter_Config->Filter_Bank)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	2b0d      	cmp	r3, #13
 80013f2:	d849      	bhi.n	8001488 <MCAL_CAN_Config_Filter+0xa4>
 80013f4:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <MCAL_CAN_Config_Filter+0x18>)
 80013f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fa:	bf00      	nop
 80013fc:	08001435 	.word	0x08001435
 8001400:	0800143b 	.word	0x0800143b
 8001404:	08001441 	.word	0x08001441
 8001408:	08001447 	.word	0x08001447
 800140c:	0800144d 	.word	0x0800144d
 8001410:	08001453 	.word	0x08001453
 8001414:	08001459 	.word	0x08001459
 8001418:	0800145f 	.word	0x0800145f
 800141c:	08001465 	.word	0x08001465
 8001420:	0800146b 	.word	0x0800146b
 8001424:	08001471 	.word	0x08001471
 8001428:	08001477 	.word	0x08001477
 800142c:	0800147d 	.word	0x0800147d
 8001430:	08001483 	.word	0x08001483
	{
		case CAN_Filter_Bank_0:
			Current_Bank=CAN_FBank_0;
 8001434:	4b66      	ldr	r3, [pc, #408]	; (80015d0 <MCAL_CAN_Config_Filter+0x1ec>)
 8001436:	60fb      	str	r3, [r7, #12]
			break;
 8001438:	e027      	b.n	800148a <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_1:
			Current_Bank=CAN_FBank_1;
 800143a:	4b66      	ldr	r3, [pc, #408]	; (80015d4 <MCAL_CAN_Config_Filter+0x1f0>)
 800143c:	60fb      	str	r3, [r7, #12]
			break;
 800143e:	e024      	b.n	800148a <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_2:
			Current_Bank=CAN_FBank_2;
 8001440:	4b65      	ldr	r3, [pc, #404]	; (80015d8 <MCAL_CAN_Config_Filter+0x1f4>)
 8001442:	60fb      	str	r3, [r7, #12]
			break;
 8001444:	e021      	b.n	800148a <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_3:
			Current_Bank=CAN_FBank_3;
 8001446:	4b65      	ldr	r3, [pc, #404]	; (80015dc <MCAL_CAN_Config_Filter+0x1f8>)
 8001448:	60fb      	str	r3, [r7, #12]
			break;
 800144a:	e01e      	b.n	800148a <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_4:
			Current_Bank=CAN_FBank_4;
 800144c:	4b64      	ldr	r3, [pc, #400]	; (80015e0 <MCAL_CAN_Config_Filter+0x1fc>)
 800144e:	60fb      	str	r3, [r7, #12]
			break;
 8001450:	e01b      	b.n	800148a <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_5:
			Current_Bank=CAN_FBank_5;
 8001452:	4b64      	ldr	r3, [pc, #400]	; (80015e4 <MCAL_CAN_Config_Filter+0x200>)
 8001454:	60fb      	str	r3, [r7, #12]
			break;
 8001456:	e018      	b.n	800148a <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_6:
			Current_Bank=CAN_FBank_6;
 8001458:	4b63      	ldr	r3, [pc, #396]	; (80015e8 <MCAL_CAN_Config_Filter+0x204>)
 800145a:	60fb      	str	r3, [r7, #12]
			break;
 800145c:	e015      	b.n	800148a <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_7:
			Current_Bank=CAN_FBank_7;
 800145e:	4b63      	ldr	r3, [pc, #396]	; (80015ec <MCAL_CAN_Config_Filter+0x208>)
 8001460:	60fb      	str	r3, [r7, #12]
			break;
 8001462:	e012      	b.n	800148a <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_8:
			Current_Bank=CAN_FBank_8;
 8001464:	4b62      	ldr	r3, [pc, #392]	; (80015f0 <MCAL_CAN_Config_Filter+0x20c>)
 8001466:	60fb      	str	r3, [r7, #12]
			break;
 8001468:	e00f      	b.n	800148a <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_9:
			Current_Bank=CAN_FBank_9;
 800146a:	4b62      	ldr	r3, [pc, #392]	; (80015f4 <MCAL_CAN_Config_Filter+0x210>)
 800146c:	60fb      	str	r3, [r7, #12]
			break;
 800146e:	e00c      	b.n	800148a <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_10:
			Current_Bank=CAN_FBank_10;
 8001470:	4b61      	ldr	r3, [pc, #388]	; (80015f8 <MCAL_CAN_Config_Filter+0x214>)
 8001472:	60fb      	str	r3, [r7, #12]
			break;
 8001474:	e009      	b.n	800148a <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_11:
			Current_Bank=CAN_FBank_11;
 8001476:	4b61      	ldr	r3, [pc, #388]	; (80015fc <MCAL_CAN_Config_Filter+0x218>)
 8001478:	60fb      	str	r3, [r7, #12]
			break;
 800147a:	e006      	b.n	800148a <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_12:
			Current_Bank=CAN_FBank_12;
 800147c:	4b60      	ldr	r3, [pc, #384]	; (8001600 <MCAL_CAN_Config_Filter+0x21c>)
 800147e:	60fb      	str	r3, [r7, #12]
			break;
 8001480:	e003      	b.n	800148a <MCAL_CAN_Config_Filter+0xa6>
		case CAN_Filter_Bank_13:
			Current_Bank=CAN_FBank_13;
 8001482:	4b60      	ldr	r3, [pc, #384]	; (8001604 <MCAL_CAN_Config_Filter+0x220>)
 8001484:	60fb      	str	r3, [r7, #12]
			break;
 8001486:	e000      	b.n	800148a <MCAL_CAN_Config_Filter+0xa6>
		default:
			break;
 8001488:	bf00      	nop
	}
	// To configure a filter bank it must be deactivated by clearing the FACT bit in the CAN_FAR register
	// Initialization mode for the filters
	CAN_FMR |=(1<<0);
 800148a:	4b5f      	ldr	r3, [pc, #380]	; (8001608 <MCAL_CAN_Config_Filter+0x224>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a5e      	ldr	r2, [pc, #376]	; (8001608 <MCAL_CAN_Config_Filter+0x224>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6013      	str	r3, [r2, #0]
	//Filter x is not active
	CAN_FA1R &=~(1<<Filter_Config->Filter_Bank);
 8001496:	4b5d      	ldr	r3, [pc, #372]	; (800160c <MCAL_CAN_Config_Filter+0x228>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68d2      	ldr	r2, [r2, #12]
 800149e:	2101      	movs	r1, #1
 80014a0:	fa01 f202 	lsl.w	r2, r1, r2
 80014a4:	43d2      	mvns	r2, r2
 80014a6:	4611      	mov	r1, r2
 80014a8:	4a58      	ldr	r2, [pc, #352]	; (800160c <MCAL_CAN_Config_Filter+0x228>)
 80014aa:	400b      	ands	r3, r1
 80014ac:	6013      	str	r3, [r2, #0]
	// The filter scale is configured by means of the corresponding FSCx bit in the CAN_FS1R register
	switch (Filter_Config->Filter_Scale)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <MCAL_CAN_Config_Filter+0xd8>
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d020      	beq.n	80014fc <MCAL_CAN_Config_Filter+0x118>
			// configure filter bank
			Current_Bank->CAN_FiR1=Filter_Config->Filter_ID;
			Current_Bank->CAN_FiR2=Filter_Config->Filter_Mask_ID;
			break;
		default:
			break;
 80014ba:	e033      	b.n	8001524 <MCAL_CAN_Config_Filter+0x140>
			CAN_FS1R &=~(1<<Filter_Config->Filter_Bank);
 80014bc:	4b54      	ldr	r3, [pc, #336]	; (8001610 <MCAL_CAN_Config_Filter+0x22c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	68d2      	ldr	r2, [r2, #12]
 80014c4:	2101      	movs	r1, #1
 80014c6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ca:	43d2      	mvns	r2, r2
 80014cc:	4611      	mov	r1, r2
 80014ce:	4a50      	ldr	r2, [pc, #320]	; (8001610 <MCAL_CAN_Config_Filter+0x22c>)
 80014d0:	400b      	ands	r3, r1
 80014d2:	6013      	str	r3, [r2, #0]
			Current_Bank->CAN_FiR1=(Filter_Config->Filter_ID &(0xffff))|((Filter_Config->Filter_Mask_ID &(0xffff))<<16);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	b29a      	uxth	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	041b      	lsls	r3, r3, #16
 80014e0:	431a      	orrs	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	601a      	str	r2, [r3, #0]
			Current_Bank->CAN_FiR2=((Filter_Config->Filter_ID &(0xffff0000))>>16)|(Filter_Config->Filter_Mask_ID &(0xffff0000));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	0c1a      	lsrs	r2, r3, #16
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	0c1b      	lsrs	r3, r3, #16
 80014f2:	041b      	lsls	r3, r3, #16
 80014f4:	431a      	orrs	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	605a      	str	r2, [r3, #4]
			break;
 80014fa:	e013      	b.n	8001524 <MCAL_CAN_Config_Filter+0x140>
			CAN_FS1R |=(1<<Filter_Config->Filter_Bank);
 80014fc:	4b44      	ldr	r3, [pc, #272]	; (8001610 <MCAL_CAN_Config_Filter+0x22c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	68d2      	ldr	r2, [r2, #12]
 8001504:	2101      	movs	r1, #1
 8001506:	fa01 f202 	lsl.w	r2, r1, r2
 800150a:	4611      	mov	r1, r2
 800150c:	4a40      	ldr	r2, [pc, #256]	; (8001610 <MCAL_CAN_Config_Filter+0x22c>)
 800150e:	430b      	orrs	r3, r1
 8001510:	6013      	str	r3, [r2, #0]
			Current_Bank->CAN_FiR1=Filter_Config->Filter_ID;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	601a      	str	r2, [r3, #0]
			Current_Bank->CAN_FiR2=Filter_Config->Filter_Mask_ID;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	605a      	str	r2, [r3, #4]
			break;
 8001522:	bf00      	nop
	}
	//The identifier list or identifier mask mode is configured by means of the FBMx bits in the CAN_FM1R register.
	switch (Filter_Config->Filter_Mode)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <MCAL_CAN_Config_Filter+0x14e>
 800152c:	2b01      	cmp	r3, #1
 800152e:	d00d      	beq.n	800154c <MCAL_CAN_Config_Filter+0x168>
			break;
		case CAN_Filter_Mode_List:
			CAN_FM1R |=(1<<Filter_Config->Filter_Bank);
			break;
		default:
			break;
 8001530:	e018      	b.n	8001564 <MCAL_CAN_Config_Filter+0x180>
			CAN_FM1R &=~(1<<Filter_Config->Filter_Bank);
 8001532:	4b38      	ldr	r3, [pc, #224]	; (8001614 <MCAL_CAN_Config_Filter+0x230>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68d2      	ldr	r2, [r2, #12]
 800153a:	2101      	movs	r1, #1
 800153c:	fa01 f202 	lsl.w	r2, r1, r2
 8001540:	43d2      	mvns	r2, r2
 8001542:	4611      	mov	r1, r2
 8001544:	4a33      	ldr	r2, [pc, #204]	; (8001614 <MCAL_CAN_Config_Filter+0x230>)
 8001546:	400b      	ands	r3, r1
 8001548:	6013      	str	r3, [r2, #0]
			break;
 800154a:	e00b      	b.n	8001564 <MCAL_CAN_Config_Filter+0x180>
			CAN_FM1R |=(1<<Filter_Config->Filter_Bank);
 800154c:	4b31      	ldr	r3, [pc, #196]	; (8001614 <MCAL_CAN_Config_Filter+0x230>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	68d2      	ldr	r2, [r2, #12]
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f202 	lsl.w	r2, r1, r2
 800155a:	4611      	mov	r1, r2
 800155c:	4a2d      	ldr	r2, [pc, #180]	; (8001614 <MCAL_CAN_Config_Filter+0x230>)
 800155e:	430b      	orrs	r3, r1
 8001560:	6013      	str	r3, [r2, #0]
			break;
 8001562:	bf00      	nop
	}
	//The message passing through this filter will be stored in the specified FIFO
	switch (Filter_Config->Filter_FIFO_Assignment)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <MCAL_CAN_Config_Filter+0x18e>
 800156c:	2b01      	cmp	r3, #1
 800156e:	d00d      	beq.n	800158c <MCAL_CAN_Config_Filter+0x1a8>
			break;
		case CAN_Filter_FIFO_Assignment_FIFO1:
			CAN_FFA1R |=(1<<Filter_Config->Filter_Bank);
			break;
		default:
			break;
 8001570:	e018      	b.n	80015a4 <MCAL_CAN_Config_Filter+0x1c0>
			CAN_FFA1R &=~(1<<Filter_Config->Filter_Bank);
 8001572:	4b29      	ldr	r3, [pc, #164]	; (8001618 <MCAL_CAN_Config_Filter+0x234>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68d2      	ldr	r2, [r2, #12]
 800157a:	2101      	movs	r1, #1
 800157c:	fa01 f202 	lsl.w	r2, r1, r2
 8001580:	43d2      	mvns	r2, r2
 8001582:	4611      	mov	r1, r2
 8001584:	4a24      	ldr	r2, [pc, #144]	; (8001618 <MCAL_CAN_Config_Filter+0x234>)
 8001586:	400b      	ands	r3, r1
 8001588:	6013      	str	r3, [r2, #0]
			break;
 800158a:	e00b      	b.n	80015a4 <MCAL_CAN_Config_Filter+0x1c0>
			CAN_FFA1R |=(1<<Filter_Config->Filter_Bank);
 800158c:	4b22      	ldr	r3, [pc, #136]	; (8001618 <MCAL_CAN_Config_Filter+0x234>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	68d2      	ldr	r2, [r2, #12]
 8001594:	2101      	movs	r1, #1
 8001596:	fa01 f202 	lsl.w	r2, r1, r2
 800159a:	4611      	mov	r1, r2
 800159c:	4a1e      	ldr	r2, [pc, #120]	; (8001618 <MCAL_CAN_Config_Filter+0x234>)
 800159e:	430b      	orrs	r3, r1
 80015a0:	6013      	str	r3, [r2, #0]
			break;
 80015a2:	bf00      	nop
	}
	// Filter Bank active mode
	CAN_FMR &=~(1<<0);
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <MCAL_CAN_Config_Filter+0x224>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a17      	ldr	r2, [pc, #92]	; (8001608 <MCAL_CAN_Config_Filter+0x224>)
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	6013      	str	r3, [r2, #0]
	//Filter x is not active
	CAN_FA1R |=(1<<Filter_Config->Filter_Bank);
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <MCAL_CAN_Config_Filter+0x228>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	68d2      	ldr	r2, [r2, #12]
 80015b8:	2101      	movs	r1, #1
 80015ba:	fa01 f202 	lsl.w	r2, r1, r2
 80015be:	4611      	mov	r1, r2
 80015c0:	4a12      	ldr	r2, [pc, #72]	; (800160c <MCAL_CAN_Config_Filter+0x228>)
 80015c2:	430b      	orrs	r3, r1
 80015c4:	6013      	str	r3, [r2, #0]
}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40006640 	.word	0x40006640
 80015d4:	40006648 	.word	0x40006648
 80015d8:	40006650 	.word	0x40006650
 80015dc:	40006658 	.word	0x40006658
 80015e0:	40006660 	.word	0x40006660
 80015e4:	40006668 	.word	0x40006668
 80015e8:	40006670 	.word	0x40006670
 80015ec:	40006678 	.word	0x40006678
 80015f0:	40006680 	.word	0x40006680
 80015f4:	40006688 	.word	0x40006688
 80015f8:	40006690 	.word	0x40006690
 80015fc:	40006698 	.word	0x40006698
 8001600:	400066a0 	.word	0x400066a0
 8001604:	400066a8 	.word	0x400066a8
 8001608:	40006600 	.word	0x40006600
 800160c:	4000661c 	.word	0x4000661c
 8001610:	4000660c 	.word	0x4000660c
 8001614:	40006604 	.word	0x40006604
 8001618:	40006614 	.word	0x40006614

0800161c <Det_ReportError>:
* Parameters (out)	:	None
* Return value		:	Std_ReturnType (never returns a value, but has a return type for compatibility with services and hooks)
* Description		:	Service to report development errors.
***********************************************************************/
Std_ReturnType Det_ReportError ( uint16 ModuleId , uint8 InstanceId , uint8 ApiId , uint8 ErrorId )
{
 800161c:	b490      	push	{r4, r7}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4604      	mov	r4, r0
 8001624:	4608      	mov	r0, r1
 8001626:	4611      	mov	r1, r2
 8001628:	461a      	mov	r2, r3
 800162a:	4623      	mov	r3, r4
 800162c:	80fb      	strh	r3, [r7, #6]
 800162e:	4603      	mov	r3, r0
 8001630:	717b      	strb	r3, [r7, #5]
 8001632:	460b      	mov	r3, r1
 8001634:	713b      	strb	r3, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	70fb      	strb	r3, [r7, #3]
	while(1)
 800163a:	e7fe      	b.n	800163a <Det_ReportError+0x1e>

0800163c <Bluetooth_Init>:

uint16 Andrew_Nasser();


void Bluetooth_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	static USART_config_t Config;
	Config.BAUDRATE=USART_BAUDRATE_9600 ;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <Bluetooth_Init+0x44>)
 8001642:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001646:	605a      	str	r2, [r3, #4]
	Config.HWFLOWCTL=USART_HWFLOWCTL_Disable;
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <Bluetooth_Init+0x44>)
 800164a:	2200      	movs	r2, #0
 800164c:	725a      	strb	r2, [r3, #9]
	Config.IRQ_EN=USART_IRQ_ENABLE_RXNE;
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <Bluetooth_Init+0x44>)
 8001650:	2220      	movs	r2, #32
 8001652:	729a      	strb	r2, [r3, #10]
	Config.MODE=USART_MODE_TX_RX;
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <Bluetooth_Init+0x44>)
 8001656:	220c      	movs	r2, #12
 8001658:	701a      	strb	r2, [r3, #0]
	Config.NUM_DATA_BIT=USART_NUM_DATA_BIT_8;
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <Bluetooth_Init+0x44>)
 800165c:	2200      	movs	r2, #0
 800165e:	705a      	strb	r2, [r3, #1]
	Config.NUM_STOP_BIT=USART_NUM_STOP_BIT_1;
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <Bluetooth_Init+0x44>)
 8001662:	2200      	movs	r2, #0
 8001664:	709a      	strb	r2, [r3, #2]
	Config.PARITY=USART_PARITY_Disable;
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <Bluetooth_Init+0x44>)
 8001668:	2200      	movs	r2, #0
 800166a:	721a      	strb	r2, [r3, #8]
	Config.P_IRQ_CALL=USART1_IRQ_Call;
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <Bluetooth_Init+0x44>)
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <Bluetooth_Init+0x48>)
 8001670:	60da      	str	r2, [r3, #12]
	MCAL_USART_Init(USART1, &Config);
 8001672:	4903      	ldr	r1, [pc, #12]	; (8001680 <Bluetooth_Init+0x44>)
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <Bluetooth_Init+0x4c>)
 8001676:	f000 f9b3 	bl	80019e0 <MCAL_USART_Init>
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000118 	.word	0x20000118
 8001684:	080016e9 	.word	0x080016e9
 8001688:	40013800 	.word	0x40013800

0800168c <MCAL_GPIO_TogglePin>:

/**************************************************************************/
unsigned char DATA  ;
void MCAL_GPIO_TogglePin(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	static uint8 x=0;
	if(x==0)
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MCAL_GPIO_TogglePin+0x38>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d107      	bne.n	80016a8 <MCAL_GPIO_TogglePin+0x1c>
	{
		Dio_WriteChannel(channel_45,STD_LOW);
 8001698:	2100      	movs	r1, #0
 800169a:	202d      	movs	r0, #45	; 0x2d
 800169c:	f000 faec 	bl	8001c78 <Dio_WriteChannel>
		x=1;
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MCAL_GPIO_TogglePin+0x38>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	701a      	strb	r2, [r3, #0]
	else if(x==1)
	{
		Dio_WriteChannel(channel_45,STD_HIGH);
		x=0;
	}
}
 80016a6:	e00a      	b.n	80016be <MCAL_GPIO_TogglePin+0x32>
	else if(x==1)
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MCAL_GPIO_TogglePin+0x38>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d106      	bne.n	80016be <MCAL_GPIO_TogglePin+0x32>
		Dio_WriteChannel(channel_45,STD_HIGH);
 80016b0:	2101      	movs	r1, #1
 80016b2:	202d      	movs	r0, #45	; 0x2d
 80016b4:	f000 fae0 	bl	8001c78 <Dio_WriteChannel>
		x=0;
 80016b8:	4b02      	ldr	r3, [pc, #8]	; (80016c4 <MCAL_GPIO_TogglePin+0x38>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000128 	.word	0x20000128

080016c8 <Bluetooth_RX_Byte>:

void Bluetooth_RX_Byte(uint8* PRXBuffer)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	MCAL_USART_ReceiveData(USART1,PRXBuffer,Disable);
 80016d0:	2201      	movs	r2, #1
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <Bluetooth_RX_Byte+0x1c>)
 80016d6:	f000 fa47 	bl	8001b68 <MCAL_USART_ReceiveData>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40013800 	.word	0x40013800

080016e8 <USART1_IRQ_Call>:
	 }
}
#endif
#ifdef master_1
void USART1_IRQ_Call (void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	 MCAL_GPIO_TogglePin();
 80016ec:	f7ff ffce 	bl	800168c <MCAL_GPIO_TogglePin>
	 Bluetooth_RX_Byte(&DATA);
 80016f0:	4836      	ldr	r0, [pc, #216]	; (80017cc <USART1_IRQ_Call+0xe4>)
 80016f2:	f7ff ffe9 	bl	80016c8 <Bluetooth_RX_Byte>
	 switch (DATA)
 80016f6:	4b35      	ldr	r3, [pc, #212]	; (80017cc <USART1_IRQ_Call+0xe4>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	3b30      	subs	r3, #48	; 0x30
 80016fc:	2b23      	cmp	r3, #35	; 0x23
 80016fe:	d862      	bhi.n	80017c6 <USART1_IRQ_Call+0xde>
 8001700:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <USART1_IRQ_Call+0x20>)
 8001702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001706:	bf00      	nop
 8001708:	08001799 	.word	0x08001799
 800170c:	08001799 	.word	0x08001799
 8001710:	08001799 	.word	0x08001799
 8001714:	08001799 	.word	0x08001799
 8001718:	08001799 	.word	0x08001799
 800171c:	08001799 	.word	0x08001799
 8001720:	080017c7 	.word	0x080017c7
 8001724:	080017c7 	.word	0x080017c7
 8001728:	080017c7 	.word	0x080017c7
 800172c:	080017c7 	.word	0x080017c7
 8001730:	080017c7 	.word	0x080017c7
 8001734:	080017c7 	.word	0x080017c7
 8001738:	080017c7 	.word	0x080017c7
 800173c:	080017c7 	.word	0x080017c7
 8001740:	080017c7 	.word	0x080017c7
 8001744:	080017c7 	.word	0x080017c7
 8001748:	080017c7 	.word	0x080017c7
 800174c:	080017c7 	.word	0x080017c7
 8001750:	080017af 	.word	0x080017af
 8001754:	080017c7 	.word	0x080017c7
 8001758:	080017c7 	.word	0x080017c7
 800175c:	080017c7 	.word	0x080017c7
 8001760:	080017a9 	.word	0x080017a9
 8001764:	080017c7 	.word	0x080017c7
 8001768:	080017c7 	.word	0x080017c7
 800176c:	080017c7 	.word	0x080017c7
 8001770:	080017c7 	.word	0x080017c7
 8001774:	080017c7 	.word	0x080017c7
 8001778:	080017b5 	.word	0x080017b5
 800177c:	080017c7 	.word	0x080017c7
 8001780:	080017c7 	.word	0x080017c7
 8001784:	080017c7 	.word	0x080017c7
 8001788:	080017c7 	.word	0x080017c7
 800178c:	080017c7 	.word	0x080017c7
 8001790:	080017bb 	.word	0x080017bb
 8001794:	080017c1 	.word	0x080017c1
	 case '1':
	 case '2':
	 case '3':
	 case '4':
	 case '5':
		 Set_Speed(DATA-0x30);
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <USART1_IRQ_Call+0xe4>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	3b30      	subs	r3, #48	; 0x30
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 f815 	bl	80017d0 <Set_Speed>
		 break;
 80017a6:	e00f      	b.n	80017c8 <USART1_IRQ_Call+0xe0>
	case 'F':
		Forward_Dir();
 80017a8:	f000 f84a 	bl	8001840 <Forward_Dir>
		break;
 80017ac:	e00c      	b.n	80017c8 <USART1_IRQ_Call+0xe0>
	case 'B':
		Back_Dir();
 80017ae:	f000 f85b 	bl	8001868 <Back_Dir>
		break;
 80017b2:	e009      	b.n	80017c8 <USART1_IRQ_Call+0xe0>
	case 'L':
		Left_Dir();
 80017b4:	f000 f880 	bl	80018b8 <Left_Dir>
		break;
 80017b8:	e006      	b.n	80017c8 <USART1_IRQ_Call+0xe0>
	case 'R':
		Right_Dir();
 80017ba:	f000 f869 	bl	8001890 <Right_Dir>
		break;
 80017be:	e003      	b.n	80017c8 <USART1_IRQ_Call+0xe0>
	case 'S':
		Stop_Car();
 80017c0:	f000 f88e 	bl	80018e0 <Stop_Car>
		break;
 80017c4:	e000      	b.n	80017c8 <USART1_IRQ_Call+0xe0>
	default:
		break;
 80017c6:	bf00      	nop
	}
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200002b8 	.word	0x200002b8

080017d0 <Set_Speed>:
#include "RC_Car.h"
#include "Pwm.h"
#include "Dio.h"

void Set_Speed(uint8 Speed)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
	uint16 Duty=0;
 80017da:	2300      	movs	r3, #0
 80017dc:	81fb      	strh	r3, [r7, #14]
	Duty=6553*Speed;
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	461a      	mov	r2, r3
 80017e4:	0052      	lsls	r2, r2, #1
 80017e6:	441a      	add	r2, r3
 80017e8:	0092      	lsls	r2, r2, #2
 80017ea:	441a      	add	r2, r3
 80017ec:	4611      	mov	r1, r2
 80017ee:	0189      	lsls	r1, r1, #6
 80017f0:	1a8a      	subs	r2, r1, r2
 80017f2:	00d2      	lsls	r2, r2, #3
 80017f4:	4413      	add	r3, r2
 80017f6:	81fb      	strh	r3, [r7, #14]
	Pwm_SetDutyCycle (PwmChannelId_0,Duty);
 80017f8:	89fb      	ldrh	r3, [r7, #14]
 80017fa:	4619      	mov	r1, r3
 80017fc:	2000      	movs	r0, #0
 80017fe:	f002 f99d 	bl	8003b3c <Pwm_SetDutyCycle>
	Pwm_SetDutyCycle (PwmChannelId_1,Duty);
 8001802:	89fb      	ldrh	r3, [r7, #14]
 8001804:	4619      	mov	r1, r3
 8001806:	2001      	movs	r0, #1
 8001808:	f002 f998 	bl	8003b3c <Pwm_SetDutyCycle>
	Pwm_SetDutyCycle (PwmChannelId_2,Duty);
 800180c:	89fb      	ldrh	r3, [r7, #14]
 800180e:	4619      	mov	r1, r3
 8001810:	2002      	movs	r0, #2
 8001812:	f002 f993 	bl	8003b3c <Pwm_SetDutyCycle>
	Pwm_SetDutyCycle (PwmChannelId_3,Duty);
 8001816:	89fb      	ldrh	r3, [r7, #14]
 8001818:	4619      	mov	r1, r3
 800181a:	2003      	movs	r0, #3
 800181c:	f002 f98e 	bl	8003b3c <Pwm_SetDutyCycle>
	if(Speed==0)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d104      	bne.n	8001830 <Set_Speed+0x60>
	{
		//led
		Dio_WriteChannel(channel_23,STD_HIGH);
 8001826:	2101      	movs	r1, #1
 8001828:	2017      	movs	r0, #23
 800182a:	f000 fa25 	bl	8001c78 <Dio_WriteChannel>
	else
	{
		//led
		Dio_WriteChannel(channel_23,STD_LOW);
	}
}
 800182e:	e003      	b.n	8001838 <Set_Speed+0x68>
		Dio_WriteChannel(channel_23,STD_LOW);
 8001830:	2100      	movs	r1, #0
 8001832:	2017      	movs	r0, #23
 8001834:	f000 fa20 	bl	8001c78 <Dio_WriteChannel>
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <Forward_Dir>:
void Forward_Dir(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	Dio_WriteChannel(channel_16,STD_LOW);
 8001844:	2100      	movs	r1, #0
 8001846:	2010      	movs	r0, #16
 8001848:	f000 fa16 	bl	8001c78 <Dio_WriteChannel>
	Dio_WriteChannel(channel_17,STD_HIGH);
 800184c:	2101      	movs	r1, #1
 800184e:	2011      	movs	r0, #17
 8001850:	f000 fa12 	bl	8001c78 <Dio_WriteChannel>
	Dio_WriteChannel(channel_21,STD_LOW);
 8001854:	2100      	movs	r1, #0
 8001856:	2015      	movs	r0, #21
 8001858:	f000 fa0e 	bl	8001c78 <Dio_WriteChannel>
	Dio_WriteChannel(channel_22,STD_HIGH);
 800185c:	2101      	movs	r1, #1
 800185e:	2016      	movs	r0, #22
 8001860:	f000 fa0a 	bl	8001c78 <Dio_WriteChannel>
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <Back_Dir>:
void Back_Dir(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	Dio_WriteChannel(channel_16,STD_HIGH);
 800186c:	2101      	movs	r1, #1
 800186e:	2010      	movs	r0, #16
 8001870:	f000 fa02 	bl	8001c78 <Dio_WriteChannel>
	Dio_WriteChannel(channel_17,STD_LOW);
 8001874:	2100      	movs	r1, #0
 8001876:	2011      	movs	r0, #17
 8001878:	f000 f9fe 	bl	8001c78 <Dio_WriteChannel>
	Dio_WriteChannel(channel_21,STD_HIGH);
 800187c:	2101      	movs	r1, #1
 800187e:	2015      	movs	r0, #21
 8001880:	f000 f9fa 	bl	8001c78 <Dio_WriteChannel>
	Dio_WriteChannel(channel_22,STD_LOW);
 8001884:	2100      	movs	r1, #0
 8001886:	2016      	movs	r0, #22
 8001888:	f000 f9f6 	bl	8001c78 <Dio_WriteChannel>
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <Right_Dir>:
void Right_Dir(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	Dio_WriteChannel(channel_16,STD_LOW);
 8001894:	2100      	movs	r1, #0
 8001896:	2010      	movs	r0, #16
 8001898:	f000 f9ee 	bl	8001c78 <Dio_WriteChannel>
	Dio_WriteChannel(channel_17,STD_HIGH);
 800189c:	2101      	movs	r1, #1
 800189e:	2011      	movs	r0, #17
 80018a0:	f000 f9ea 	bl	8001c78 <Dio_WriteChannel>
	Dio_WriteChannel(channel_21,STD_HIGH);
 80018a4:	2101      	movs	r1, #1
 80018a6:	2015      	movs	r0, #21
 80018a8:	f000 f9e6 	bl	8001c78 <Dio_WriteChannel>
	Dio_WriteChannel(channel_22,STD_LOW);
 80018ac:	2100      	movs	r1, #0
 80018ae:	2016      	movs	r0, #22
 80018b0:	f000 f9e2 	bl	8001c78 <Dio_WriteChannel>
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <Left_Dir>:
void Left_Dir(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	Dio_WriteChannel(channel_16,STD_HIGH);
 80018bc:	2101      	movs	r1, #1
 80018be:	2010      	movs	r0, #16
 80018c0:	f000 f9da 	bl	8001c78 <Dio_WriteChannel>
	Dio_WriteChannel(channel_17,STD_LOW);
 80018c4:	2100      	movs	r1, #0
 80018c6:	2011      	movs	r0, #17
 80018c8:	f000 f9d6 	bl	8001c78 <Dio_WriteChannel>
	Dio_WriteChannel(channel_21,STD_LOW);
 80018cc:	2100      	movs	r1, #0
 80018ce:	2015      	movs	r0, #21
 80018d0:	f000 f9d2 	bl	8001c78 <Dio_WriteChannel>
	Dio_WriteChannel(channel_22,STD_HIGH);
 80018d4:	2101      	movs	r1, #1
 80018d6:	2016      	movs	r0, #22
 80018d8:	f000 f9ce 	bl	8001c78 <Dio_WriteChannel>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <Stop_Car>:
void Stop_Car(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	Dio_WriteChannel(channel_16,STD_LOW);
 80018e4:	2100      	movs	r1, #0
 80018e6:	2010      	movs	r0, #16
 80018e8:	f000 f9c6 	bl	8001c78 <Dio_WriteChannel>
	Dio_WriteChannel(channel_17,STD_LOW);
 80018ec:	2100      	movs	r1, #0
 80018ee:	2011      	movs	r0, #17
 80018f0:	f000 f9c2 	bl	8001c78 <Dio_WriteChannel>
	Dio_WriteChannel(channel_21,STD_LOW);
 80018f4:	2100      	movs	r1, #0
 80018f6:	2015      	movs	r0, #21
 80018f8:	f000 f9be 	bl	8001c78 <Dio_WriteChannel>
	Dio_WriteChannel(channel_22,STD_LOW);
 80018fc:	2100      	movs	r1, #0
 80018fe:	2016      	movs	r0, #22
 8001900:	f000 f9ba 	bl	8001c78 <Dio_WriteChannel>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <delay_ms>:

#include "delay.h"


void delay_ms(int ms)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	// timer2 work at 8 MHZ set psc 7999 ( each increment take 1ms )
	TIM4->PSC=7999;
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <delay_ms+0x50>)
 8001912:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
	// timer count at ms-1
	TIM4->ARR=ms-1;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	1e5a      	subs	r2, r3, #1
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <delay_ms+0x50>)
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
	// enable counter
	TIM4->CR1 |=1<<0;
 8001920:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <delay_ms+0x50>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <delay_ms+0x50>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6013      	str	r3, [r2, #0]
	// wait until counter reached compared register
	while(!(TIM4->SR & 1<<0));
 800192c:	bf00      	nop
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <delay_ms+0x50>)
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f9      	beq.n	800192e <delay_ms+0x26>
	// clear flag
	TIM4->SR=0;
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <delay_ms+0x50>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
	// disable counter
	TIM4->CR1 =0;
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <delay_ms+0x50>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
	TIM4->CNT=0;
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <delay_ms+0x50>)
 8001948:	2200      	movs	r2, #0
 800194a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40000800 	.word	0x40000800

0800195c <MCAL_Get_SYSCLC_FREQ>:
110: HCLK divided by 8
111: HCLK divided by 16
*/

uint32 MCAL_Get_SYSCLC_FREQ(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
	//00: HSI oscillator used as system clock
	//01: HSE oscillator used as system clock
	//10: PLL used as system clock
	//11: Not applicable

	switch(RCC->CFGR >> 2)
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <MCAL_Get_SYSCLC_FREQ+0x28>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <MCAL_Get_SYSCLC_FREQ+0x14>
 800196a:	2b01      	cmp	r3, #1
 800196c:	d002      	beq.n	8001974 <MCAL_Get_SYSCLC_FREQ+0x18>
 800196e:	e003      	b.n	8001978 <MCAL_Get_SYSCLC_FREQ+0x1c>
	{
	case 0:
		return HSI_oscillator_clock ;
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <MCAL_Get_SYSCLC_FREQ+0x2c>)
 8001972:	e002      	b.n	800197a <MCAL_Get_SYSCLC_FREQ+0x1e>
		break;
	case 1:
		return HSE_oscillator_clock ;
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <MCAL_Get_SYSCLC_FREQ+0x30>)
 8001976:	e000      	b.n	800197a <MCAL_Get_SYSCLC_FREQ+0x1e>
		break;
	}
	return 0;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	007a1200 	.word	0x007a1200
 800198c:	00f42400 	.word	0x00f42400

08001990 <MCAL_Get_PCLC1_FREQ>:
{
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return ( MCAL_Get_SYSCLC_FREQ() >> HPRE_table[ ( RCC->CFGR >> 4 ) & 0XF ] ) ;
}
uint32 MCAL_Get_PCLC1_FREQ(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return ( MCAL_Get_SYSCLC_FREQ() >> PPRE1_table[ ( RCC->CFGR >> 8 ) & 0X11 ] ) ;
 8001994:	f7ff ffe2 	bl	800195c <MCAL_Get_SYSCLC_FREQ>
 8001998:	4601      	mov	r1, r0
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <MCAL_Get_PCLC1_FREQ+0x20>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	f003 0311 	and.w	r3, r3, #17
 80019a4:	4a03      	ldr	r2, [pc, #12]	; (80019b4 <MCAL_Get_PCLC1_FREQ+0x24>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000
 80019b4:	08004848 	.word	0x08004848

080019b8 <MCAL_Get_PCLC2_FREQ>:
uint32 MCAL_Get_PCLC2_FREQ(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return ( MCAL_Get_SYSCLC_FREQ() >> PPRE1_table[ ( RCC->CFGR >> 11 ) & 0X11 ] ) ;
 80019bc:	f7ff ffce 	bl	800195c <MCAL_Get_SYSCLC_FREQ>
 80019c0:	4601      	mov	r1, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <MCAL_Get_PCLC2_FREQ+0x20>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	0adb      	lsrs	r3, r3, #11
 80019c8:	f003 0311 	and.w	r3, r3, #17
 80019cc:	4a03      	ldr	r2, [pc, #12]	; (80019dc <MCAL_Get_PCLC2_FREQ+0x24>)
 80019ce:	5cd3      	ldrb	r3, [r2, r3]
 80019d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	08004848 	.word	0x08004848

080019e0 <MCAL_USART_Init>:
* @param [in] 		-USARTx:  specified USARTx x=[ 1 : 3 ]
* @retval 			-none
* Note				-stm32f103c6 has USART (1---3 )
*/
void MCAL_USART_Init( USART_TypeDef* USARTx , USART_config_t* USART_Config )
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
	uint32 PCLK , BRR ;

	// Enable clock for usartx
	 if ( USARTx == USART1 )
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a58      	ldr	r2, [pc, #352]	; (8001b50 <MCAL_USART_Init+0x170>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d109      	bne.n	8001a06 <MCAL_USART_Init+0x26>
	 {
		 g_USART_Config[0] = USART_Config ;// configuration the USART1
 80019f2:	4a58      	ldr	r2, [pc, #352]	; (8001b54 <MCAL_USART_Init+0x174>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6013      	str	r3, [r2, #0]
		 RCC_USART1_CLK_Enable() ;
 80019f8:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <MCAL_USART_Init+0x178>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a56      	ldr	r2, [pc, #344]	; (8001b58 <MCAL_USART_Init+0x178>)
 80019fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	e01a      	b.n	8001a3c <MCAL_USART_Init+0x5c>
	 }
	 else if ( USARTx == USART2 )
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a54      	ldr	r2, [pc, #336]	; (8001b5c <MCAL_USART_Init+0x17c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d109      	bne.n	8001a22 <MCAL_USART_Init+0x42>
	 {
		 g_USART_Config[1] = USART_Config ;// configuration the USART2
 8001a0e:	4a51      	ldr	r2, [pc, #324]	; (8001b54 <MCAL_USART_Init+0x174>)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	6053      	str	r3, [r2, #4]
		 RCC_USART2_CLK_Enable() ;
 8001a14:	4b50      	ldr	r3, [pc, #320]	; (8001b58 <MCAL_USART_Init+0x178>)
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	4a4f      	ldr	r2, [pc, #316]	; (8001b58 <MCAL_USART_Init+0x178>)
 8001a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1e:	61d3      	str	r3, [r2, #28]
 8001a20:	e00c      	b.n	8001a3c <MCAL_USART_Init+0x5c>
	 }
	 else if ( USARTx == USART3 )
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4e      	ldr	r2, [pc, #312]	; (8001b60 <MCAL_USART_Init+0x180>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d108      	bne.n	8001a3c <MCAL_USART_Init+0x5c>
	 {
		 g_USART_Config[2] = USART_Config ;// configuration the USART3
 8001a2a:	4a4a      	ldr	r2, [pc, #296]	; (8001b54 <MCAL_USART_Init+0x174>)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	6093      	str	r3, [r2, #8]
		 RCC_USART3_CLK_Enable() ;
 8001a30:	4b49      	ldr	r3, [pc, #292]	; (8001b58 <MCAL_USART_Init+0x178>)
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	4a48      	ldr	r2, [pc, #288]	; (8001b58 <MCAL_USART_Init+0x178>)
 8001a36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3a:	61d3      	str	r3, [r2, #28]
	 }

	 // Enable USARTx
	 USARTx->CR1 |= 1 << 13 ;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	60da      	str	r2, [r3, #12]

	 //Enable mode
	 USARTx->CR1 |= USART_Config->MODE ;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	7812      	ldrb	r2, [r2, #0]
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60da      	str	r2, [r3, #12]

	 // number of data bit
	 USARTx->CR1 |= USART_Config->NUM_DATA_BIT ;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	7852      	ldrb	r2, [r2, #1]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	60da      	str	r2, [r3, #12]

	 //set parity
	 USARTx->CR1 |= USART_Config->PARITY ;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	7a12      	ldrb	r2, [r2, #8]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	60da      	str	r2, [r3, #12]

	 // number of  stop bit
	 USARTx->CR2 |= USART_Config->NUM_STOP_BIT ;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	7892      	ldrb	r2, [r2, #2]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	611a      	str	r2, [r3, #16]

	 // hardware flow control
	 USARTx->CR3 |= USART_Config->HWFLOWCTL ;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	7a52      	ldrb	r2, [r2, #9]
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	615a      	str	r2, [r3, #20]

	 // baudrate
	 if ( USARTx == USART1 )
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a2f      	ldr	r2, [pc, #188]	; (8001b50 <MCAL_USART_Init+0x170>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d103      	bne.n	8001a9e <MCAL_USART_Init+0xbe>
	 {
		 PCLK = MCAL_Get_PCLC2_FREQ() ;
 8001a96:	f7ff ff8f 	bl	80019b8 <MCAL_Get_PCLC2_FREQ>
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	e002      	b.n	8001aa4 <MCAL_USART_Init+0xc4>
	 }
	 else
	 {
		 PCLK = MCAL_Get_PCLC1_FREQ() ;
 8001a9e:	f7ff ff77 	bl	8001990 <MCAL_Get_PCLC1_FREQ>
 8001aa2:	60f8      	str	r0, [r7, #12]
	 }
	 BRR =  USART_BRR_Reg( PCLK , USART_Config->BAUDRATE ) ;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab0:	0119      	lsls	r1, r3, #4
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	009a      	lsls	r2, r3, #2
 8001abc:	441a      	add	r2, r3
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad4:	2064      	movs	r0, #100	; 0x64
 8001ad6:	fb00 f303 	mul.w	r3, r0, r3
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2264      	movs	r2, #100	; 0x64
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	430b      	orrs	r3, r1
 8001ae8:	60bb      	str	r3, [r7, #8]
	 USARTx->BRR = BRR ;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	609a      	str	r2, [r3, #8]

	 // Enable or Disable interrupt
	 if ( USART_Config->IRQ_EN != USART_IRQ_ENABLE_Disable )
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	7a9b      	ldrb	r3, [r3, #10]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d026      	beq.n	8001b46 <MCAL_USART_Init+0x166>
	 {
		 USARTx->CR1 |= USART_Config->IRQ_EN ;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	7a92      	ldrb	r2, [r2, #10]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	60da      	str	r2, [r3, #12]

		 // en NVIC
		 if ( USARTx == USART1 )
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a11      	ldr	r2, [pc, #68]	; (8001b50 <MCAL_USART_Init+0x170>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d106      	bne.n	8001b1c <MCAL_USART_Init+0x13c>
		 {
			 NVIC_IRQ37_USART1_Enable() ;
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <MCAL_USART_Init+0x184>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <MCAL_USART_Init+0x184>)
 8001b14:	f043 0320 	orr.w	r3, r3, #32
 8001b18:	6013      	str	r3, [r2, #0]
		 else if ( USARTx == USART3 )
		 {
			 NVIC_IRQ39_USART3_Enable() ;
		 }
	 }
}
 8001b1a:	e014      	b.n	8001b46 <MCAL_USART_Init+0x166>
		 else if ( USARTx == USART2 )
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <MCAL_USART_Init+0x17c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d106      	bne.n	8001b32 <MCAL_USART_Init+0x152>
			 NVIC_IRQ38_USART2_Enable() ;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <MCAL_USART_Init+0x184>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <MCAL_USART_Init+0x184>)
 8001b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b2e:	6013      	str	r3, [r2, #0]
}
 8001b30:	e009      	b.n	8001b46 <MCAL_USART_Init+0x166>
		 else if ( USARTx == USART3 )
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <MCAL_USART_Init+0x180>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d105      	bne.n	8001b46 <MCAL_USART_Init+0x166>
			 NVIC_IRQ39_USART3_Enable() ;
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <MCAL_USART_Init+0x184>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <MCAL_USART_Init+0x184>)
 8001b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b44:	6013      	str	r3, [r2, #0]
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40013800 	.word	0x40013800
 8001b54:	2000012c 	.word	0x2000012c
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40004400 	.word	0x40004400
 8001b60:	40004800 	.word	0x40004800
 8001b64:	e000e104 	.word	0xe000e104

08001b68 <MCAL_USART_ReceiveData>:
* @param [out] 		-PRXBuffer: pointer to buffer to Receive data
* @retval 			-none
* Note				-stm32f103c6 has USART (1---3 )
*/
void MCAL_USART_ReceiveData( USART_TypeDef* USARTx , uint16* PRXBuffer , enum polling_mechanism polling_EN)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	4613      	mov	r3, r2
 8001b74:	71fb      	strb	r3, [r7, #7]
	// at parity is enable the MSB of data Replace whit parity bit
	if ( polling_EN == Enable )
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d106      	bne.n	8001b8a <MCAL_USART_ReceiveData+0x22>
		while( ! ( USARTx->SR & 1<<5 ) ) ;
 8001b7c:	bf00      	nop
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0320 	and.w	r3, r3, #32
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f9      	beq.n	8001b7e <MCAL_USART_ReceiveData+0x16>
	if( USARTx == USART1 )
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4a27      	ldr	r2, [pc, #156]	; (8001c2c <MCAL_USART_ReceiveData+0xc4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d114      	bne.n	8001bbc <MCAL_USART_ReceiveData+0x54>
				*((uint16*)PRXBuffer) = ( USARTx->DR & (uint8)0xff);
			}
		}
		else
		{
			if ( g_USART_Config[0]->PARITY == USART_PARITY_Disable )
 8001b92:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <MCAL_USART_ReceiveData+0xc8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	7a1b      	ldrb	r3, [r3, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d107      	bne.n	8001bac <MCAL_USART_ReceiveData+0x44>
			{
				*((uint16*)PRXBuffer) = ( USARTx->DR & (uint8)0xff);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	801a      	strh	r2, [r3, #0]
 8001baa:	e007      	b.n	8001bbc <MCAL_USART_ReceiveData+0x54>
			}
			else
			{
				*((uint16*)PRXBuffer) = ( USARTx->DR & (uint8)0x7f);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	if( USARTx == USART2 )
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a1d      	ldr	r2, [pc, #116]	; (8001c34 <MCAL_USART_ReceiveData+0xcc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d114      	bne.n	8001bee <MCAL_USART_ReceiveData+0x86>
				*((uint16*)PRXBuffer) = ( USARTx->DR & (uint8)0xff);
			}
		}
		else
		{
			if ( g_USART_Config[1]->PARITY == USART_PARITY_Disable )
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <MCAL_USART_ReceiveData+0xc8>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	7a1b      	ldrb	r3, [r3, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d107      	bne.n	8001bde <MCAL_USART_ReceiveData+0x76>
			{
				*((uint16*)PRXBuffer) = ( USARTx->DR & (uint8)0xff);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	801a      	strh	r2, [r3, #0]
 8001bdc:	e007      	b.n	8001bee <MCAL_USART_ReceiveData+0x86>
			}
			else
			{
				*((uint16*)PRXBuffer) = ( USARTx->DR & (uint8)0x7f);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	if( USARTx == USART3 )
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4a11      	ldr	r2, [pc, #68]	; (8001c38 <MCAL_USART_ReceiveData+0xd0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d114      	bne.n	8001c20 <MCAL_USART_ReceiveData+0xb8>
				*((uint16*)PRXBuffer) = ( USARTx->DR & (uint8)0xff);
			}
		}
		else
		{
			if ( g_USART_Config[2]->PARITY == USART_PARITY_Disable )
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <MCAL_USART_ReceiveData+0xc8>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	7a1b      	ldrb	r3, [r3, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d107      	bne.n	8001c10 <MCAL_USART_ReceiveData+0xa8>
			{
				*((uint16*)PRXBuffer) = ( USARTx->DR & (uint8)0xff);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	801a      	strh	r2, [r3, #0]
				*((uint16*)PRXBuffer) = ( USARTx->DR & (uint8)0x7f);
			}
		}
	}

}
 8001c0e:	e007      	b.n	8001c20 <MCAL_USART_ReceiveData+0xb8>
				*((uint16*)PRXBuffer) = ( USARTx->DR & (uint8)0x7f);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	801a      	strh	r2, [r3, #0]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40013800 	.word	0x40013800
 8001c30:	2000012c 	.word	0x2000012c
 8001c34:	40004400 	.word	0x40004400
 8001c38:	40004800 	.word	0x40004800

08001c3c <USART1_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void USART1_IRQHandler (void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	g_USART_Config[0]->P_IRQ_CALL() ;
 8001c40:	4b02      	ldr	r3, [pc, #8]	; (8001c4c <USART1_IRQHandler+0x10>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	4798      	blx	r3
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	2000012c 	.word	0x2000012c

08001c50 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	g_USART_Config[1]->P_IRQ_CALL() ;
 8001c54:	4b02      	ldr	r3, [pc, #8]	; (8001c60 <USART2_IRQHandler+0x10>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	4798      	blx	r3
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2000012c 	.word	0x2000012c

08001c64 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	g_USART_Config[2]->P_IRQ_CALL() ;
 8001c68:	4b02      	ldr	r3, [pc, #8]	; (8001c74 <USART3_IRQHandler+0x10>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	4798      	blx	r3
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	2000012c 	.word	0x2000012c

08001c78 <Dio_WriteChannel>:
* Parameters (out)	:	None
* Return value		:	None
* Description		:	Service to set a level of a channel.
***********************************************************************/
void Dio_WriteChannel (Dio_ChannelType ChannelId,Dio_LevelType Level)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	460a      	mov	r2, r1
 8001c82:	80fb      	strh	r3, [r7, #6]
 8001c84:	4613      	mov	r3, r2
 8001c86:	717b      	strb	r3, [r7, #5]
	uint16 Channel_Pos=0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	81fb      	strh	r3, [r7, #14]
	 */
	/*
	 [SWS_Dio_00029] If the specified channel is configured as an input channel, the
	 Dio_WriteChannel function shall have no influence on the physical output.
	 */
	if(ChannelId<channel_8)
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	2b07      	cmp	r3, #7
 8001c90:	d82a      	bhi.n	8001ce8 <Dio_WriteChannel+0x70>
	{
		Channel_Pos=ChannelId-0;
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	81fb      	strh	r3, [r7, #14]
		//output
		if((GPIOA->CRL&(3<<Channel_Pos*4))!=0)
 8001c96:	4b74      	ldr	r3, [pc, #464]	; (8001e68 <Dio_WriteChannel+0x1f0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	89fa      	ldrh	r2, [r7, #14]
 8001c9c:	0092      	lsls	r2, r2, #2
 8001c9e:	2103      	movs	r1, #3
 8001ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 80d9 	beq.w	8001e5e <Dio_WriteChannel+0x1e6>
		{
			if(Level==STD_HIGH)
 8001cac:	797b      	ldrb	r3, [r7, #5]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d10a      	bne.n	8001cc8 <Dio_WriteChannel+0x50>
			{
				GPIOA->ODR|=(1<<(ChannelId-0));
 8001cb2:	4b6d      	ldr	r3, [pc, #436]	; (8001e68 <Dio_WriteChannel+0x1f0>)
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	88fa      	ldrh	r2, [r7, #6]
 8001cb8:	2101      	movs	r1, #1
 8001cba:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4a69      	ldr	r2, [pc, #420]	; (8001e68 <Dio_WriteChannel+0x1f0>)
 8001cc2:	430b      	orrs	r3, r1
 8001cc4:	60d3      	str	r3, [r2, #12]
	}
	else
	{
		//Error
	}
}
 8001cc6:	e0ca      	b.n	8001e5e <Dio_WriteChannel+0x1e6>
			else if(Level==STD_LOW)
 8001cc8:	797b      	ldrb	r3, [r7, #5]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 80c7 	bne.w	8001e5e <Dio_WriteChannel+0x1e6>
				GPIOA->ODR&=~(1<<(ChannelId-0));
 8001cd0:	4b65      	ldr	r3, [pc, #404]	; (8001e68 <Dio_WriteChannel+0x1f0>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	88fa      	ldrh	r2, [r7, #6]
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cdc:	43d2      	mvns	r2, r2
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4a61      	ldr	r2, [pc, #388]	; (8001e68 <Dio_WriteChannel+0x1f0>)
 8001ce2:	400b      	ands	r3, r1
 8001ce4:	60d3      	str	r3, [r2, #12]
}
 8001ce6:	e0ba      	b.n	8001e5e <Dio_WriteChannel+0x1e6>
	else if(ChannelId<channel_16)
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	2b0f      	cmp	r3, #15
 8001cec:	d82b      	bhi.n	8001d46 <Dio_WriteChannel+0xce>
		Channel_Pos=ChannelId-8;
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	3b08      	subs	r3, #8
 8001cf2:	81fb      	strh	r3, [r7, #14]
		if((GPIOA->CRH&(3<<Channel_Pos*4))!=0)
 8001cf4:	4b5c      	ldr	r3, [pc, #368]	; (8001e68 <Dio_WriteChannel+0x1f0>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	89fa      	ldrh	r2, [r7, #14]
 8001cfa:	0092      	lsls	r2, r2, #2
 8001cfc:	2103      	movs	r1, #3
 8001cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80aa 	beq.w	8001e5e <Dio_WriteChannel+0x1e6>
			if(Level==STD_HIGH)
 8001d0a:	797b      	ldrb	r3, [r7, #5]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d10a      	bne.n	8001d26 <Dio_WriteChannel+0xae>
				GPIOA->ODR|=(1<<(ChannelId-0));
 8001d10:	4b55      	ldr	r3, [pc, #340]	; (8001e68 <Dio_WriteChannel+0x1f0>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	88fa      	ldrh	r2, [r7, #6]
 8001d16:	2101      	movs	r1, #1
 8001d18:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4a52      	ldr	r2, [pc, #328]	; (8001e68 <Dio_WriteChannel+0x1f0>)
 8001d20:	430b      	orrs	r3, r1
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	e09b      	b.n	8001e5e <Dio_WriteChannel+0x1e6>
			else if(Level==STD_LOW)
 8001d26:	797b      	ldrb	r3, [r7, #5]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f040 8098 	bne.w	8001e5e <Dio_WriteChannel+0x1e6>
				GPIOA->ODR&=~(1<<(ChannelId-0));
 8001d2e:	4b4e      	ldr	r3, [pc, #312]	; (8001e68 <Dio_WriteChannel+0x1f0>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	88fa      	ldrh	r2, [r7, #6]
 8001d34:	2101      	movs	r1, #1
 8001d36:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3a:	43d2      	mvns	r2, r2
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4a4a      	ldr	r2, [pc, #296]	; (8001e68 <Dio_WriteChannel+0x1f0>)
 8001d40:	400b      	ands	r3, r1
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	e08b      	b.n	8001e5e <Dio_WriteChannel+0x1e6>
	else if(ChannelId<channel_24)
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	2b17      	cmp	r3, #23
 8001d4a:	d82b      	bhi.n	8001da4 <Dio_WriteChannel+0x12c>
		Channel_Pos=ChannelId-16;
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	3b10      	subs	r3, #16
 8001d50:	81fb      	strh	r3, [r7, #14]
		if((GPIOB->CRL&(3<<Channel_Pos*4))!=0)
 8001d52:	4b46      	ldr	r3, [pc, #280]	; (8001e6c <Dio_WriteChannel+0x1f4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	89fa      	ldrh	r2, [r7, #14]
 8001d58:	0092      	lsls	r2, r2, #2
 8001d5a:	2103      	movs	r1, #3
 8001d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d07b      	beq.n	8001e5e <Dio_WriteChannel+0x1e6>
			if(Level==STD_HIGH)
 8001d66:	797b      	ldrb	r3, [r7, #5]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d10b      	bne.n	8001d84 <Dio_WriteChannel+0x10c>
				GPIOB->ODR|=(1<<(ChannelId-16));
 8001d6c:	4b3f      	ldr	r3, [pc, #252]	; (8001e6c <Dio_WriteChannel+0x1f4>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	88fa      	ldrh	r2, [r7, #6]
 8001d72:	3a10      	subs	r2, #16
 8001d74:	2101      	movs	r1, #1
 8001d76:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4a3b      	ldr	r2, [pc, #236]	; (8001e6c <Dio_WriteChannel+0x1f4>)
 8001d7e:	430b      	orrs	r3, r1
 8001d80:	60d3      	str	r3, [r2, #12]
}
 8001d82:	e06c      	b.n	8001e5e <Dio_WriteChannel+0x1e6>
			else if(Level==STD_LOW)
 8001d84:	797b      	ldrb	r3, [r7, #5]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d169      	bne.n	8001e5e <Dio_WriteChannel+0x1e6>
				GPIOB->ODR&=~(1<<(ChannelId-16));
 8001d8a:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <Dio_WriteChannel+0x1f4>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	88fa      	ldrh	r2, [r7, #6]
 8001d90:	3a10      	subs	r2, #16
 8001d92:	2101      	movs	r1, #1
 8001d94:	fa01 f202 	lsl.w	r2, r1, r2
 8001d98:	43d2      	mvns	r2, r2
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4a33      	ldr	r2, [pc, #204]	; (8001e6c <Dio_WriteChannel+0x1f4>)
 8001d9e:	400b      	ands	r3, r1
 8001da0:	60d3      	str	r3, [r2, #12]
}
 8001da2:	e05c      	b.n	8001e5e <Dio_WriteChannel+0x1e6>
	else if(ChannelId<channel_32)
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	2b1f      	cmp	r3, #31
 8001da8:	d82b      	bhi.n	8001e02 <Dio_WriteChannel+0x18a>
		Channel_Pos=ChannelId-24;
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	3b18      	subs	r3, #24
 8001dae:	81fb      	strh	r3, [r7, #14]
		if((GPIOB->CRH&(3<<Channel_Pos*4))!=0)
 8001db0:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <Dio_WriteChannel+0x1f4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	89fa      	ldrh	r2, [r7, #14]
 8001db6:	0092      	lsls	r2, r2, #2
 8001db8:	2103      	movs	r1, #3
 8001dba:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d04c      	beq.n	8001e5e <Dio_WriteChannel+0x1e6>
			if(Level==STD_HIGH)
 8001dc4:	797b      	ldrb	r3, [r7, #5]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d10b      	bne.n	8001de2 <Dio_WriteChannel+0x16a>
				GPIOB->ODR|=(1<<(ChannelId-16));
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <Dio_WriteChannel+0x1f4>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	88fa      	ldrh	r2, [r7, #6]
 8001dd0:	3a10      	subs	r2, #16
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4a24      	ldr	r2, [pc, #144]	; (8001e6c <Dio_WriteChannel+0x1f4>)
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	60d3      	str	r3, [r2, #12]
}
 8001de0:	e03d      	b.n	8001e5e <Dio_WriteChannel+0x1e6>
			else if(Level==STD_LOW)
 8001de2:	797b      	ldrb	r3, [r7, #5]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d13a      	bne.n	8001e5e <Dio_WriteChannel+0x1e6>
				GPIOB->ODR&=~(1<<(ChannelId-16));
 8001de8:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <Dio_WriteChannel+0x1f4>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	88fa      	ldrh	r2, [r7, #6]
 8001dee:	3a10      	subs	r2, #16
 8001df0:	2101      	movs	r1, #1
 8001df2:	fa01 f202 	lsl.w	r2, r1, r2
 8001df6:	43d2      	mvns	r2, r2
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <Dio_WriteChannel+0x1f4>)
 8001dfc:	400b      	ands	r3, r1
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	e02d      	b.n	8001e5e <Dio_WriteChannel+0x1e6>
	else if(ChannelId<=channel_47)
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	2b2f      	cmp	r3, #47	; 0x2f
 8001e06:	d82a      	bhi.n	8001e5e <Dio_WriteChannel+0x1e6>
		Channel_Pos=ChannelId-40;
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	3b28      	subs	r3, #40	; 0x28
 8001e0c:	81fb      	strh	r3, [r7, #14]
		if((GPIOC->CRH&(3<<Channel_Pos*4))!=0)
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <Dio_WriteChannel+0x1f8>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	89fa      	ldrh	r2, [r7, #14]
 8001e14:	0092      	lsls	r2, r2, #2
 8001e16:	2103      	movs	r1, #3
 8001e18:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d01d      	beq.n	8001e5e <Dio_WriteChannel+0x1e6>
			if(Level==STD_HIGH)
 8001e22:	797b      	ldrb	r3, [r7, #5]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d10b      	bne.n	8001e40 <Dio_WriteChannel+0x1c8>
				GPIOC->ODR|=(1<<(ChannelId-32));
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <Dio_WriteChannel+0x1f8>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	88fa      	ldrh	r2, [r7, #6]
 8001e2e:	3a20      	subs	r2, #32
 8001e30:	2101      	movs	r1, #1
 8001e32:	fa01 f202 	lsl.w	r2, r1, r2
 8001e36:	4611      	mov	r1, r2
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <Dio_WriteChannel+0x1f8>)
 8001e3a:	430b      	orrs	r3, r1
 8001e3c:	60d3      	str	r3, [r2, #12]
}
 8001e3e:	e00e      	b.n	8001e5e <Dio_WriteChannel+0x1e6>
			else if(Level==STD_LOW)
 8001e40:	797b      	ldrb	r3, [r7, #5]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10b      	bne.n	8001e5e <Dio_WriteChannel+0x1e6>
				GPIOC->ODR&=~(1<<(ChannelId-32));
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <Dio_WriteChannel+0x1f8>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	88fa      	ldrh	r2, [r7, #6]
 8001e4c:	3a20      	subs	r2, #32
 8001e4e:	2101      	movs	r1, #1
 8001e50:	fa01 f202 	lsl.w	r2, r1, r2
 8001e54:	43d2      	mvns	r2, r2
 8001e56:	4611      	mov	r1, r2
 8001e58:	4a05      	ldr	r2, [pc, #20]	; (8001e70 <Dio_WriteChannel+0x1f8>)
 8001e5a:	400b      	ands	r3, r1
 8001e5c:	60d3      	str	r3, [r2, #12]
}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	40010800 	.word	0x40010800
 8001e6c:	40010c00 	.word	0x40010c00
 8001e70:	40011000 	.word	0x40011000

08001e74 <Icu_Init>:
* Parameters (out)	:	None
* Return value		:	None
* Description		:	This function initializes the driver.
***********************************************************************/
void Icu_Init (const Icu_ConfigType* ConfigPtr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	#if(IcuDevErrorDetect==TRUE)
	if(Icu_State==Icu_INITIALIZED)
 8001e7c:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <Icu_Init+0x168>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d106      	bne.n	8001e92 <Icu_Init+0x1e>
		Det_ReportError(ICU_VERSION_ID,0, Icu_Init_ID, ICU_E_ALREADY_INITIALIZED);
 8001e84:	2317      	movs	r3, #23
 8001e86:	2200      	movs	r2, #0
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2017      	movs	r0, #23
 8001e8c:	f7ff fbc6 	bl	800161c <Det_ReportError>
 8001e90:	e002      	b.n	8001e98 <Icu_Init+0x24>
	else
		Icu_config=ConfigPtr;
 8001e92:	4a53      	ldr	r2, [pc, #332]	; (8001fe0 <Icu_Init+0x16c>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6013      	str	r3, [r2, #0]
	#endif
	//[SWS_Icu_00061] [The function Icu_Init shall disable all notifications.]
	for(uint8 index=0;index<ConfigPtr->IcuConfigSet.IcuMaxChannel;index++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	e00d      	b.n	8001eba <Icu_Init+0x46>
	{
		Icu_DisableNotification(ConfigPtr->IcuConfigSet.IcuChannel[index].IcuChannelId);
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3301      	adds	r3, #1
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f8a4 	bl	8001ffc <Icu_DisableNotification>
	for(uint8 index=0;index<ConfigPtr->IcuConfigSet.IcuMaxChannel;index++)
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	73fb      	strb	r3, [r7, #15]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d3ec      	bcc.n	8001e9e <Icu_Init+0x2a>
	}
	//[SWS_Icu_00040] [The function Icu_Init shall set all used ICU channels to status ICU_IDLE.]
	for(uint8 index=0;index<ConfigPtr->IcuConfigSet.IcuMaxChannel;index++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73bb      	strb	r3, [r7, #14]
 8001ec8:	e006      	b.n	8001ed8 <Icu_Init+0x64>
	{
		Channel_config[index]=ICU_IDLE;
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	4a45      	ldr	r2, [pc, #276]	; (8001fe4 <Icu_Init+0x170>)
 8001ece:	2101      	movs	r1, #1
 8001ed0:	54d1      	strb	r1, [r2, r3]
	for(uint8 index=0;index<ConfigPtr->IcuConfigSet.IcuMaxChannel;index++)
 8001ed2:	7bbb      	ldrb	r3, [r7, #14]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	73bb      	strb	r3, [r7, #14]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	7bba      	ldrb	r2, [r7, #14]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d3f3      	bcc.n	8001eca <Icu_Init+0x56>
	}
	//[SWS_Icu_00060] [The function Icu_Init shall set the module mode to ICU_MODE_NORMAL.]
	ICU_MODE=ICU_MODE_NORMAL;
 8001ee2:	4b41      	ldr	r3, [pc, #260]	; (8001fe8 <Icu_Init+0x174>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
	/*
	 [SWS_Icu_00054] ⌈The function Icu_Init shall only set the resources that are
	 configured in the configuration file (including clearing of pending interrupt flags).
	 */
	TIM3->SR=0X0000;
 8001ee8:	4b40      	ldr	r3, [pc, #256]	; (8001fec <Icu_Init+0x178>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
	//set Prescalers 7+1=8 TIM4 Clock=8mhz/8=1mh
	TIM3->PSC=7;
 8001eee:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <Icu_Init+0x178>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28
	//set top value
	TIM3->ARR=0XFFFF;
 8001ef4:	4b3d      	ldr	r3, [pc, #244]	; (8001fec <Icu_Init+0x178>)
 8001ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c
	//CC1,CC2,CC3 and CC4 channel is configured as input, ICx is mapped on TIx
	TIM3->CCMR1 =0x3131;
 8001efc:	4b3b      	ldr	r3, [pc, #236]	; (8001fec <Icu_Init+0x178>)
 8001efe:	f243 1231 	movw	r2, #12593	; 0x3131
 8001f02:	619a      	str	r2, [r3, #24]
	TIM3->CCMR2 =0x3131;
 8001f04:	4b39      	ldr	r3, [pc, #228]	; (8001fec <Icu_Init+0x178>)
 8001f06:	f243 1231 	movw	r2, #12593	; 0x3131
 8001f0a:	61da      	str	r2, [r3, #28]
	// Enable capture on CC1,CC2,CC3 and CC4
	TIM3->CCER |= (0X1111<<0);
 8001f0c:	4b37      	ldr	r3, [pc, #220]	; (8001fec <Icu_Init+0x178>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a36      	ldr	r2, [pc, #216]	; (8001fec <Icu_Init+0x178>)
 8001f12:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8001f16:	f043 0311 	orr.w	r3, r3, #17
 8001f1a:	6213      	str	r3, [r2, #32]
	for(uint8 index=0;index<ConfigPtr->IcuConfigSet.IcuMaxChannel;index++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	737b      	strb	r3, [r7, #13]
 8001f20:	e032      	b.n	8001f88 <Icu_Init+0x114>
	{
		switch (ConfigPtr->IcuConfigSet.IcuChannel[index].IcuDefaultStartEdge)
 8001f22:	7b7a      	ldrb	r2, [r7, #13]
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3302      	adds	r3, #2
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <Icu_Init+0xc8>
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d012      	beq.n	8001f60 <Icu_Init+0xec>
			Channel_Activation[index]=ICU_FALLING_EDGE;
			// inverted: capture is done on a falling edge of ICx.
			TIM3->CCER |=(1<<(1+(index*4)));
			break;
		default:
			break;
 8001f3a:	e022      	b.n	8001f82 <Icu_Init+0x10e>
			Channel_Activation[index]=ICU_RISING_EDGE;
 8001f3c:	7b7b      	ldrb	r3, [r7, #13]
 8001f3e:	4a2c      	ldr	r2, [pc, #176]	; (8001ff0 <Icu_Init+0x17c>)
 8001f40:	2100      	movs	r1, #0
 8001f42:	54d1      	strb	r1, [r2, r3]
			TIM3->CCER &=~(1<<(1+(index*4)));
 8001f44:	4b29      	ldr	r3, [pc, #164]	; (8001fec <Icu_Init+0x178>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	7b7a      	ldrb	r2, [r7, #13]
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	3201      	adds	r2, #1
 8001f4e:	2101      	movs	r1, #1
 8001f50:	fa01 f202 	lsl.w	r2, r1, r2
 8001f54:	43d2      	mvns	r2, r2
 8001f56:	4611      	mov	r1, r2
 8001f58:	4a24      	ldr	r2, [pc, #144]	; (8001fec <Icu_Init+0x178>)
 8001f5a:	400b      	ands	r3, r1
 8001f5c:	6213      	str	r3, [r2, #32]
			break;
 8001f5e:	e010      	b.n	8001f82 <Icu_Init+0x10e>
			Channel_Activation[index]=ICU_FALLING_EDGE;
 8001f60:	7b7b      	ldrb	r3, [r7, #13]
 8001f62:	4a23      	ldr	r2, [pc, #140]	; (8001ff0 <Icu_Init+0x17c>)
 8001f64:	2101      	movs	r1, #1
 8001f66:	54d1      	strb	r1, [r2, r3]
			TIM3->CCER |=(1<<(1+(index*4)));
 8001f68:	4b20      	ldr	r3, [pc, #128]	; (8001fec <Icu_Init+0x178>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	7b7a      	ldrb	r2, [r7, #13]
 8001f6e:	0092      	lsls	r2, r2, #2
 8001f70:	3201      	adds	r2, #1
 8001f72:	2101      	movs	r1, #1
 8001f74:	fa01 f202 	lsl.w	r2, r1, r2
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <Icu_Init+0x178>)
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	6213      	str	r3, [r2, #32]
			break;
 8001f80:	bf00      	nop
	for(uint8 index=0;index<ConfigPtr->IcuConfigSet.IcuMaxChannel;index++)
 8001f82:	7b7b      	ldrb	r3, [r7, #13]
 8001f84:	3301      	adds	r3, #1
 8001f86:	737b      	strb	r3, [r7, #13]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	7b7a      	ldrb	r2, [r7, #13]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d3c7      	bcc.n	8001f22 <Icu_Init+0xae>
		}
	}
	//Capture interrupt enable
	//TIM3->DIER=0x0f;
	//isr_flag reset
	Isr_Flag.CC1IF=0;
 8001f92:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <Icu_Init+0x180>)
 8001f94:	7813      	ldrb	r3, [r2, #0]
 8001f96:	f36f 0300 	bfc	r3, #0, #1
 8001f9a:	7013      	strb	r3, [r2, #0]
	Isr_Flag.CC2IF=0;
 8001f9c:	4a15      	ldr	r2, [pc, #84]	; (8001ff4 <Icu_Init+0x180>)
 8001f9e:	7813      	ldrb	r3, [r2, #0]
 8001fa0:	f36f 0341 	bfc	r3, #1, #1
 8001fa4:	7013      	strb	r3, [r2, #0]
	Isr_Flag.CC3IF=0;
 8001fa6:	4a13      	ldr	r2, [pc, #76]	; (8001ff4 <Icu_Init+0x180>)
 8001fa8:	7813      	ldrb	r3, [r2, #0]
 8001faa:	f36f 0382 	bfc	r3, #2, #1
 8001fae:	7013      	strb	r3, [r2, #0]
	Isr_Flag.CC4IF=0;
 8001fb0:	4a10      	ldr	r2, [pc, #64]	; (8001ff4 <Icu_Init+0x180>)
 8001fb2:	7813      	ldrb	r3, [r2, #0]
 8001fb4:	f36f 03c3 	bfc	r3, #3, #1
 8001fb8:	7013      	strb	r3, [r2, #0]
	NVIC_IRQ29_TIM3_Enable();
 8001fba:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <Icu_Init+0x184>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a0e      	ldr	r2, [pc, #56]	; (8001ff8 <Icu_Init+0x184>)
 8001fc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fc4:	6013      	str	r3, [r2, #0]
	Icu_State=Icu_INITIALIZED;
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <Icu_Init+0x168>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
	TIM3->CR1=1;
 8001fcc:	4b07      	ldr	r3, [pc, #28]	; (8001fec <Icu_Init+0x178>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
}
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000138 	.word	0x20000138
 8001fe0:	200002c0 	.word	0x200002c0
 8001fe4:	200002e0 	.word	0x200002e0
 8001fe8:	200002e4 	.word	0x200002e4
 8001fec:	40000400 	.word	0x40000400
 8001ff0:	200002c8 	.word	0x200002c8
 8001ff4:	200002bc 	.word	0x200002bc
 8001ff8:	e000e100 	.word	0xe000e100

08001ffc <Icu_DisableNotification>:
* Parameters (out)	:	None
* Return value		:	None
* Description		:	This function disables the notification of a channel.
***********************************************************************/
void Icu_DisableNotification (Icu_ChannelType Channel)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
	 [SWS_Icu_00161] [If development error detection is enabled the function
	 Icu_DisableNotification shall check the parameter Channel and shall raise
	 the error ICU_E_PARAM_CHANNEL if Channel is invalid]
	 */
	#if(IcuDevErrorDetect==TRUE)
	if(Channel>IcuMax_Channel)
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	2b04      	cmp	r3, #4
 800200a:	d905      	bls.n	8002018 <Icu_DisableNotification+0x1c>
		Det_ReportError(ICU_VERSION_ID,0, Icu_DisableNotification_ID, ICU_E_PARAM_CHANNEL);
 800200c:	230b      	movs	r3, #11
 800200e:	2206      	movs	r2, #6
 8002010:	2100      	movs	r1, #0
 8002012:	2017      	movs	r0, #23
 8002014:	f7ff fb02 	bl	800161c <Det_ReportError>
	#endif
	switch (Channel)
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	2b03      	cmp	r3, #3
 800201c:	d822      	bhi.n	8002064 <Icu_DisableNotification+0x68>
 800201e:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <Icu_DisableNotification+0x28>)
 8002020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002024:	08002035 	.word	0x08002035
 8002028:	08002041 	.word	0x08002041
 800202c:	0800204d 	.word	0x0800204d
 8002030:	08002059 	.word	0x08002059
	{
	case Icu_Channel_0:
		Notification_Flag.Channel_0_notification_flag=0;
 8002034:	4a0e      	ldr	r2, [pc, #56]	; (8002070 <Icu_DisableNotification+0x74>)
 8002036:	7813      	ldrb	r3, [r2, #0]
 8002038:	f36f 0300 	bfc	r3, #0, #1
 800203c:	7013      	strb	r3, [r2, #0]
		break;
 800203e:	e012      	b.n	8002066 <Icu_DisableNotification+0x6a>
	case Icu_Channel_1:
		Notification_Flag.Channel_1_notification_flag=0;
 8002040:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <Icu_DisableNotification+0x74>)
 8002042:	7813      	ldrb	r3, [r2, #0]
 8002044:	f36f 0341 	bfc	r3, #1, #1
 8002048:	7013      	strb	r3, [r2, #0]
		break;
 800204a:	e00c      	b.n	8002066 <Icu_DisableNotification+0x6a>
	case Icu_Channel_2:
		Notification_Flag.Channel_2_notification_flag=0;
 800204c:	4a08      	ldr	r2, [pc, #32]	; (8002070 <Icu_DisableNotification+0x74>)
 800204e:	7813      	ldrb	r3, [r2, #0]
 8002050:	f36f 0382 	bfc	r3, #2, #1
 8002054:	7013      	strb	r3, [r2, #0]
		break;
 8002056:	e006      	b.n	8002066 <Icu_DisableNotification+0x6a>
	case Icu_Channel_3:
		Notification_Flag.Channel_3_notification_flag=0;
 8002058:	4a05      	ldr	r2, [pc, #20]	; (8002070 <Icu_DisableNotification+0x74>)
 800205a:	7813      	ldrb	r3, [r2, #0]
 800205c:	f36f 03c3 	bfc	r3, #3, #1
 8002060:	7013      	strb	r3, [r2, #0]
		break;
 8002062:	e000      	b.n	8002066 <Icu_DisableNotification+0x6a>
	default:
		break;
 8002064:	bf00      	nop
	}
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200002e8 	.word	0x200002e8

08002074 <Icu_StartSignalMeasurement>:
* Parameters (out)	:	None
* Return value		:	None
* Description		:	This function starts the measurement of signals.
***********************************************************************/
void Icu_StartSignalMeasurement (Icu_ChannelType Channel)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
	 [SWS_Icu_00176] If development error detection is enabled, the function
	 Icu_StartSignalMeasurement shall check the parameter Channel. If Channel
	 is invalid (invalid identifier or channel not configured for mode ICU_MODE_SIGNAL_MEASUREMENT
	 */
	#if(IcuDevErrorDetect==TRUE)
	if(Channel>IcuMax_Channel||Icu_config->IcuConfigSet.IcuChannel[Channel].IcuMeasurementMode!=ICU_MODE_SIGNAL_MEASUREMENT)
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	2b04      	cmp	r3, #4
 8002082:	d80a      	bhi.n	800209a <Icu_StartSignalMeasurement+0x26>
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <Icu_StartSignalMeasurement+0x58>)
 8002086:	6819      	ldr	r1, [r3, #0]
 8002088:	79fa      	ldrb	r2, [r7, #7]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	440b      	add	r3, r1
 8002092:	3303      	adds	r3, #3
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d005      	beq.n	80020a6 <Icu_StartSignalMeasurement+0x32>
		Det_ReportError(ICU_VERSION_ID,0, Icu_StartSignalMeasurement_ID, ICU_E_PARAM_CHANNEL);
 800209a:	230b      	movs	r3, #11
 800209c:	2213      	movs	r2, #19
 800209e:	2100      	movs	r1, #0
 80020a0:	2017      	movs	r0, #23
 80020a2:	f7ff fabb 	bl	800161c <Det_ReportError>
	#endif
	/*
	 [SWS_Icu_00146] [The function Icu_StartSignalMeasurement shall reset the
	 state for the given channel to ICU_IDLE.]
	 */
	Channel_config[Channel]=ICU_IDLE;
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <Icu_StartSignalMeasurement+0x5c>)
 80020aa:	2101      	movs	r1, #1
 80020ac:	54d1      	strb	r1, [r2, r3]
	//Capture interrupt enable
	TIM3->DIER |=1<<(Channel+1);
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <Icu_StartSignalMeasurement+0x60>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	79fa      	ldrb	r2, [r7, #7]
 80020b4:	3201      	adds	r2, #1
 80020b6:	2101      	movs	r1, #1
 80020b8:	fa01 f202 	lsl.w	r2, r1, r2
 80020bc:	4611      	mov	r1, r2
 80020be:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <Icu_StartSignalMeasurement+0x60>)
 80020c0:	430b      	orrs	r3, r1
 80020c2:	60d3      	str	r3, [r2, #12]
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200002c0 	.word	0x200002c0
 80020d0:	200002e0 	.word	0x200002e0
 80020d4:	40000400 	.word	0x40000400

080020d8 <Icu_StopSignalMeasurement>:
* Parameters (out)	:	None
* Return value		:	None
* Description		:	This function stops the measurement of signals of the given channel.
***********************************************************************/
void Icu_StopSignalMeasurement (Icu_ChannelType Channel)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
	 [SWS_Icu_00176] If development error detection is enabled, the function
	 Icu_StopSignalMeasurement shall check the parameter Channel. If Channel
	 is invalid (invalid identifier or channel not configured for mode ICU_MODE_SIGNAL_MEASUREMENT
	 */
	#if(IcuDevErrorDetect==TRUE)
	if(Channel>IcuMax_Channel||Icu_config->IcuConfigSet.IcuChannel[Channel].IcuMeasurementMode!=ICU_MODE_SIGNAL_MEASUREMENT)
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d80a      	bhi.n	80020fe <Icu_StopSignalMeasurement+0x26>
 80020e8:	4b10      	ldr	r3, [pc, #64]	; (800212c <Icu_StopSignalMeasurement+0x54>)
 80020ea:	6819      	ldr	r1, [r3, #0]
 80020ec:	79fa      	ldrb	r2, [r7, #7]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	440b      	add	r3, r1
 80020f6:	3303      	adds	r3, #3
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d005      	beq.n	800210a <Icu_StopSignalMeasurement+0x32>
		Det_ReportError(ICU_VERSION_ID,0, Icu_StopSignalMeasurement_ID, ICU_E_PARAM_CHANNEL);
 80020fe:	230b      	movs	r3, #11
 8002100:	2214      	movs	r2, #20
 8002102:	2100      	movs	r1, #0
 8002104:	2017      	movs	r0, #23
 8002106:	f7ff fa89 	bl	800161c <Det_ReportError>
	#endif
	//Capture interrupt disable
	TIM3->DIER &=~(1<<(Channel+1));
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <Icu_StopSignalMeasurement+0x58>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	79fa      	ldrb	r2, [r7, #7]
 8002110:	3201      	adds	r2, #1
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f202 	lsl.w	r2, r1, r2
 8002118:	43d2      	mvns	r2, r2
 800211a:	4611      	mov	r1, r2
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <Icu_StopSignalMeasurement+0x58>)
 800211e:	400b      	ands	r3, r1
 8002120:	60d3      	str	r3, [r2, #12]
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200002c0 	.word	0x200002c0
 8002130:	40000400 	.word	0x40000400

08002134 <Icu_GetTimeElapsed>:
* Parameters (out)	:	None
* Return value		:	see Description
* Description		:	This function reads the elapsed Signal Low Time for the given channel.
***********************************************************************/
Icu_ValueType Icu_GetTimeElapsed (Icu_ChannelType Channel)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
	Icu_ValueType Icu_Read=0;
 800213e:	2300      	movs	r3, #0
 8002140:	81fb      	strh	r3, [r7, #14]
	 Channel shall be checked by this service. If Channel is invalid (invalid identifier or
	 channel not configured for mode ICU_MODE_SIGNAL_MEASUREMENT), then the error
	 ICU_E_PARAM_CHANNEL shall be reported to the Default Error Tracer.]
	 */
	#if(IcuDevErrorDetect==TRUE)
	if(Channel>IcuMax_Channel||Icu_config->IcuConfigSet.IcuChannel[Channel].IcuMeasurementMode!=ICU_MODE_SIGNAL_MEASUREMENT)
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d80a      	bhi.n	800215e <Icu_GetTimeElapsed+0x2a>
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <Icu_GetTimeElapsed+0x8c>)
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	79fa      	ldrb	r2, [r7, #7]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	440b      	add	r3, r1
 8002156:	3303      	adds	r3, #3
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d005      	beq.n	800216a <Icu_GetTimeElapsed+0x36>
		Det_ReportError(ICU_VERSION_ID,0, Icu_GetTimeElapsed_ID, ICU_E_PARAM_CHANNEL);
 800215e:	230b      	movs	r3, #11
 8002160:	2210      	movs	r2, #16
 8002162:	2100      	movs	r1, #0
 8002164:	2017      	movs	r0, #23
 8002166:	f7ff fa59 	bl	800161c <Det_ReportError>
	/*
	 [SWS_Icu_00136][The function Icu_GetTimeElapsed shall return “0” in case no requested time has been captured]
	 [SWS_Icu_00339][The function Icu_GetTimeElapsed shall return “0” in case the
	 capturing of a requested time is ongoing and not finished]
	 */
	if(Channel_config[Channel]==ICU_IDLE)
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	4a15      	ldr	r2, [pc, #84]	; (80021c4 <Icu_GetTimeElapsed+0x90>)
 800216e:	5cd3      	ldrb	r3, [r2, r3]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <Icu_GetTimeElapsed+0x44>
	{
		return 0;
 8002174:	2300      	movs	r3, #0
 8002176:	e01f      	b.n	80021b8 <Icu_GetTimeElapsed+0x84>
	{
		/*
		 [SWS_Icu_00081]Signal Low Time--->> Return Signal Low Time
		 [SWS_Icu_00082]Signal High Time--->> Return Signal High Time
		 */
		switch (Icu_config->IcuConfigSet.IcuChannel[Channel].IcuSignal_Measurement.IcuSignalMeasurementProperty)
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <Icu_GetTimeElapsed+0x8c>)
 800217a:	6819      	ldr	r1, [r3, #0]
 800217c:	79fa      	ldrb	r2, [r7, #7]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	440b      	add	r3, r1
 8002186:	3305      	adds	r3, #5
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <Icu_GetTimeElapsed+0x60>
 800218e:	2b01      	cmp	r3, #1
 8002190:	d006      	beq.n	80021a0 <Icu_GetTimeElapsed+0x6c>
			break;
		case ICU_HIGH_TIME:
			Icu_Read=Channel_Measurement[Channel].Time_High;
			break;
		default:
			break;
 8002192:	e00c      	b.n	80021ae <Icu_GetTimeElapsed+0x7a>
			Icu_Read=Channel_Measurement[Channel].Time_Low;
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	4a0c      	ldr	r2, [pc, #48]	; (80021c8 <Icu_GetTimeElapsed+0x94>)
 8002198:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800219c:	81fb      	strh	r3, [r7, #14]
			break;
 800219e:	e006      	b.n	80021ae <Icu_GetTimeElapsed+0x7a>
			Icu_Read=Channel_Measurement[Channel].Time_High;
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	4a09      	ldr	r2, [pc, #36]	; (80021c8 <Icu_GetTimeElapsed+0x94>)
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	885b      	ldrh	r3, [r3, #2]
 80021aa:	81fb      	strh	r3, [r7, #14]
			break;
 80021ac:	bf00      	nop
		}
		Channel_config[Channel]=ICU_IDLE;
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <Icu_GetTimeElapsed+0x90>)
 80021b2:	2101      	movs	r1, #1
 80021b4:	54d1      	strb	r1, [r2, r3]
		return Icu_Read;
 80021b6:	89fb      	ldrh	r3, [r7, #14]
	}
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	200002c0 	.word	0x200002c0
 80021c4:	200002e0 	.word	0x200002e0
 80021c8:	200002d0 	.word	0x200002d0

080021cc <TIM3_IRQHandler>:
* Return value		:	None
* Description		:	The ISRs shall reset the interrupt flags (if needed by hardware)
						and call the corresponding notification functions
***********************************************************************/
void TIM3_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
	//check flag for channel 0
	if((TIM3->SR&(1<<1))!=0)
 80021d0:	4b87      	ldr	r3, [pc, #540]	; (80023f0 <TIM3_IRQHandler+0x224>)
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80f9 	beq.w	80023d0 <TIM3_IRQHandler+0x204>
	{
		//First edge for signal
		if(Isr_Flag.CC1IF==0)
 80021de:	4b85      	ldr	r3, [pc, #532]	; (80023f4 <TIM3_IRQHandler+0x228>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d16a      	bne.n	80022c2 <TIM3_IRQHandler+0xf6>
		{
			//measurement of signals beginning with the configured default start edge(ICU_RISING_EDGE).
			if(Channel_Activation[0]==ICU_RISING_EDGE)
 80021ec:	4b82      	ldr	r3, [pc, #520]	; (80023f8 <TIM3_IRQHandler+0x22c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d12e      	bne.n	8002252 <TIM3_IRQHandler+0x86>
			{
				// Capture at Rising Edge
				l=TIM3->CCR1;
 80021f4:	4b7e      	ldr	r3, [pc, #504]	; (80023f0 <TIM3_IRQHandler+0x224>)
 80021f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	4b80      	ldr	r3, [pc, #512]	; (80023fc <TIM3_IRQHandler+0x230>)
 80021fc:	801a      	strh	r2, [r3, #0]
				if(h>l)
 80021fe:	4b80      	ldr	r3, [pc, #512]	; (8002400 <TIM3_IRQHandler+0x234>)
 8002200:	881a      	ldrh	r2, [r3, #0]
 8002202:	4b7e      	ldr	r3, [pc, #504]	; (80023fc <TIM3_IRQHandler+0x230>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d90a      	bls.n	8002220 <TIM3_IRQHandler+0x54>
					Read_Low=(0xffff-h)+l;
 800220a:	4b7c      	ldr	r3, [pc, #496]	; (80023fc <TIM3_IRQHandler+0x230>)
 800220c:	881a      	ldrh	r2, [r3, #0]
 800220e:	4b7c      	ldr	r3, [pc, #496]	; (8002400 <TIM3_IRQHandler+0x234>)
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	b29b      	uxth	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	4b7a      	ldr	r3, [pc, #488]	; (8002404 <TIM3_IRQHandler+0x238>)
 800221c:	801a      	strh	r2, [r3, #0]
 800221e:	e007      	b.n	8002230 <TIM3_IRQHandler+0x64>
				else
					Read_Low=l-h;
 8002220:	4b76      	ldr	r3, [pc, #472]	; (80023fc <TIM3_IRQHandler+0x230>)
 8002222:	881a      	ldrh	r2, [r3, #0]
 8002224:	4b76      	ldr	r3, [pc, #472]	; (8002400 <TIM3_IRQHandler+0x234>)
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	b29a      	uxth	r2, r3
 800222c:	4b75      	ldr	r3, [pc, #468]	; (8002404 <TIM3_IRQHandler+0x238>)
 800222e:	801a      	strh	r2, [r3, #0]
				// Capture Signal Low Time
				Channel_Measurement[0].Time_High=Read_Low;
 8002230:	4b74      	ldr	r3, [pc, #464]	; (8002404 <TIM3_IRQHandler+0x238>)
 8002232:	881a      	ldrh	r2, [r3, #0]
 8002234:	4b74      	ldr	r3, [pc, #464]	; (8002408 <TIM3_IRQHandler+0x23c>)
 8002236:	805a      	strh	r2, [r3, #2]
				TIM3->SR &=~(1<<1);
 8002238:	4b6d      	ldr	r3, [pc, #436]	; (80023f0 <TIM3_IRQHandler+0x224>)
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	4a6c      	ldr	r2, [pc, #432]	; (80023f0 <TIM3_IRQHandler+0x224>)
 800223e:	f023 0302 	bic.w	r3, r3, #2
 8002242:	6113      	str	r3, [r2, #16]
				//FALLING_EDGE
				TIM3->CCER |=(1<<1);
 8002244:	4b6a      	ldr	r3, [pc, #424]	; (80023f0 <TIM3_IRQHandler+0x224>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4a69      	ldr	r2, [pc, #420]	; (80023f0 <TIM3_IRQHandler+0x224>)
 800224a:	f043 0302 	orr.w	r3, r3, #2
 800224e:	6213      	str	r3, [r2, #32]
 8002250:	e031      	b.n	80022b6 <TIM3_IRQHandler+0xea>
			}
			//measurement of signals beginning with the configured default start edge(ICU_FALLING_EDGE).
			else if(Channel_Activation[0]==ICU_FALLING_EDGE)
 8002252:	4b69      	ldr	r3, [pc, #420]	; (80023f8 <TIM3_IRQHandler+0x22c>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d12d      	bne.n	80022b6 <TIM3_IRQHandler+0xea>
			{
				// Capture at Falling Edge
				h=TIM3->CCR1;
 800225a:	4b65      	ldr	r3, [pc, #404]	; (80023f0 <TIM3_IRQHandler+0x224>)
 800225c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225e:	b29a      	uxth	r2, r3
 8002260:	4b67      	ldr	r3, [pc, #412]	; (8002400 <TIM3_IRQHandler+0x234>)
 8002262:	801a      	strh	r2, [r3, #0]
				if(l>h)
 8002264:	4b65      	ldr	r3, [pc, #404]	; (80023fc <TIM3_IRQHandler+0x230>)
 8002266:	881a      	ldrh	r2, [r3, #0]
 8002268:	4b65      	ldr	r3, [pc, #404]	; (8002400 <TIM3_IRQHandler+0x234>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d90a      	bls.n	8002286 <TIM3_IRQHandler+0xba>
					Read_Low=(0xffff-l)+h;
 8002270:	4b63      	ldr	r3, [pc, #396]	; (8002400 <TIM3_IRQHandler+0x234>)
 8002272:	881a      	ldrh	r2, [r3, #0]
 8002274:	4b61      	ldr	r3, [pc, #388]	; (80023fc <TIM3_IRQHandler+0x230>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	4b60      	ldr	r3, [pc, #384]	; (8002404 <TIM3_IRQHandler+0x238>)
 8002282:	801a      	strh	r2, [r3, #0]
 8002284:	e007      	b.n	8002296 <TIM3_IRQHandler+0xca>
				else
					Read_Low=h-l;
 8002286:	4b5e      	ldr	r3, [pc, #376]	; (8002400 <TIM3_IRQHandler+0x234>)
 8002288:	881a      	ldrh	r2, [r3, #0]
 800228a:	4b5c      	ldr	r3, [pc, #368]	; (80023fc <TIM3_IRQHandler+0x230>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b5c      	ldr	r3, [pc, #368]	; (8002404 <TIM3_IRQHandler+0x238>)
 8002294:	801a      	strh	r2, [r3, #0]
				// Capture Signal High Time
				Channel_Measurement[0].Time_High=Read_High;
 8002296:	4b5d      	ldr	r3, [pc, #372]	; (800240c <TIM3_IRQHandler+0x240>)
 8002298:	881a      	ldrh	r2, [r3, #0]
 800229a:	4b5b      	ldr	r3, [pc, #364]	; (8002408 <TIM3_IRQHandler+0x23c>)
 800229c:	805a      	strh	r2, [r3, #2]
				TIM3->SR &=~(1<<1);
 800229e:	4b54      	ldr	r3, [pc, #336]	; (80023f0 <TIM3_IRQHandler+0x224>)
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	4a53      	ldr	r2, [pc, #332]	; (80023f0 <TIM3_IRQHandler+0x224>)
 80022a4:	f023 0302 	bic.w	r3, r3, #2
 80022a8:	6113      	str	r3, [r2, #16]
				//RISING_EDGE
				TIM3->CCER &=~(1<<1);
 80022aa:	4b51      	ldr	r3, [pc, #324]	; (80023f0 <TIM3_IRQHandler+0x224>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4a50      	ldr	r2, [pc, #320]	; (80023f0 <TIM3_IRQHandler+0x224>)
 80022b0:	f023 0302 	bic.w	r3, r3, #2
 80022b4:	6213      	str	r3, [r2, #32]
			}
			else
			{
				//Later
			}
			Isr_Flag.CC1IF=1;
 80022b6:	4a4f      	ldr	r2, [pc, #316]	; (80023f4 <TIM3_IRQHandler+0x228>)
 80022b8:	7813      	ldrb	r3, [r2, #0]
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	7013      	strb	r3, [r2, #0]
	}
	else
	{
		//
	}
}
 80022c0:	e094      	b.n	80023ec <TIM3_IRQHandler+0x220>
		else if(Isr_Flag.CC1IF==1)
 80022c2:	4b4c      	ldr	r3, [pc, #304]	; (80023f4 <TIM3_IRQHandler+0x228>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 808d 	beq.w	80023ec <TIM3_IRQHandler+0x220>
			if(Channel_Activation[0]==ICU_RISING_EDGE)
 80022d2:	4b49      	ldr	r3, [pc, #292]	; (80023f8 <TIM3_IRQHandler+0x22c>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d12e      	bne.n	8002338 <TIM3_IRQHandler+0x16c>
				TIM3->SR &=~(1<<1);
 80022da:	4b45      	ldr	r3, [pc, #276]	; (80023f0 <TIM3_IRQHandler+0x224>)
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	4a44      	ldr	r2, [pc, #272]	; (80023f0 <TIM3_IRQHandler+0x224>)
 80022e0:	f023 0302 	bic.w	r3, r3, #2
 80022e4:	6113      	str	r3, [r2, #16]
				h=TIM3->CCR1;
 80022e6:	4b42      	ldr	r3, [pc, #264]	; (80023f0 <TIM3_IRQHandler+0x224>)
 80022e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	4b44      	ldr	r3, [pc, #272]	; (8002400 <TIM3_IRQHandler+0x234>)
 80022ee:	801a      	strh	r2, [r3, #0]
				if(l>h)
 80022f0:	4b42      	ldr	r3, [pc, #264]	; (80023fc <TIM3_IRQHandler+0x230>)
 80022f2:	881a      	ldrh	r2, [r3, #0]
 80022f4:	4b42      	ldr	r3, [pc, #264]	; (8002400 <TIM3_IRQHandler+0x234>)
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d90a      	bls.n	8002312 <TIM3_IRQHandler+0x146>
					Read_High=(0xffff-l)+h;
 80022fc:	4b40      	ldr	r3, [pc, #256]	; (8002400 <TIM3_IRQHandler+0x234>)
 80022fe:	881a      	ldrh	r2, [r3, #0]
 8002300:	4b3e      	ldr	r3, [pc, #248]	; (80023fc <TIM3_IRQHandler+0x230>)
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	4b3f      	ldr	r3, [pc, #252]	; (800240c <TIM3_IRQHandler+0x240>)
 800230e:	801a      	strh	r2, [r3, #0]
 8002310:	e007      	b.n	8002322 <TIM3_IRQHandler+0x156>
					Read_High=h-l;
 8002312:	4b3b      	ldr	r3, [pc, #236]	; (8002400 <TIM3_IRQHandler+0x234>)
 8002314:	881a      	ldrh	r2, [r3, #0]
 8002316:	4b39      	ldr	r3, [pc, #228]	; (80023fc <TIM3_IRQHandler+0x230>)
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	b29a      	uxth	r2, r3
 800231e:	4b3b      	ldr	r3, [pc, #236]	; (800240c <TIM3_IRQHandler+0x240>)
 8002320:	801a      	strh	r2, [r3, #0]
				Channel_Measurement[0].Time_High=Read_High;
 8002322:	4b3a      	ldr	r3, [pc, #232]	; (800240c <TIM3_IRQHandler+0x240>)
 8002324:	881a      	ldrh	r2, [r3, #0]
 8002326:	4b38      	ldr	r3, [pc, #224]	; (8002408 <TIM3_IRQHandler+0x23c>)
 8002328:	805a      	strh	r2, [r3, #2]
				TIM3->CCER &=~(1<<1);
 800232a:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <TIM3_IRQHandler+0x224>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a30      	ldr	r2, [pc, #192]	; (80023f0 <TIM3_IRQHandler+0x224>)
 8002330:	f023 0302 	bic.w	r3, r3, #2
 8002334:	6213      	str	r3, [r2, #32]
 8002336:	e031      	b.n	800239c <TIM3_IRQHandler+0x1d0>
			else if(Channel_Activation[0]==ICU_FALLING_EDGE)
 8002338:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <TIM3_IRQHandler+0x22c>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d12d      	bne.n	800239c <TIM3_IRQHandler+0x1d0>
				l=TIM3->CCR1;
 8002340:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <TIM3_IRQHandler+0x224>)
 8002342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002344:	b29a      	uxth	r2, r3
 8002346:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <TIM3_IRQHandler+0x230>)
 8002348:	801a      	strh	r2, [r3, #0]
				if(h>l)
 800234a:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <TIM3_IRQHandler+0x234>)
 800234c:	881a      	ldrh	r2, [r3, #0]
 800234e:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <TIM3_IRQHandler+0x230>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d90a      	bls.n	800236c <TIM3_IRQHandler+0x1a0>
					Read_Low=(0xffff-h)+l;
 8002356:	4b29      	ldr	r3, [pc, #164]	; (80023fc <TIM3_IRQHandler+0x230>)
 8002358:	881a      	ldrh	r2, [r3, #0]
 800235a:	4b29      	ldr	r3, [pc, #164]	; (8002400 <TIM3_IRQHandler+0x234>)
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	b29b      	uxth	r3, r3
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	4b27      	ldr	r3, [pc, #156]	; (8002404 <TIM3_IRQHandler+0x238>)
 8002368:	801a      	strh	r2, [r3, #0]
 800236a:	e007      	b.n	800237c <TIM3_IRQHandler+0x1b0>
					Read_Low=l-h;
 800236c:	4b23      	ldr	r3, [pc, #140]	; (80023fc <TIM3_IRQHandler+0x230>)
 800236e:	881a      	ldrh	r2, [r3, #0]
 8002370:	4b23      	ldr	r3, [pc, #140]	; (8002400 <TIM3_IRQHandler+0x234>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	b29a      	uxth	r2, r3
 8002378:	4b22      	ldr	r3, [pc, #136]	; (8002404 <TIM3_IRQHandler+0x238>)
 800237a:	801a      	strh	r2, [r3, #0]
				Channel_Measurement[0].Time_High=Read_Low;
 800237c:	4b21      	ldr	r3, [pc, #132]	; (8002404 <TIM3_IRQHandler+0x238>)
 800237e:	881a      	ldrh	r2, [r3, #0]
 8002380:	4b21      	ldr	r3, [pc, #132]	; (8002408 <TIM3_IRQHandler+0x23c>)
 8002382:	805a      	strh	r2, [r3, #2]
				TIM3->SR &=~(1<<1);
 8002384:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <TIM3_IRQHandler+0x224>)
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <TIM3_IRQHandler+0x224>)
 800238a:	f023 0302 	bic.w	r3, r3, #2
 800238e:	6113      	str	r3, [r2, #16]
				TIM3->CCER |=(1<<1);
 8002390:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <TIM3_IRQHandler+0x224>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4a16      	ldr	r2, [pc, #88]	; (80023f0 <TIM3_IRQHandler+0x224>)
 8002396:	f043 0302 	orr.w	r3, r3, #2
 800239a:	6213      	str	r3, [r2, #32]
			Isr_Flag.CC1IF=0;
 800239c:	4a15      	ldr	r2, [pc, #84]	; (80023f4 <TIM3_IRQHandler+0x228>)
 800239e:	7813      	ldrb	r3, [r2, #0]
 80023a0:	f36f 0300 	bfc	r3, #0, #1
 80023a4:	7013      	strb	r3, [r2, #0]
			Read_Period=Read_Low+Read_High;
 80023a6:	4b17      	ldr	r3, [pc, #92]	; (8002404 <TIM3_IRQHandler+0x238>)
 80023a8:	881a      	ldrh	r2, [r3, #0]
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <TIM3_IRQHandler+0x240>)
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <TIM3_IRQHandler+0x244>)
 80023b4:	801a      	strh	r2, [r3, #0]
			Channel_config[0]=ICU_ACTIVE;
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <TIM3_IRQHandler+0x248>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
			if(Notification_Flag.Channel_0_notification_flag==1)
 80023bc:	4b16      	ldr	r3, [pc, #88]	; (8002418 <TIM3_IRQHandler+0x24c>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d010      	beq.n	80023ec <TIM3_IRQHandler+0x220>
				Icu_SignalNotification_Channel_0();
 80023ca:	f000 f827 	bl	800241c <Icu_SignalNotification_Channel_0>
}
 80023ce:	e00d      	b.n	80023ec <TIM3_IRQHandler+0x220>
	else if((TIM3->SR&(1<<2))!=0)
 80023d0:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <TIM3_IRQHandler+0x224>)
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d107      	bne.n	80023ec <TIM3_IRQHandler+0x220>
	else if((TIM3->SR&(1<<3))!=0)
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <TIM3_IRQHandler+0x224>)
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <TIM3_IRQHandler+0x220>
	else if((TIM3->SR&(1<<4))!=0)
 80023e8:	4b01      	ldr	r3, [pc, #4]	; (80023f0 <TIM3_IRQHandler+0x224>)
 80023ea:	691b      	ldr	r3, [r3, #16]
}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40000400 	.word	0x40000400
 80023f4:	200002bc 	.word	0x200002bc
 80023f8:	200002c8 	.word	0x200002c8
 80023fc:	200002c6 	.word	0x200002c6
 8002400:	200002ce 	.word	0x200002ce
 8002404:	200002cc 	.word	0x200002cc
 8002408:	200002d0 	.word	0x200002d0
 800240c:	200002be 	.word	0x200002be
 8002410:	200002c4 	.word	0x200002c4
 8002414:	200002e0 	.word	0x200002e0
 8002418:	200002e8 	.word	0x200002e8

0800241c <Icu_SignalNotification_Channel_0>:
		}
	}
};

void Icu_SignalNotification_Channel_0(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	db0a      	blt.n	8002452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	490c      	ldr	r1, [pc, #48]	; (8002474 <__NVIC_SetPriority+0x4c>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	0152      	lsls	r2, r2, #5
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	440b      	add	r3, r1
 800244c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002450:	e00a      	b.n	8002468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4908      	ldr	r1, [pc, #32]	; (8002478 <__NVIC_SetPriority+0x50>)
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	3b04      	subs	r3, #4
 8002460:	0152      	lsls	r2, r2, #5
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	440b      	add	r3, r1
 8002466:	761a      	strb	r2, [r3, #24]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000e100 	.word	0xe000e100
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800248c:	d301      	bcc.n	8002492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800248e:	2301      	movs	r3, #1
 8002490:	e00f      	b.n	80024b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <SysTick_Config+0x40>)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800249a:	2107      	movs	r1, #7
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	f7ff ffc2 	bl	8002428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <SysTick_Config+0x40>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <SysTick_Config+0x40>)
 80024ac:	2207      	movs	r2, #7
 80024ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	e000e010 	.word	0xe000e010

080024c0 <HardFault_Handler>:
#include "Dio.h"

uint8 SysTickLED;

void HardFault_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
	while(1);
 80024c4:	e7fe      	b.n	80024c4 <HardFault_Handler+0x4>

080024c6 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0
	while(1);
 80024ca:	e7fe      	b.n	80024ca <MemManage_Handler+0x4>

080024cc <UsageFault_Handler>:
{
	while(1);
}

void UsageFault_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
	while(1);
 80024d0:	e7fe      	b.n	80024d0 <UsageFault_Handler+0x4>

080024d2 <HW_init>:
    		"MRSNE R0,PSP\n\t"
    		"B OS_SV");
}
*/
void HW_init()
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	af00      	add	r7, sp, #0
	 * 8 MHZ
	 * 1 count -> 0.125 us
	 * X count -> 1 ms
	 * X = 8000 Count
	 */
	__NVIC_SetPriority(PendSV_IRQn, 15) ;
 80024d6:	210f      	movs	r1, #15
 80024d8:	f06f 0001 	mvn.w	r0, #1
 80024dc:	f7ff ffa4 	bl	8002428 <__NVIC_SetPriority>

}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <trigger_OS_PendSV>:
void trigger_OS_PendSV()
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
	int x=5;
 80024ea:	2305      	movs	r3, #5
 80024ec:	607b      	str	r3, [r7, #4]
	x++;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3301      	adds	r3, #1
 80024f2:	607b      	str	r3, [r7, #4]
	SCB->ICSR|=SCB_ICSR_PENDSVSET_Msk;
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <trigger_OS_PendSV+0x28>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <trigger_OS_PendSV+0x28>)
 80024fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fe:	6053      	str	r3, [r2, #4]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <Start_Ticker>:

void Start_Ticker()
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
	 * 8 MHZ
	 * 1 count -> 0.125 us
	 * X count -> 1 ms
	 * X = 8000 Count
	 */
	 SysTick_Config(8000);
 8002514:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002518:	f7ff ffb0 	bl	800247c <SysTick_Config>
}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}

08002520 <SysTick_Handler>:
uint8 fla=STD_LOW;
ALARMCALLBACK(Alarm1);
ALARMCALLBACK(Alarm0);
ALARMCALLBACK(Alarm2);
void SysTick_Handler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0

	if(count==2000)count=0;
 8002526:	4b4c      	ldr	r3, [pc, #304]	; (8002658 <SysTick_Handler+0x138>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800252e:	d102      	bne.n	8002536 <SysTick_Handler+0x16>
 8002530:	4b49      	ldr	r3, [pc, #292]	; (8002658 <SysTick_Handler+0x138>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
	if(Alarms_Number!=0)
 8002536:	4b49      	ldr	r3, [pc, #292]	; (800265c <SysTick_Handler+0x13c>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 8088 	beq.w	8002650 <SysTick_Handler+0x130>
	{
		for(uint8 x=0;x<Alarms_Number;x++)
 8002540:	2300      	movs	r3, #0
 8002542:	71fb      	strb	r3, [r7, #7]
 8002544:	e07e      	b.n	8002644 <SysTick_Handler+0x124>
		{
			Alarms[x]->Counter.Counter_Value++;
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	4a45      	ldr	r2, [pc, #276]	; (8002660 <SysTick_Handler+0x140>)
 800254a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	3201      	adds	r2, #1
 8002552:	60da      	str	r2, [r3, #12]
			if(Alarms[x]->Counter.Counter_Value>Alarms[x]->Counter.Counter_Ifo.maxallowedvalue)Alarms[x]->Counter.Counter_Value=0;
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	4a42      	ldr	r2, [pc, #264]	; (8002660 <SysTick_Handler+0x140>)
 8002558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	493f      	ldr	r1, [pc, #252]	; (8002660 <SysTick_Handler+0x140>)
 8002562:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d905      	bls.n	8002578 <SysTick_Handler+0x58>
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	4a3c      	ldr	r2, [pc, #240]	; (8002660 <SysTick_Handler+0x140>)
 8002570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002574:	2200      	movs	r2, #0
 8002576:	60da      	str	r2, [r3, #12]
			if(Alarms[x]->Counter.Counter_Ifo.mincycle<=Alarms[x]->AlarmTime)
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	4a39      	ldr	r2, [pc, #228]	; (8002660 <SysTick_Handler+0x140>)
 800257c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	4936      	ldr	r1, [pc, #216]	; (8002660 <SysTick_Handler+0x140>)
 8002586:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	429a      	cmp	r2, r3
 800258e:	d856      	bhi.n	800263e <SysTick_Handler+0x11e>
			{
				if((count==Alarms[x]->AlarmTime&&newtime[x]==0) ||(Alarms[x]->Counter.Counter_Value==newtime[x]))
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	4a33      	ldr	r2, [pc, #204]	; (8002660 <SysTick_Handler+0x140>)
 8002594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	4b2f      	ldr	r3, [pc, #188]	; (8002658 <SysTick_Handler+0x138>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d105      	bne.n	80025ae <SysTick_Handler+0x8e>
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	4a2f      	ldr	r2, [pc, #188]	; (8002664 <SysTick_Handler+0x144>)
 80025a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <SysTick_Handler+0xa4>
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	4a2b      	ldr	r2, [pc, #172]	; (8002660 <SysTick_Handler+0x140>)
 80025b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	492a      	ldr	r1, [pc, #168]	; (8002664 <SysTick_Handler+0x144>)
 80025bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d13c      	bne.n	800263e <SysTick_Handler+0x11e>
				{
					if(x==0)
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d102      	bne.n	80025d0 <SysTick_Handler+0xb0>
					{
						AlarmCallback_Alarm0();
 80025ca:	f002 f809 	bl	80045e0 <AlarmCallback_Alarm0>
 80025ce:	e00a      	b.n	80025e6 <SysTick_Handler+0xc6>
					}
					else if(x==1)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d102      	bne.n	80025dc <SysTick_Handler+0xbc>
					{
						AlarmCallback_Alarm1();
 80025d6:	f002 f80d 	bl	80045f4 <AlarmCallback_Alarm1>
 80025da:	e004      	b.n	80025e6 <SysTick_Handler+0xc6>
					}
					else if(x==2)
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d101      	bne.n	80025e6 <SysTick_Handler+0xc6>
					{
						AlarmCallback_Alarm2();
 80025e2:	f002 f811 	bl	8004608 <AlarmCallback_Alarm2>
					else
					{
						Dio_WriteChannel(channel_45,STD_LOW);
						fla=STD_HIGH;
					}*/
					newtime[x]=(uint16)(Alarms[x]->Counter.Counter_Value+Alarms[x]->CycleTime);
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	4a1d      	ldr	r2, [pc, #116]	; (8002660 <SysTick_Handler+0x140>)
 80025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	491a      	ldr	r1, [pc, #104]	; (8002660 <SysTick_Handler+0x140>)
 80025f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	4413      	add	r3, r2
 8002600:	b29a      	uxth	r2, r3
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	4611      	mov	r1, r2
 8002606:	4a17      	ldr	r2, [pc, #92]	; (8002664 <SysTick_Handler+0x144>)
 8002608:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if(newtime[x]>Alarms[x]->Counter.Counter_Ifo.maxallowedvalue)newtime[x]-=Alarms[x]->Counter.Counter_Ifo.maxallowedvalue;
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	4a15      	ldr	r2, [pc, #84]	; (8002664 <SysTick_Handler+0x144>)
 8002610:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	4912      	ldr	r1, [pc, #72]	; (8002660 <SysTick_Handler+0x140>)
 8002618:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d90d      	bls.n	800263e <SysTick_Handler+0x11e>
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	4a0f      	ldr	r2, [pc, #60]	; (8002664 <SysTick_Handler+0x144>)
 8002626:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <SysTick_Handler+0x140>)
 800262e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	1a8a      	subs	r2, r1, r2
 8002638:	490a      	ldr	r1, [pc, #40]	; (8002664 <SysTick_Handler+0x144>)
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint8 x=0;x<Alarms_Number;x++)
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	3301      	adds	r3, #1
 8002642:	71fb      	strb	r3, [r7, #7]
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <SysTick_Handler+0x13c>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	79fa      	ldrb	r2, [r7, #7]
 800264a:	429a      	cmp	r2, r3
 800264c:	f4ff af7b 	bcc.w	8002546 <SysTick_Handler+0x26>
	//Decide_whatNext();
	//Switch Context & restore
	//Schedule();
	//trigger_OS_PendSV();

}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000168 	.word	0x20000168
 800265c:	20000164 	.word	0x20000164
 8002660:	2000013c 	.word	0x2000013c
 8002664:	2000016c 	.word	0x2000016c

08002668 <SetEvent>:
extern FIFO_Buf_t Ready_QUEUE ;
extern TaskRefType* Ready_QUEUE_FIFO[10];
extern struct System_Conctrol OS_Control;

StatusType SetEvent(TaskRefType* TaskName,EventMaskType Mask)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
	StatusType statu=NO_ERROR;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
	uint32_t IRQ_Flag=0;
 8002678:	2300      	movs	r3, #0
 800267a:	60bb      	str	r3, [r7, #8]
	if(TaskName->TaskType!=Extended_Task)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002682:	2b01      	cmp	r3, #1
 8002684:	d003      	beq.n	800268e <SetEvent+0x26>
	{
		// the referenced task is not an Extended Task
		statu=E_ACCESS;
 8002686:	2305      	movs	r3, #5
 8002688:	73fb      	strb	r3, [r7, #15]
		return statu;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	e040      	b.n	8002710 <SetEvent+0xa8>
	}
	else
	{
		if(TaskName->TaskState==Suspend)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <SetEvent+0x34>
		{
			//  the referenced task is in the suspended state
			//statu=E_STATE;
			return statu;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	e039      	b.n	8002710 <SetEvent+0xa8>
		}
		else
		{
			//read state of cpu
			OS_GET_IRQ_Flag(IRQ_Flag);
 800269c:	f3ef 8005 	mrs	r0, IPSR
 80026a0:	4603      	mov	r3, r0
 80026a2:	60bb      	str	r3, [r7, #8]
			//36 for can handler (Excepted)
			if(IRQ_Flag!=0&&IRQ_Flag!=36&&IRQ_Flag!=15)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <SetEvent+0x56>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b24      	cmp	r3, #36	; 0x24
 80026ae:	d006      	beq.n	80026be <SetEvent+0x56>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b0f      	cmp	r3, #15
 80026b4:	d003      	beq.n	80026be <SetEvent+0x56>
			{
				// a call at the interrupt level.
				statu=E_OS_CALLEVEL;
 80026b6:	2303      	movs	r3, #3
 80026b8:	73fb      	strb	r3, [r7, #15]
				return statu;
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	e028      	b.n	8002710 <SetEvent+0xa8>
			}
			else
			{
				//set mask
				TaskName->Events.Public_Mask|=Mask;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				//check any waiting for this task
				if(TaskName->Events.Public_Mask&TaskName->Events.Private_Mask)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80026dc:	4013      	ands	r3, r2
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d014      	beq.n	800270e <SetEvent+0xa6>
				{
					TaskName->TaskState=Ready;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2203      	movs	r2, #3
 80026e8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
					if(OS_Control.CurrentTask->priority>TaskName->priority)
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <SetEvent+0xb0>)
 80026ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80026f2:	791a      	ldrb	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	791b      	ldrb	r3, [r3, #4]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d904      	bls.n	8002706 <SetEvent+0x9e>
					{
						//Add task to ready buffer
						FIFO_enqueue(&Ready_QUEUE,TaskName);
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4807      	ldr	r0, [pc, #28]	; (800271c <SetEvent+0xb4>)
 8002700:	f000 f8cc 	bl	800289c <FIFO_enqueue>
 8002704:	e003      	b.n	800270e <SetEvent+0xa6>
					}
					else
					{
						Schedule();
 8002706:	f000 fc0b 	bl	8002f20 <Schedule>
						trigger_OS_PendSV();
 800270a:	f7ff feeb 	bl	80024e4 <trigger_OS_PendSV>
					}
				}
			}
		}
	}
	return statu;
 800270e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	200003b4 	.word	0x200003b4
 800271c:	200005ac 	.word	0x200005ac

08002720 <ClearEvent>:

StatusType ClearEvent(EventMaskType Mask)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
	StatusType statu=NO_ERROR;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
	uint32_t IRQ_Flag=0;
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
	//read state of cpu
	OS_GET_IRQ_Flag(IRQ_Flag);
 8002732:	f3ef 8005 	mrs	r0, IPSR
 8002736:	4603      	mov	r3, r0
 8002738:	60bb      	str	r3, [r7, #8]
	if(IRQ_Flag!=0)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <ClearEvent+0x28>
	{
		// a call at the interrupt level.
		statu=E_OS_CALLEVEL;
 8002740:	2303      	movs	r3, #3
 8002742:	73fb      	strb	r3, [r7, #15]
		return statu;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	e02f      	b.n	80027a8 <ClearEvent+0x88>
	}
	else
	{
		if(OS_Control.CurrentTask->TaskType!=Extended_Task)
 8002748:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <ClearEvent+0x94>)
 800274a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800274e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002752:	2b01      	cmp	r3, #1
 8002754:	d003      	beq.n	800275e <ClearEvent+0x3e>
		{
			// the referenced task is not an Extended Task
			statu=E_ACCESS;
 8002756:	2305      	movs	r3, #5
 8002758:	73fb      	strb	r3, [r7, #15]
			return statu;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	e024      	b.n	80027a8 <ClearEvent+0x88>
		}
		else
		{
			OS_Control.CurrentTask->Events.Private_Mask&=~Mask;
 800275e:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <ClearEvent+0x94>)
 8002760:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002764:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002768:	b25a      	sxtb	r2, r3
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	43db      	mvns	r3, r3
 8002770:	b25b      	sxtb	r3, r3
 8002772:	4013      	ands	r3, r2
 8002774:	b25a      	sxtb	r2, r3
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <ClearEvent+0x94>)
 8002778:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			OS_Control.CurrentTask->Events.Public_Mask&=~Mask;
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <ClearEvent+0x94>)
 8002784:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800278c:	b25a      	sxtb	r2, r3
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	43db      	mvns	r3, r3
 8002794:	b25b      	sxtb	r3, r3
 8002796:	4013      	ands	r3, r2
 8002798:	b25a      	sxtb	r2, r3
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <ClearEvent+0x94>)
 800279c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		}
	}
	return statu;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	200003b4 	.word	0x200003b4

080027b8 <WaitEvent>:
	}
	return statu;
}

StatusType WaitEvent(EventMaskType Mask)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
	StatusType statu=NO_ERROR;
 80027c2:	2300      	movs	r3, #0
 80027c4:	73fb      	strb	r3, [r7, #15]
	uint32_t IRQ_Flag=0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]
	if(OS_Control.CurrentTask->TaskType!=Extended_Task)
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <WaitEvent+0x9c>)
 80027cc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80027d0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d003      	beq.n	80027e0 <WaitEvent+0x28>
	{
		// the referenced task is not an Extended Task
		statu=E_ACCESS;
 80027d8:	2305      	movs	r3, #5
 80027da:	73fb      	strb	r3, [r7, #15]
		return statu;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	e034      	b.n	800284a <WaitEvent+0x92>
	}
	else
	{
		//read state of cpu
		OS_GET_IRQ_Flag(IRQ_Flag);
 80027e0:	f3ef 8005 	mrs	r0, IPSR
 80027e4:	4603      	mov	r3, r0
 80027e6:	60bb      	str	r3, [r7, #8]
		if(IRQ_Flag!=0)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <WaitEvent+0x3e>
		{
			// a call at the interrupt level.
			statu=E_OS_CALLEVEL;
 80027ee:	2303      	movs	r3, #3
 80027f0:	73fb      	strb	r3, [r7, #15]
			return statu;
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	e029      	b.n	800284a <WaitEvent+0x92>
		}
		else
		{
			OS_Control.CurrentTask->Events.Private_Mask|=Mask;
 80027f6:	4b17      	ldr	r3, [pc, #92]	; (8002854 <WaitEvent+0x9c>)
 80027f8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80027fc:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 8002800:	4b14      	ldr	r3, [pc, #80]	; (8002854 <WaitEvent+0x9c>)
 8002802:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002806:	79fa      	ldrb	r2, [r7, #7]
 8002808:	430a      	orrs	r2, r1
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			if(OS_Control.CurrentTask->Events.Private_Mask&OS_Control.CurrentTask->Events.Public_Mask)
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <WaitEvent+0x9c>)
 8002812:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002816:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <WaitEvent+0x9c>)
 800281c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002820:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002824:	4013      	ands	r3, r2
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <WaitEvent+0x78>
			{
				return statu;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	e00c      	b.n	800284a <WaitEvent+0x92>
			}
			else
			{
				OS_Control.CurrentTask->TaskState=Waiting;
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <WaitEvent+0x9c>)
 8002832:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002836:	2202      	movs	r2, #2
 8002838:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				statu=Schedule();
 800283c:	f000 fb70 	bl	8002f20 <Schedule>
 8002840:	4603      	mov	r3, r0
 8002842:	73fb      	strb	r3, [r7, #15]
				trigger_OS_PendSV();
 8002844:	f7ff fe4e 	bl	80024e4 <trigger_OS_PendSV>
			}
		}
	}
	return statu;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200003b4 	.word	0x200003b4

08002858 <FIFO_init>:
 *  Created on : 27/4/2023
 *  Author     : Salama mohamed
 ************************************************/
#include"MY_RTOS_FIFO.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]

	if(!buff )
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <FIFO_init+0x16>
		return FIFO_NULL;
 800286a:	2303      	movs	r3, #3
 800286c:	e011      	b.n	8002892 <FIFO_init+0x3a>

	fifo->base = buff ;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 8002890:	2300      	movs	r3, #0

}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <FIFO_enqueue+0x1a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e02d      	b.n	8002916 <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d107      	bne.n	80028d6 <FIFO_enqueue+0x3a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d101      	bne.n	80028d6 <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e01f      	b.n	8002916 <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68d2      	ldr	r2, [r2, #12]
 80028f0:	4611      	mov	r1, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6912      	ldr	r2, [r2, #16]
 80028f6:	0092      	lsls	r2, r2, #2
 80028f8:	440a      	add	r2, r1
 80028fa:	3a04      	subs	r2, #4
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d104      	bne.n	800290a <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	e004      	b.n	8002914 <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	1d1a      	adds	r2, r3, #4
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 8002914:	2300      	movs	r3, #0


}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <FIFO_is_full>:



/* *********************************** */

Buffer_status FIFO_is_full (FIFO_Buf_t* fifo){
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

	if(!fifo->head || !fifo->base || !fifo->tail)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d007      	beq.n	8002940 <FIFO_is_full+0x20>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <FIFO_is_full+0x20>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <FIFO_is_full+0x24>
		return FIFO_NULL;
 8002940:	2303      	movs	r3, #3
 8002942:	e00e      	b.n	8002962 <FIFO_is_full+0x42>
	if(fifo->counter == fifo->length)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	429a      	cmp	r2, r3
 800294e:	d101      	bne.n	8002954 <FIFO_is_full+0x34>
		return FIFO_FULL;
 8002950:	2301      	movs	r3, #1
 8002952:	e006      	b.n	8002962 <FIFO_is_full+0x42>
	if(fifo->counter ==0)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <FIFO_is_full+0x40>
		return FIFO_EMPTY;
 800295c:	2302      	movs	r3, #2
 800295e:	e000      	b.n	8002962 <FIFO_is_full+0x42>

	return FIFO_NOT_FULL;
 8002960:	2304      	movs	r3, #4
}
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <MYRTOS_IdleTask>:
extern TaskRefType* Ready_QUEUE_FIFO[10] ;
TaskRefType MYRTOS_idleTask;

// idle task
void MYRTOS_IdleTask()
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
	IdleTaskLED ^=1;
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <MYRTOS_IdleTask+0x34>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	f083 0301 	eor.w	r3, r3, #1
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <MYRTOS_IdleTask+0x34>)
 800297c:	701a      	strb	r2, [r3, #0]
	IdleTaskLED ^=1;
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <MYRTOS_IdleTask+0x34>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	f083 0301 	eor.w	r3, r3, #1
 8002986:	b2da      	uxtb	r2, r3
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <MYRTOS_IdleTask+0x34>)
 800298a:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		IdleTaskLED ^=1;
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <MYRTOS_IdleTask+0x34>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	f083 0301 	eor.w	r3, r3, #1
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4b02      	ldr	r3, [pc, #8]	; (80029a0 <MYRTOS_IdleTask+0x34>)
 8002998:	701a      	strb	r2, [r3, #0]
		__asm("WFE");
 800299a:	bf20      	wfe
		IdleTaskLED ^=1;
 800299c:	e7f6      	b.n	800298c <MYRTOS_IdleTask+0x20>
 800299e:	bf00      	nop
 80029a0:	200005a8 	.word	0x200005a8

080029a4 <PendSV_Handler>:
* 				such as saving and restoring task context, updating task states,
* 				or performing other operations related to task scheduling or context management.
*****************************************************************************************/
__attribute ((naked)) void PendSV_Handler()
{
	if(OS_Control.NextTask != NULL)
 80029a4:	4b9a      	ldr	r3, [pc, #616]	; (8002c10 <PendSV_Handler+0x26c>)
 80029a6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8125 	beq.w	8002bfa <PendSV_Handler+0x256>
	{
		if(OS_Control.CurrentTask->TaskType!=Basic_Task||OS_Control.CurrentTask->TaskState!=Suspend)
 80029b0:	4b97      	ldr	r3, [pc, #604]	; (8002c10 <PendSV_Handler+0x26c>)
 80029b2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80029b6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <PendSV_Handler+0x28>
 80029be:	4b94      	ldr	r3, [pc, #592]	; (8002c10 <PendSV_Handler+0x26c>)
 80029c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80029c4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d067      	beq.n	8002a9c <PendSV_Handler+0xf8>
		{
			//====================================
			//Save the Context of the Current Task
			//====================================
			//Get the Current Task "Current PSP from CPU register" as CPU Push
			OS_GET_PSP(OS_Control.CurrentTask->Current_PSP);
 80029cc:	4b90      	ldr	r3, [pc, #576]	; (8002c10 <PendSV_Handler+0x26c>)
 80029ce:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80029d2:	f3ef 8009 	mrs	r0, PSP
 80029d6:	4602      	mov	r2, r0
 80029d8:	615a      	str	r2, [r3, #20]
			//using this Current_PSP store from R4 to R11
			OS_Control.CurrentTask->Current_PSP-- ;
 80029da:	4b8d      	ldr	r3, [pc, #564]	; (8002c10 <PendSV_Handler+0x26c>)
 80029dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	3a04      	subs	r2, #4
 80029e4:	615a      	str	r2, [r3, #20]
			__asm volatile("mov %0,r4 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 80029e6:	4b8a      	ldr	r3, [pc, #552]	; (8002c10 <PendSV_Handler+0x26c>)
 80029e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	4622      	mov	r2, r4
 80029f0:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 80029f2:	4b87      	ldr	r3, [pc, #540]	; (8002c10 <PendSV_Handler+0x26c>)
 80029f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	3a04      	subs	r2, #4
 80029fc:	615a      	str	r2, [r3, #20]
			__asm volatile("mov %0,r5 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 80029fe:	4b84      	ldr	r3, [pc, #528]	; (8002c10 <PendSV_Handler+0x26c>)
 8002a00:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	462a      	mov	r2, r5
 8002a08:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 8002a0a:	4b81      	ldr	r3, [pc, #516]	; (8002c10 <PendSV_Handler+0x26c>)
 8002a0c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a10:	695a      	ldr	r2, [r3, #20]
 8002a12:	3a04      	subs	r2, #4
 8002a14:	615a      	str	r2, [r3, #20]
			__asm volatile("mov %0,r6 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002a16:	4b7e      	ldr	r3, [pc, #504]	; (8002c10 <PendSV_Handler+0x26c>)
 8002a18:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	4632      	mov	r2, r6
 8002a20:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 8002a22:	4b7b      	ldr	r3, [pc, #492]	; (8002c10 <PendSV_Handler+0x26c>)
 8002a24:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a28:	695a      	ldr	r2, [r3, #20]
 8002a2a:	3a04      	subs	r2, #4
 8002a2c:	615a      	str	r2, [r3, #20]
			__asm volatile("mov %0,r7 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002a2e:	4b78      	ldr	r3, [pc, #480]	; (8002c10 <PendSV_Handler+0x26c>)
 8002a30:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	463a      	mov	r2, r7
 8002a38:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 8002a3a:	4b75      	ldr	r3, [pc, #468]	; (8002c10 <PendSV_Handler+0x26c>)
 8002a3c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	3a04      	subs	r2, #4
 8002a44:	615a      	str	r2, [r3, #20]
			__asm volatile("mov %0,r8 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002a46:	4b72      	ldr	r3, [pc, #456]	; (8002c10 <PendSV_Handler+0x26c>)
 8002a48:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	4642      	mov	r2, r8
 8002a50:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 8002a52:	4b6f      	ldr	r3, [pc, #444]	; (8002c10 <PendSV_Handler+0x26c>)
 8002a54:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	3a04      	subs	r2, #4
 8002a5c:	615a      	str	r2, [r3, #20]
			__asm volatile("mov %0,r9 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002a5e:	4b6c      	ldr	r3, [pc, #432]	; (8002c10 <PendSV_Handler+0x26c>)
 8002a60:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	464a      	mov	r2, r9
 8002a68:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 8002a6a:	4b69      	ldr	r3, [pc, #420]	; (8002c10 <PendSV_Handler+0x26c>)
 8002a6c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	3a04      	subs	r2, #4
 8002a74:	615a      	str	r2, [r3, #20]
			__asm volatile("mov %0,r10 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002a76:	4b66      	ldr	r3, [pc, #408]	; (8002c10 <PendSV_Handler+0x26c>)
 8002a78:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	4652      	mov	r2, sl
 8002a80:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 8002a82:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <PendSV_Handler+0x26c>)
 8002a84:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	3a04      	subs	r2, #4
 8002a8c:	615a      	str	r2, [r3, #20]
			__asm volatile("mov %0,r11 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002a8e:	4b60      	ldr	r3, [pc, #384]	; (8002c10 <PendSV_Handler+0x26c>)
 8002a90:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	465a      	mov	r2, fp
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	e041      	b.n	8002b20 <PendSV_Handler+0x17c>
			 */
		}
		else
		{
			//basic task reallocate stack
			OS_Control.CurrentTask->Current_PSP= OS_Control.CurrentTask->_S_PSP_Task ;
 8002a9c:	4b5c      	ldr	r3, [pc, #368]	; (8002c10 <PendSV_Handler+0x26c>)
 8002a9e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	4b5a      	ldr	r3, [pc, #360]	; (8002c10 <PendSV_Handler+0x26c>)
 8002aa6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002aaa:	615a      	str	r2, [r3, #20]
			OS_Control.CurrentTask->Current_PSP-- ;
 8002aac:	4b58      	ldr	r3, [pc, #352]	; (8002c10 <PendSV_Handler+0x26c>)
 8002aae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	3a04      	subs	r2, #4
 8002ab6:	615a      	str	r2, [r3, #20]
			*(OS_Control.CurrentTask->Current_PSP) = 0x01000000;
 8002ab8:	4b55      	ldr	r3, [pc, #340]	; (8002c10 <PendSV_Handler+0x26c>)
 8002aba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ac4:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 8002ac6:	4b52      	ldr	r3, [pc, #328]	; (8002c10 <PendSV_Handler+0x26c>)
 8002ac8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	3a04      	subs	r2, #4
 8002ad0:	615a      	str	r2, [r3, #20]
			*(OS_Control.CurrentTask->Current_PSP) = (uint32_t)OS_Control.CurrentTask->P_TaskEntry ;
 8002ad2:	4b4f      	ldr	r3, [pc, #316]	; (8002c10 <PendSV_Handler+0x26c>)
 8002ad4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	4b4d      	ldr	r3, [pc, #308]	; (8002c10 <PendSV_Handler+0x26c>)
 8002adc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	601a      	str	r2, [r3, #0]
			OS_Control.CurrentTask->Current_PSP-- ;
 8002ae4:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <PendSV_Handler+0x26c>)
 8002ae6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	3a04      	subs	r2, #4
 8002aee:	615a      	str	r2, [r3, #20]
			*(OS_Control.CurrentTask->Current_PSP)  = 0xFFFFFFFD ;
 8002af0:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <PendSV_Handler+0x26c>)
 8002af2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	f06f 0202 	mvn.w	r2, #2
 8002afc:	601a      	str	r2, [r3, #0]
			//set R0 to R12 by value 0
			for (int  i=0 ; i< 13 ; i++ )
 8002afe:	2400      	movs	r4, #0
 8002b00:	e00c      	b.n	8002b1c <PendSV_Handler+0x178>
			{
				OS_Control.CurrentTask->Current_PSP-- ;
 8002b02:	4b43      	ldr	r3, [pc, #268]	; (8002c10 <PendSV_Handler+0x26c>)
 8002b04:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	3a04      	subs	r2, #4
 8002b0c:	615a      	str	r2, [r3, #20]
				*(OS_Control.CurrentTask->Current_PSP)  = 0 ;
 8002b0e:	4b40      	ldr	r3, [pc, #256]	; (8002c10 <PendSV_Handler+0x26c>)
 8002b10:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
			for (int  i=0 ; i< 13 ; i++ )
 8002b1a:	3401      	adds	r4, #1
 8002b1c:	2c0c      	cmp	r4, #12
 8002b1e:	ddf0      	ble.n	8002b02 <PendSV_Handler+0x15e>

		}
		//====================================
		//Restore the Context of the Next Task
		//====================================
		OS_Control.CurrentTask = OS_Control.NextTask ;
 8002b20:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <PendSV_Handler+0x26c>)
 8002b22:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002b26:	4a3a      	ldr	r2, [pc, #232]	; (8002c10 <PendSV_Handler+0x26c>)
 8002b28:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		__asm volatile("mov r11,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002b2c:	4b38      	ldr	r3, [pc, #224]	; (8002c10 <PendSV_Handler+0x26c>)
 8002b2e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	469b      	mov	fp, r3
		OS_Control.CurrentTask->Current_PSP++ ;
 8002b38:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <PendSV_Handler+0x26c>)
 8002b3a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	3204      	adds	r2, #4
 8002b42:	615a      	str	r2, [r3, #20]
		__asm volatile("mov r10,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002b44:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <PendSV_Handler+0x26c>)
 8002b46:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	469a      	mov	sl, r3
		OS_Control.CurrentTask->Current_PSP++ ;
 8002b50:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <PendSV_Handler+0x26c>)
 8002b52:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	3204      	adds	r2, #4
 8002b5a:	615a      	str	r2, [r3, #20]
		__asm volatile("mov r9,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002b5c:	4b2c      	ldr	r3, [pc, #176]	; (8002c10 <PendSV_Handler+0x26c>)
 8002b5e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4699      	mov	r9, r3
		OS_Control.CurrentTask->Current_PSP++ ;
 8002b68:	4b29      	ldr	r3, [pc, #164]	; (8002c10 <PendSV_Handler+0x26c>)
 8002b6a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	3204      	adds	r2, #4
 8002b72:	615a      	str	r2, [r3, #20]
		__asm volatile("mov r8,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002b74:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <PendSV_Handler+0x26c>)
 8002b76:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4698      	mov	r8, r3
		OS_Control.CurrentTask->Current_PSP++ ;
 8002b80:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <PendSV_Handler+0x26c>)
 8002b82:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	3204      	adds	r2, #4
 8002b8a:	615a      	str	r2, [r3, #20]
		__asm volatile("mov r7,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002b8c:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <PendSV_Handler+0x26c>)
 8002b8e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461f      	mov	r7, r3
		OS_Control.CurrentTask->Current_PSP++ ;
 8002b98:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <PendSV_Handler+0x26c>)
 8002b9a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	3204      	adds	r2, #4
 8002ba2:	615a      	str	r2, [r3, #20]
		__asm volatile("mov r6,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002ba4:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <PendSV_Handler+0x26c>)
 8002ba6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461e      	mov	r6, r3
		OS_Control.CurrentTask->Current_PSP++ ;
 8002bb0:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <PendSV_Handler+0x26c>)
 8002bb2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	3204      	adds	r2, #4
 8002bba:	615a      	str	r2, [r3, #20]
		__asm volatile("mov r5,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002bbc:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <PendSV_Handler+0x26c>)
 8002bbe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461d      	mov	r5, r3
		OS_Control.CurrentTask->Current_PSP++ ;
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <PendSV_Handler+0x26c>)
 8002bca:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	3204      	adds	r2, #4
 8002bd2:	615a      	str	r2, [r3, #20]
		__asm volatile("mov r4,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <PendSV_Handler+0x26c>)
 8002bd6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	461c      	mov	r4, r3
		OS_Control.CurrentTask->Current_PSP++ ;
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <PendSV_Handler+0x26c>)
 8002be2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	3204      	adds	r2, #4
 8002bea:	615a      	str	r2, [r3, #20]
		//update PSP and exit
		OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8002bec:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <PendSV_Handler+0x26c>)
 8002bee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f380 8809 	msr	PSP, r0
		// return to next task
	}
	OS_Control.NextTask = NULL ;
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <PendSV_Handler+0x26c>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	OS_Control.Call_Leve=TASK_LEVEL;
 8002c02:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <PendSV_Handler+0x26c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
	__asm volatile("BX LR");
 8002c0a:	4770      	bx	lr
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	200003b4 	.word	0x200003b4

08002c14 <MYRTOS_Create_MainStack>:
* @Fn          - MYRTOS_Create_MainStack
* @brief       - Creates the main stack for the MYRTOS (My Real-Time Operating System)
* @retval      - None
******************************************************************************************/
void MYRTOS_Create_MainStack()
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task = &_estack;
 8002c18:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <MYRTOS_Create_MainStack+0x34>)
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <MYRTOS_Create_MainStack+0x38>)
 8002c1c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP_Task = OS_Control._S_MSP_Task - MainStackSize;
 8002c20:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <MYRTOS_Create_MainStack+0x38>)
 8002c22:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8002c26:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8002c2a:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <MYRTOS_Create_MainStack+0x38>)
 8002c2c:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	//Aligned 8 Bytes spaces between Main Task and PSP tasks
	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP_Task - 8);
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <MYRTOS_Create_MainStack+0x38>)
 8002c32:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8002c36:	3b08      	subs	r3, #8
 8002c38:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <MYRTOS_Create_MainStack+0x38>)
 8002c3a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	//if (_E_MSP_Task <&_eheap) Error:excedded the available stack size
}
 8002c3e:	bf00      	nop
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20005000 	.word	0x20005000
 8002c4c:	200003b4 	.word	0x200003b4

08002c50 <MYRTOS_Init>:
* @Fn          - MYRTOS_Init
* @brief       - Initializes the MYRTOS (My Real-Time Operating System)
* @retval      - The error code indicating the success or failure of the initialization process
******************************************************************************************/
MY_RTOS_ErrorID MYRTOS_Init()
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
	MY_RTOS_ErrorID error = NO_ERROR ;
 8002c56:	2300      	movs	r3, #0
 8002c58:	71fb      	strb	r3, [r7, #7]
	//Update OS Mode (OSsuspend)
	OS_Control.OSmodeID = OSsuspend ;
 8002c5a:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <MYRTOS_Init+0x60>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Create main Stack for OS
	MYRTOS_Create_MainStack();
 8002c62:	f7ff ffd7 	bl	8002c14 <MYRTOS_Create_MainStack>
	//Create OS Ready Queue
	if (FIFO_init(&Ready_QUEUE, Ready_QUEUE_FIFO, 100) !=FIFO_NO_ERROR)
 8002c66:	2264      	movs	r2, #100	; 0x64
 8002c68:	4912      	ldr	r1, [pc, #72]	; (8002cb4 <MYRTOS_Init+0x64>)
 8002c6a:	4813      	ldr	r0, [pc, #76]	; (8002cb8 <MYRTOS_Init+0x68>)
 8002c6c:	f7ff fdf4 	bl	8002858 <FIFO_init>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MYRTOS_Init+0x2a>
	{
		error = Ready_Queue_Init_Error ;
 8002c76:	2301      	movs	r3, #1
 8002c78:	71fb      	strb	r3, [r7, #7]
	}
	//Configure IDLE TASK
	strcpy (MYRTOS_idleTask.Task_Name, "idleTask");
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <MYRTOS_Init+0x6c>)
 8002c7c:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <MYRTOS_Init+0x70>)
 8002c7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c80:	c303      	stmia	r3!, {r0, r1}
 8002c82:	701a      	strb	r2, [r3, #0]
	MYRTOS_idleTask.priority = 0 ;
 8002c84:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <MYRTOS_Init+0x74>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	711a      	strb	r2, [r3, #4]
	MYRTOS_idleTask.P_TaskEntry = MYRTOS_IdleTask ;
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <MYRTOS_Init+0x74>)
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <MYRTOS_Init+0x78>)
 8002c8e:	609a      	str	r2, [r3, #8]
	MYRTOS_idleTask.Stack_Size = 300 ;
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <MYRTOS_Init+0x74>)
 8002c92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c96:	601a      	str	r2, [r3, #0]
	MYRTOS_CreateTask(&MYRTOS_idleTask);
 8002c98:	480a      	ldr	r0, [pc, #40]	; (8002cc4 <MYRTOS_Init+0x74>)
 8002c9a:	f000 f855 	bl	8002d48 <MYRTOS_CreateTask>
	MYRTOS_idleTask.TaskSchedlerType=FULL_PREEMPTIVE;
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <MYRTOS_Init+0x74>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	return error ;
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	200003b4 	.word	0x200003b4
 8002cb4:	200005c0 	.word	0x200005c0
 8002cb8:	200005ac 	.word	0x200005ac
 8002cbc:	20000578 	.word	0x20000578
 8002cc0:	08004824 	.word	0x08004824
 8002cc4:	20000560 	.word	0x20000560
 8002cc8:	0800296d 	.word	0x0800296d

08002ccc <MyRTOS_Create_TaskStack>:
* @brief       - Creates the stack for a specific task in MyRTOS
* @param [in]  - Tref: Pointer to the TaskRefType structure representing the task
* @retval      - None
*****************************************************************************************/
void MyRTOS_Create_TaskStack(TaskRefType* Tref)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
	 * DUMMY Value
	 * XPSR should T =1 to thumb mode
	 * LR = 0xFFFFFFFD (EXC_RETURN)Return to thread with PSP
	 */
	//set current PSP
	Tref->Current_PSP = Tref->_S_PSP_Task ;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	615a      	str	r2, [r3, #20]
	Tref->Current_PSP-- ;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	1f1a      	subs	r2, r3, #4
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	615a      	str	r2, [r3, #20]
	*(Tref->Current_PSP) = 0x01000000;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cf0:	601a      	str	r2, [r3, #0]
	Tref->Current_PSP-- ;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	1f1a      	subs	r2, r3, #4
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	615a      	str	r2, [r3, #20]
	*(Tref->Current_PSP) = (uint32_t)Tref->P_TaskEntry ;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	601a      	str	r2, [r3, #0]
	Tref->Current_PSP-- ;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	1f1a      	subs	r2, r3, #4
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	615a      	str	r2, [r3, #20]
	*(Tref->Current_PSP)  = 0xFFFFFFFD ;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	f06f 0202 	mvn.w	r2, #2
 8002d18:	601a      	str	r2, [r3, #0]
	//set R0 to R12 by value 0
	for (int  i=0 ; i< 13 ; i++ )
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	e00b      	b.n	8002d38 <MyRTOS_Create_TaskStack+0x6c>
	{
		Tref->Current_PSP-- ;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	1f1a      	subs	r2, r3, #4
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	615a      	str	r2, [r3, #20]
		*(Tref->Current_PSP)  = 0 ;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
	for (int  i=0 ; i< 13 ; i++ )
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3301      	adds	r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	ddf0      	ble.n	8002d20 <MyRTOS_Create_TaskStack+0x54>
	}
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <MYRTOS_CreateTask>:
* @brief       - Creates a new task in MyRTOS
* @param [in]  - Tref: Pointer to the TaskRefType structure representing the task
* @retval      - The error code indicating the success or failure of the task creation
*******************************************************************************************/
void MYRTOS_CreateTask(TaskRefType* Tref)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
	//Create Its OWN PSP Stack
	// Start PSP Stack for Tref
	Tref->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 8002d50:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <MYRTOS_CreateTask+0x80>)
 8002d52:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	60da      	str	r2, [r3, #12]
	// End PSP Stack for Tref
	Tref->_E_PSP_Task = Tref->_S_PSP_Task - Tref->Stack_Size ;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	1ad2      	subs	r2, r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	611a      	str	r2, [r3, #16]
	//check that the stack task  does not exceed the stack size
	if(Tref->_E_PSP_Task < (uint32_t)(&(_eheap)))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <MYRTOS_CreateTask+0x84>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d201      	bcs.n	8002d76 <MYRTOS_CreateTask+0x2e>
	{
		HardFault_Handler();
 8002d72:	f7ff fba5 	bl	80024c0 <HardFault_Handler>
	}
	//Aligned 8 Bytes spaces between Current Task PSP and next
	OS_Control.PSP_Task_Locator=(Tref->_E_PSP_Task-8);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	3b08      	subs	r3, #8
 8002d7c:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <MYRTOS_CreateTask+0x80>)
 8002d7e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	//Initialize PSP Task Stack
	MyRTOS_Create_TaskStack(Tref);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff ffa2 	bl	8002ccc <MyRTOS_Create_TaskStack>
	//update Scheduler Table
	OS_Control.OSTasks[OS_Control.NoOfActiveTasks]= Tref ;
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <MYRTOS_CreateTask+0x80>)
 8002d8a:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8002d8e:	490e      	ldr	r1, [pc, #56]	; (8002dc8 <MYRTOS_CreateTask+0x80>)
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.NoOfActiveTasks++ ;
 8002d96:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <MYRTOS_CreateTask+0x80>)
 8002d98:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <MYRTOS_CreateTask+0x80>)
 8002da0:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
	//Task by default State is Suspend
	if(Tref->AutoStart)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <MYRTOS_CreateTask+0x6e>
	{
		ActivateTask(Tref);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f852 	bl	8002e58 <ActivateTask>
	}
	else
		Tref->TaskState = Suspend ;
}
 8002db4:	e003      	b.n	8002dbe <MYRTOS_CreateTask+0x76>
		Tref->TaskState = Suspend ;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200003b4 	.word	0x200003b4
 8002dcc:	20000e78 	.word	0x20000e78

08002dd0 <MYRTOS_STARTOS>:
/****************************************************************************************
 * @Fn          - MYRTOS_CreateTask
 ******************************************************************************************/
void MYRTOS_STARTOS()
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
	OS_Control.CurrentTask=&MYRTOS_idleTask;
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <MYRTOS_STARTOS+0x7c>)
 8002dd6:	4a1e      	ldr	r2, [pc, #120]	; (8002e50 <MYRTOS_STARTOS+0x80>)
 8002dd8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	if(Ready_QUEUE.counter==0)
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <MYRTOS_STARTOS+0x84>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10c      	bne.n	8002dfe <MYRTOS_STARTOS+0x2e>
	{
		OS_Control.NextTask=&MYRTOS_idleTask;
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <MYRTOS_STARTOS+0x7c>)
 8002de6:	4a1a      	ldr	r2, [pc, #104]	; (8002e50 <MYRTOS_STARTOS+0x80>)
 8002de8:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		MYRTOS_idleTask.TaskState=Ready;
 8002dec:	4b18      	ldr	r3, [pc, #96]	; (8002e50 <MYRTOS_STARTOS+0x80>)
 8002dee:	2203      	movs	r2, #3
 8002df0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		OS_Control.CurrentTask=&MYRTOS_idleTask;
 8002df4:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <MYRTOS_STARTOS+0x7c>)
 8002df6:	4a16      	ldr	r2, [pc, #88]	; (8002e50 <MYRTOS_STARTOS+0x80>)
 8002df8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
 8002dfc:	e001      	b.n	8002e02 <MYRTOS_STARTOS+0x32>
	}
	else
	{
		Schedule();
 8002dfe:	f000 f88f 	bl	8002f20 <Schedule>
	}
	OS_Control.CurrentTask=&MYRTOS_idleTask;
 8002e02:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <MYRTOS_STARTOS+0x7c>)
 8002e04:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <MYRTOS_STARTOS+0x80>)
 8002e06:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	//Start Ticker
	Start_Ticker(); // 1ms
 8002e0a:	f7ff fb81 	bl	8002510 <Start_Ticker>
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <MYRTOS_STARTOS+0x7c>)
 8002e10:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f380 8809 	msr	PSP, r0
	//Switch Thread Mode SP from MSP to PSP
	OS_Switch_SP_PSP;
 8002e1c:	f3ef 8014 	mrs	r0, CONTROL
 8002e20:	f040 0002 	orr.w	r0, r0, #2
 8002e24:	f380 8814 	msr	CONTROL, r0
	OS_Control.OSmodeID = OsRunning ;
 8002e28:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <MYRTOS_STARTOS+0x7c>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	trigger_OS_PendSV();
 8002e30:	f7ff fb58 	bl	80024e4 <trigger_OS_PendSV>
	CPU_Access_Level_Unprivileged();
 8002e34:	f3ef 8314 	mrs	r3, CONTROL
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	f383 8814 	msr	CONTROL, r3
	MYRTOS_idleTask.P_TaskEntry();
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <MYRTOS_STARTOS+0x80>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	4798      	blx	r3
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	200003b4 	.word	0x200003b4
 8002e50:	20000560 	.word	0x20000560
 8002e54:	200005ac 	.word	0x200005ac

08002e58 <ActivateTask>:
* @param [in] 		-TaskName:  a reference to the task.
* @retval 			-StatusType
* Note				-The service may be called both on the task level (from a task) and the interrupt level (from ISR).
*/
StatusType ActivateTask(TaskRefType* TaskName)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	//The specified task TaskName is transferred from the suspended state into the ready state.
	StatusType status=E_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]
	if(NULL==TaskName)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <ActivateTask+0x1a>
	{
		//the task identifier TaskName is invalid
		status=E_OS_ID;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]
		return status;
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	e04e      	b.n	8002f10 <ActivateTask+0xb8>
	}
	else
	{
		if(TaskName->MultipleActivation==0)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d148      	bne.n	8002f0e <ActivateTask+0xb6>
		{
			if(TaskName->TaskState==Suspend)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d13f      	bne.n	8002f06 <ActivateTask+0xae>
			{
				if(FIFO_is_full(&Ready_QUEUE)==FIFO_NOT_FULL||FIFO_is_full(&Ready_QUEUE)==FIFO_EMPTY)
 8002e86:	4824      	ldr	r0, [pc, #144]	; (8002f18 <ActivateTask+0xc0>)
 8002e88:	f7ff fd4a 	bl	8002920 <FIFO_is_full>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d005      	beq.n	8002e9e <ActivateTask+0x46>
 8002e92:	4821      	ldr	r0, [pc, #132]	; (8002f18 <ActivateTask+0xc0>)
 8002e94:	f7ff fd44 	bl	8002920 <FIFO_is_full>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d12f      	bne.n	8002efe <ActivateTask+0xa6>
				{
					TaskName->TaskState=Ready;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
					if(OS_Control.CurrentTask->TaskSchedlerType!=NONE_PREEMPTIVE)
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <ActivateTask+0xc4>)
 8002ea8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002eac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d02c      	beq.n	8002f0e <ActivateTask+0xb6>
					{
						if(TaskName->priority>OS_Control.CurrentTask->priority)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	791a      	ldrb	r2, [r3, #4]
 8002eb8:	4b18      	ldr	r3, [pc, #96]	; (8002f1c <ActivateTask+0xc4>)
 8002eba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002ebe:	791b      	ldrb	r3, [r3, #4]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d917      	bls.n	8002ef4 <ActivateTask+0x9c>
						{
							//the new task high priority than CurrentTask
							OS_Control.NextTask=TaskName;
 8002ec4:	4a15      	ldr	r2, [pc, #84]	; (8002f1c <ActivateTask+0xc4>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
							//push current Queue
							FIFO_enqueue(&Ready_QUEUE,OS_Control.CurrentTask);
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <ActivateTask+0xc4>)
 8002ece:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4810      	ldr	r0, [pc, #64]	; (8002f18 <ActivateTask+0xc0>)
 8002ed6:	f7ff fce1 	bl	800289c <FIFO_enqueue>
							if(OS_Control.OSmodeID==OsRunning)
 8002eda:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <ActivateTask+0xc4>)
 8002edc:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d102      	bne.n	8002eea <ActivateTask+0x92>
							{
								trigger_OS_PendSV();
 8002ee4:	f7ff fafe 	bl	80024e4 <trigger_OS_PendSV>
					if(OS_Control.CurrentTask->TaskSchedlerType!=NONE_PREEMPTIVE)
 8002ee8:	e011      	b.n	8002f0e <ActivateTask+0xb6>
							}
							else
							{
								/************************************************************************/
								//Add task to ready buffer
								FIFO_enqueue(&Ready_QUEUE, TaskName);
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	480a      	ldr	r0, [pc, #40]	; (8002f18 <ActivateTask+0xc0>)
 8002eee:	f7ff fcd5 	bl	800289c <FIFO_enqueue>
					if(OS_Control.CurrentTask->TaskSchedlerType!=NONE_PREEMPTIVE)
 8002ef2:	e00c      	b.n	8002f0e <ActivateTask+0xb6>
						}
						else
						{
							/************************************************************************/
							//Add task to ready buffer
							FIFO_enqueue(&Ready_QUEUE, TaskName);
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4808      	ldr	r0, [pc, #32]	; (8002f18 <ActivateTask+0xc0>)
 8002ef8:	f7ff fcd0 	bl	800289c <FIFO_enqueue>
					if(OS_Control.CurrentTask->TaskSchedlerType!=NONE_PREEMPTIVE)
 8002efc:	e007      	b.n	8002f0e <ActivateTask+0xb6>
					}
				}
				else
				{
					// too many task activations of the specified task or there is no enough resources to activate the task.
					status=E_OS_LIMIT;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
					return status;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	e004      	b.n	8002f10 <ActivateTask+0xb8>
				}
			}
			else
			{
				// Too many task activations of <TaskID>
				status=E_OS_LIMIT;
 8002f06:	2301      	movs	r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
				return status;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	e000      	b.n	8002f10 <ActivateTask+0xb8>
		else
		{
			//later (MultipleActivation property in Basic Task)
		}
	}
	return status;
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	200005ac 	.word	0x200005ac
 8002f1c:	200003b4 	.word	0x200003b4

08002f20 <Schedule>:
* @param [out] 		-None
* @retval 			-StatusType
* Note				-None
*/
StatusType Schedule(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
	StatusType Error=E_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	73bb      	strb	r3, [r7, #14]
	TaskRefType* Temp;
	uint32_t IRQ_Flag=0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60bb      	str	r3, [r7, #8]
	//read state of cpu
	OS_GET_IRQ_Flag(IRQ_Flag);
 8002f2e:	f3ef 8005 	mrs	r0, IPSR
 8002f32:	4603      	mov	r3, r0
 8002f34:	60bb      	str	r3, [r7, #8]
	if(IRQ_Flag!=0&&IRQ_Flag!=36&&IRQ_Flag!=15)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d010      	beq.n	8002f5e <Schedule+0x3e>
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b24      	cmp	r3, #36	; 0x24
 8002f40:	d00d      	beq.n	8002f5e <Schedule+0x3e>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b0f      	cmp	r3, #15
 8002f46:	d00a      	beq.n	8002f5e <Schedule+0x3e>
	{
		if(OS_Control.CurrentTask->TaskType==Extended_Task)
 8002f48:	4b34      	ldr	r3, [pc, #208]	; (800301c <Schedule+0xfc>)
 8002f4a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002f4e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d15b      	bne.n	800300e <Schedule+0xee>
		{
			// a call at the interrupt level.
			Error=E_OS_CALLEVEL;
 8002f56:	2303      	movs	r3, #3
 8002f58:	73bb      	strb	r3, [r7, #14]
			return Error;
 8002f5a:	7bbb      	ldrb	r3, [r7, #14]
 8002f5c:	e058      	b.n	8003010 <Schedule+0xf0>
			// No return to the caller (handle later)
		}
	}
	else
	{
		for(int i=0;i<OS_Control.NoOfActiveTasks-1;i++)
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e02d      	b.n	8002fc0 <Schedule+0xa0>
		{
			for(int j=i+1;j<OS_Control.NoOfActiveTasks;j++)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	3301      	adds	r3, #1
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	e020      	b.n	8002fae <Schedule+0x8e>
			{
				if(OS_Control.OSTasks[i]->priority<OS_Control.OSTasks[j]->priority)
 8002f6c:	4a2b      	ldr	r2, [pc, #172]	; (800301c <Schedule+0xfc>)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f74:	791a      	ldrb	r2, [r3, #4]
 8002f76:	4929      	ldr	r1, [pc, #164]	; (800301c <Schedule+0xfc>)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f7e:	791b      	ldrb	r3, [r3, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d211      	bcs.n	8002fa8 <Schedule+0x88>
				{
					Temp=OS_Control.OSTasks[i];
 8002f84:	4a25      	ldr	r2, [pc, #148]	; (800301c <Schedule+0xfc>)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8c:	607b      	str	r3, [r7, #4]
					OS_Control.OSTasks[i]=OS_Control.OSTasks[j];
 8002f8e:	4a23      	ldr	r2, [pc, #140]	; (800301c <Schedule+0xfc>)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f96:	4921      	ldr	r1, [pc, #132]	; (800301c <Schedule+0xfc>)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					OS_Control.OSTasks[j]=Temp;
 8002f9e:	491f      	ldr	r1, [pc, #124]	; (800301c <Schedule+0xfc>)
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int j=i+1;j<OS_Control.NoOfActiveTasks;j++)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	3301      	adds	r3, #1
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	4b1b      	ldr	r3, [pc, #108]	; (800301c <Schedule+0xfc>)
 8002fb0:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d8d8      	bhi.n	8002f6c <Schedule+0x4c>
		for(int i=0;i<OS_Control.NoOfActiveTasks-1;i++)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	4b16      	ldr	r3, [pc, #88]	; (800301c <Schedule+0xfc>)
 8002fc2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8002fc6:	1e5a      	subs	r2, r3, #1
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d8ca      	bhi.n	8002f64 <Schedule+0x44>
					//
				}
			}
		}
		//initial value for Next Task
		OS_Control.NextTask=&MYRTOS_idleTask;
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <Schedule+0xfc>)
 8002fd0:	4a13      	ldr	r2, [pc, #76]	; (8003020 <Schedule+0x100>)
 8002fd2:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		uint8_t index=0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	73fb      	strb	r3, [r7, #15]
		while(index< OS_Control.NoOfActiveTasks)
 8002fda:	e012      	b.n	8003002 <Schedule+0xe2>
		{
			//select ready task
			if (OS_Control.OSTasks[index]->TaskState == Ready)
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	4a0f      	ldr	r2, [pc, #60]	; (800301c <Schedule+0xfc>)
 8002fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d107      	bne.n	8002ffc <Schedule+0xdc>
			{
				OS_Control.NextTask=OS_Control.OSTasks[index] ;
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	4a0b      	ldr	r2, [pc, #44]	; (800301c <Schedule+0xfc>)
 8002ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff4:	4a09      	ldr	r2, [pc, #36]	; (800301c <Schedule+0xfc>)
 8002ff6:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
				break ;
 8002ffa:	e008      	b.n	800300e <Schedule+0xee>
			}
			else
			{
				index++ ;
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	3301      	adds	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
		while(index< OS_Control.NoOfActiveTasks)
 8003002:	7bfa      	ldrb	r2, [r7, #15]
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <Schedule+0xfc>)
 8003006:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800300a:	429a      	cmp	r2, r3
 800300c:	d3e6      	bcc.n	8002fdc <Schedule+0xbc>
			}
		}
	}
	return Error;
 800300e:	7bbb      	ldrb	r3, [r7, #14]
}
 8003010:	4618      	mov	r0, r3
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	200003b4 	.word	0x200003b4
 8003020:	20000560 	.word	0x20000560

08003024 <Os_Init>:
extern TASK(Task2);
extern TASK(Task1_Led_ON);
extern TASK(Task2_Led_OFF);

void Os_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
	HW_init();
 8003028:	f7ff fa53 	bl	80024d2 <HW_init>
	if (MYRTOS_Init() != NO_ERROR)
 800302c:	f7ff fe10 	bl	8002c50 <MYRTOS_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d000      	beq.n	8003038 <Os_Init+0x14>
		while (1);
 8003036:	e7fe      	b.n	8003036 <Os_Init+0x12>
	//DefineTask(Task1_Led_ON,512,Task_Suspend,5,FULL_PREEMPTIVE,Extended_Task);
	//DefineTask(Task2_Led_OFF,512,Task_Suspend,4,FULL_PREEMPTIVE,Extended_Task);
	DefineTask(Task1,512,Task_Suspend,5,FULL_PREEMPTIVE,Extended_Task);
 8003038:	4b36      	ldr	r3, [pc, #216]	; (8003114 <Os_Init+0xf0>)
 800303a:	4a37      	ldr	r2, [pc, #220]	; (8003118 <Os_Init+0xf4>)
 800303c:	609a      	str	r2, [r3, #8]
 800303e:	4b35      	ldr	r3, [pc, #212]	; (8003114 <Os_Init+0xf0>)
 8003040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	4b33      	ldr	r3, [pc, #204]	; (8003114 <Os_Init+0xf0>)
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800304e:	4b33      	ldr	r3, [pc, #204]	; (800311c <Os_Init+0xf8>)
 8003050:	4a33      	ldr	r2, [pc, #204]	; (8003120 <Os_Init+0xfc>)
 8003052:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003056:	6018      	str	r0, [r3, #0]
 8003058:	3304      	adds	r3, #4
 800305a:	8019      	strh	r1, [r3, #0]
 800305c:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <Os_Init+0xf0>)
 800305e:	2205      	movs	r2, #5
 8003060:	711a      	strb	r2, [r3, #4]
 8003062:	4b2c      	ldr	r3, [pc, #176]	; (8003114 <Os_Init+0xf0>)
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800306a:	482a      	ldr	r0, [pc, #168]	; (8003114 <Os_Init+0xf0>)
 800306c:	f7ff fe6c 	bl	8002d48 <MYRTOS_CreateTask>
 8003070:	4b28      	ldr	r3, [pc, #160]	; (8003114 <Os_Init+0xf0>)
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	//DefineTask(Task2,512,Task_Suspend,4,FULL_PREEMPTIVE,Extended_Task);
	DefineTask(Task3,512,Task_Suspend,6,FULL_PREEMPTIVE,Extended_Task);
 8003078:	4b2a      	ldr	r3, [pc, #168]	; (8003124 <Os_Init+0x100>)
 800307a:	4a2b      	ldr	r2, [pc, #172]	; (8003128 <Os_Init+0x104>)
 800307c:	609a      	str	r2, [r3, #8]
 800307e:	4b29      	ldr	r3, [pc, #164]	; (8003124 <Os_Init+0x100>)
 8003080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	4b27      	ldr	r3, [pc, #156]	; (8003124 <Os_Init+0x100>)
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800308e:	4b27      	ldr	r3, [pc, #156]	; (800312c <Os_Init+0x108>)
 8003090:	4a27      	ldr	r2, [pc, #156]	; (8003130 <Os_Init+0x10c>)
 8003092:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003096:	6018      	str	r0, [r3, #0]
 8003098:	3304      	adds	r3, #4
 800309a:	8019      	strh	r1, [r3, #0]
 800309c:	4b21      	ldr	r3, [pc, #132]	; (8003124 <Os_Init+0x100>)
 800309e:	2206      	movs	r2, #6
 80030a0:	711a      	strb	r2, [r3, #4]
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <Os_Init+0x100>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80030aa:	481e      	ldr	r0, [pc, #120]	; (8003124 <Os_Init+0x100>)
 80030ac:	f7ff fe4c 	bl	8002d48 <MYRTOS_CreateTask>
 80030b0:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <Os_Init+0x100>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	DefineTask(Task4,512,Task_Suspend,7,FULL_PREEMPTIVE,Extended_Task);
 80030b8:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <Os_Init+0x110>)
 80030ba:	4a1f      	ldr	r2, [pc, #124]	; (8003138 <Os_Init+0x114>)
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <Os_Init+0x110>)
 80030c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <Os_Init+0x110>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80030ce:	4b1b      	ldr	r3, [pc, #108]	; (800313c <Os_Init+0x118>)
 80030d0:	4a1b      	ldr	r2, [pc, #108]	; (8003140 <Os_Init+0x11c>)
 80030d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030d6:	6018      	str	r0, [r3, #0]
 80030d8:	3304      	adds	r3, #4
 80030da:	8019      	strh	r1, [r3, #0]
 80030dc:	4b15      	ldr	r3, [pc, #84]	; (8003134 <Os_Init+0x110>)
 80030de:	2207      	movs	r2, #7
 80030e0:	711a      	strb	r2, [r3, #4]
 80030e2:	4b14      	ldr	r3, [pc, #80]	; (8003134 <Os_Init+0x110>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80030ea:	4812      	ldr	r0, [pc, #72]	; (8003134 <Os_Init+0x110>)
 80030ec:	f7ff fe2c 	bl	8002d48 <MYRTOS_CreateTask>
 80030f0:	4b10      	ldr	r3, [pc, #64]	; (8003134 <Os_Init+0x110>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	ActivateTask(&Task1);
 80030f8:	4806      	ldr	r0, [pc, #24]	; (8003114 <Os_Init+0xf0>)
 80030fa:	f7ff fead 	bl	8002e58 <ActivateTask>
	//ActivateTask(&Task2);
	ActivateTask(&Task3);
 80030fe:	4809      	ldr	r0, [pc, #36]	; (8003124 <Os_Init+0x100>)
 8003100:	f7ff feaa 	bl	8002e58 <ActivateTask>
	ActivateTask(&Task4);
 8003104:	480b      	ldr	r0, [pc, #44]	; (8003134 <Os_Init+0x110>)
 8003106:	f7ff fea7 	bl	8002e58 <ActivateTask>
	//ActivateTask(&Task1_Led_ON);
	//ActivateTask(&Task2_Led_OFF);
	MYRTOS_STARTOS();
 800310a:	f7ff fe61 	bl	8002dd0 <MYRTOS_STARTOS>
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000678 	.word	0x20000678
 8003118:	08003c39 	.word	0x08003c39
 800311c:	20000690 	.word	0x20000690
 8003120:	08004830 	.word	0x08004830
 8003124:	20000708 	.word	0x20000708
 8003128:	08003c4f 	.word	0x08003c4f
 800312c:	20000720 	.word	0x20000720
 8003130:	08004838 	.word	0x08004838
 8003134:	20000630 	.word	0x20000630
 8003138:	08003c65 	.word	0x08003c65
 800313c:	20000648 	.word	0x20000648
 8003140:	08004840 	.word	0x08004840

08003144 <get_position>:
 uint8 Flag_DIR_Change[PortNumberOfPortPins]={0};
/*************************************************************************
                               Local Functions
*************************************************************************/
 uint8 get_position(uint8 pinNumber)
 {
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
	 uint8 Pos=0;
 800314e:	2300      	movs	r3, #0
 8003150:	73fb      	strb	r3, [r7, #15]
	 if(pinNumber<PORT_B_PIN_0)
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	2b10      	cmp	r3, #16
 8003156:	d80e      	bhi.n	8003176 <get_position+0x32>
	 {
		 if(pinNumber<PORT_A_PIN_8)
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	2b08      	cmp	r3, #8
 800315c:	d805      	bhi.n	800316a <get_position+0x26>
			 Pos=((pinNumber-1)*4);
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	333f      	adds	r3, #63	; 0x3f
 8003162:	b2db      	uxtb	r3, r3
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	73fb      	strb	r3, [r7, #15]
 8003168:	e01c      	b.n	80031a4 <get_position+0x60>
		 else
			 Pos=((pinNumber-1)*4)-32;
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	3337      	adds	r3, #55	; 0x37
 800316e:	b2db      	uxtb	r3, r3
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	73fb      	strb	r3, [r7, #15]
 8003174:	e016      	b.n	80031a4 <get_position+0x60>
	 }
	 else if(pinNumber<PORT_C_PIN_13)
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	2b2d      	cmp	r3, #45	; 0x2d
 800317a:	d80e      	bhi.n	800319a <get_position+0x56>
	 {
		 if(pinNumber<PORT_B_PIN_8)
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	2b18      	cmp	r3, #24
 8003180:	d805      	bhi.n	800318e <get_position+0x4a>
			 Pos=((pinNumber-17)*4);
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	332f      	adds	r3, #47	; 0x2f
 8003186:	b2db      	uxtb	r3, r3
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	e00a      	b.n	80031a4 <get_position+0x60>
		 else
			 Pos=((pinNumber-17)*4)-32;
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	3327      	adds	r3, #39	; 0x27
 8003192:	b2db      	uxtb	r3, r3
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	73fb      	strb	r3, [r7, #15]
 8003198:	e004      	b.n	80031a4 <get_position+0x60>
	 }
	 else
	 {
		 Pos=((pinNumber-33)*4)-32;
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	3317      	adds	r3, #23
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	73fb      	strb	r3, [r7, #15]
	 }
	 return Pos;
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 }
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <Port_Init>:
* Parameters (out)	:	None
* Return value		:	None
* Description		:	Initializes the Port Driver module.
***********************************************************************/
void Port_Init( const Port_ConfigType* ConfigPtr )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
	GPIO_TypeDef* GPIO_Current=NULL_PTR;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61fb      	str	r3, [r7, #28]
	 uint8 pos=0;
 80031bc:	2300      	movs	r3, #0
 80031be:	76fb      	strb	r3, [r7, #27]
	uint32 pin_config=0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
	volatile uint32 *configregister =NULL_PTR;
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
	//uint32 pin_config=0;
	Port_Config = ConfigPtr ;
 80031c8:	4ab3      	ldr	r2, [pc, #716]	; (8003498 <Port_Init+0x2e8>)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6013      	str	r3, [r2, #0]
	#if (TRUE==PortDevErrorDetect)
		// Check APIs called with a Null Pointer
		if (NULL_PTR==ConfigPtr)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <Port_Init+0x30>
		{
			Det_ReportError(PORT_VERSION_ID,PORT_INSTANCE_ZERO,PORT_INIT_ID,PORT_E_PARAM_POINTER);
 80031d4:	2310      	movs	r3, #16
 80031d6:	2200      	movs	r2, #0
 80031d8:	2100      	movs	r1, #0
 80031da:	2028      	movs	r0, #40	; 0x28
 80031dc:	f7fe fa1e 	bl	800161c <Det_ReportError>
		else
		{
			//
		}
	#endif
	for(int Pin_Index=0;Pin_Index<PortNumberOfPortPins;Pin_Index++)
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	e21e      	b.n	8003624 <Port_Init+0x474>
	{
		pin_config=0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
		//determine GPIO current port
		if(ConfigPtr->PortPin[Pin_Index].PortPinId<PORT_B_PIN_0)
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	440b      	add	r3, r1
 80031f8:	3302      	adds	r3, #2
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b10      	cmp	r3, #16
 80031fe:	d833      	bhi.n	8003268 <Port_Init+0xb8>
		{
			GPIO_Current=GPIOA;
 8003200:	4ba6      	ldr	r3, [pc, #664]	; (800349c <Port_Init+0x2ec>)
 8003202:	61fb      	str	r3, [r7, #28]
			// GPIO->CRL configure pins 0-->>7
			// GPIO->CRH configure pins 8-->>15
			if(ConfigPtr->PortPin[Pin_Index].PortPinId<PORT_A_PIN_8)
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	440b      	add	r3, r1
 8003212:	3302      	adds	r3, #2
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b08      	cmp	r3, #8
 8003218:	d811      	bhi.n	800323e <Port_Init+0x8e>
			{
				configregister=&GPIO_Current->CRL;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	613b      	str	r3, [r7, #16]
				pos=get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)/4;
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	440b      	add	r3, r1
 800322c:	3302      	adds	r3, #2
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff87 	bl	8003144 <get_position>
 8003236:	4603      	mov	r3, r0
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	76fb      	strb	r3, [r7, #27]
 800323c:	e069      	b.n	8003312 <Port_Init+0x162>
			}
			else
			{
				configregister=&GPIO_Current->CRH;
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	3304      	adds	r3, #4
 8003242:	613b      	str	r3, [r7, #16]
				pos=(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)/4)+8;
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	440b      	add	r3, r1
 8003252:	3302      	adds	r3, #2
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff ff74 	bl	8003144 <get_position>
 800325c:	4603      	mov	r3, r0
 800325e:	089b      	lsrs	r3, r3, #2
 8003260:	b2db      	uxtb	r3, r3
 8003262:	3308      	adds	r3, #8
 8003264:	76fb      	strb	r3, [r7, #27]
 8003266:	e054      	b.n	8003312 <Port_Init+0x162>
			}
		}
		else if(ConfigPtr->PortPin[Pin_Index].PortPinId<PORT_C_PIN_13)
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	440b      	add	r3, r1
 8003276:	3302      	adds	r3, #2
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b2d      	cmp	r3, #45	; 0x2d
 800327c:	d833      	bhi.n	80032e6 <Port_Init+0x136>
		{
			GPIO_Current=GPIOB;
 800327e:	4b88      	ldr	r3, [pc, #544]	; (80034a0 <Port_Init+0x2f0>)
 8003280:	61fb      	str	r3, [r7, #28]
			// GPIO->CRL configure pins 0-->>7
			// GPIO->CRH configure pins 8-->>15
			if(ConfigPtr->PortPin[Pin_Index].PortPinId<PORT_B_PIN_8)
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	440b      	add	r3, r1
 8003290:	3302      	adds	r3, #2
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b18      	cmp	r3, #24
 8003296:	d811      	bhi.n	80032bc <Port_Init+0x10c>
			{
				configregister=&GPIO_Current->CRL;
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	613b      	str	r3, [r7, #16]
				pos=get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)/4;
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	440b      	add	r3, r1
 80032aa:	3302      	adds	r3, #2
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff ff48 	bl	8003144 <get_position>
 80032b4:	4603      	mov	r3, r0
 80032b6:	089b      	lsrs	r3, r3, #2
 80032b8:	76fb      	strb	r3, [r7, #27]
 80032ba:	e02a      	b.n	8003312 <Port_Init+0x162>
			}
			else
			{
				configregister=&GPIO_Current->CRH;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	3304      	adds	r3, #4
 80032c0:	613b      	str	r3, [r7, #16]
				pos=(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)/4)+8;
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	440b      	add	r3, r1
 80032d0:	3302      	adds	r3, #2
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff35 	bl	8003144 <get_position>
 80032da:	4603      	mov	r3, r0
 80032dc:	089b      	lsrs	r3, r3, #2
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	3308      	adds	r3, #8
 80032e2:	76fb      	strb	r3, [r7, #27]
 80032e4:	e015      	b.n	8003312 <Port_Init+0x162>
			}
		}
		else
		{
			GPIO_Current=GPIOC;
 80032e6:	4b6f      	ldr	r3, [pc, #444]	; (80034a4 <Port_Init+0x2f4>)
 80032e8:	61fb      	str	r3, [r7, #28]
			// GPIO->CRL configure pins 0-->>7
			// GPIO->CRH configure pins 8-->>15
			configregister =&GPIO_Current->CRH;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3304      	adds	r3, #4
 80032ee:	613b      	str	r3, [r7, #16]
			pos=(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)/4)+8;
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	440b      	add	r3, r1
 80032fe:	3302      	adds	r3, #2
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff ff1e 	bl	8003144 <get_position>
 8003308:	4603      	mov	r3, r0
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	b2db      	uxtb	r3, r3
 800330e:	3308      	adds	r3, #8
 8003310:	76fb      	strb	r3, [r7, #27]
		}
		//clear MODEy[1:0] and CNFy[1:0]
		(*configregister) &=~(0XF<<get_position(ConfigPtr->PortPin[Pin_Index].PortPinId));
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	440b      	add	r3, r1
 8003320:	3302      	adds	r3, #2
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff0d 	bl	8003144 <get_position>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	230f      	movs	r3, #15
 8003330:	4093      	lsls	r3, r2
 8003332:	43da      	mvns	r2, r3
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	401a      	ands	r2, r3
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	601a      	str	r2, [r3, #0]
		//pin mode
		if(ConfigPtr->PortPin[Pin_Index].PortPinDirection==PORT_PIN_OUT)
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	440b      	add	r3, r1
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	f040 80d5 	bne.w	80034fe <Port_Init+0x34e>
		{
			//Slew_Rate
			if(ConfigPtr->PortPin[Pin_Index].Slew_Rate==GPIO_Slew_Rate_10M)
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	440b      	add	r3, r1
 8003362:	3308      	adds	r3, #8
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d114      	bne.n	8003394 <Port_Init+0x1e4>
			{
				//01: Output mode, max speed 10 MHz
				pin_config|=(0b01<<get_position(ConfigPtr->PortPin[Pin_Index].PortPinId));
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	440b      	add	r3, r1
 8003378:	3302      	adds	r3, #2
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fee1 	bl	8003144 <get_position>
 8003382:	4603      	mov	r3, r0
 8003384:	461a      	mov	r2, r3
 8003386:	2301      	movs	r3, #1
 8003388:	4093      	lsls	r3, r2
 800338a:	461a      	mov	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e033      	b.n	80033fc <Port_Init+0x24c>

			}
			else if(ConfigPtr->PortPin[Pin_Index].Slew_Rate==GPIO_Slew_Rate_50M)
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	440b      	add	r3, r1
 80033a2:	3308      	adds	r3, #8
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d114      	bne.n	80033d4 <Port_Init+0x224>
			{
				//11: Output mode, max speed 50 MHz
				pin_config|=(0b11<<get_position(ConfigPtr->PortPin[Pin_Index].PortPinId));
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	440b      	add	r3, r1
 80033b8:	3302      	adds	r3, #2
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fec1 	bl	8003144 <get_position>
 80033c2:	4603      	mov	r3, r0
 80033c4:	461a      	mov	r2, r3
 80033c6:	2303      	movs	r3, #3
 80033c8:	4093      	lsls	r3, r2
 80033ca:	461a      	mov	r2, r3
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e013      	b.n	80033fc <Port_Init+0x24c>
			}
			else
			{
				//10: Output mode, max speed 2 MHz
				pin_config|=(0b10<<get_position(ConfigPtr->PortPin[Pin_Index].PortPinId));
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	440b      	add	r3, r1
 80033e2:	3302      	adds	r3, #2
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff feac 	bl	8003144 <get_position>
 80033ec:	4603      	mov	r3, r0
 80033ee:	461a      	mov	r2, r3
 80033f0:	2302      	movs	r3, #2
 80033f2:	4093      	lsls	r3, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
			}
			//Pin driven mode
			if(ConfigPtr->PortPin[Pin_Index].PortPinMode==PORT_PIN_MODE_CAN)
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	440b      	add	r3, r1
 800340a:	3305      	adds	r3, #5
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d115      	bne.n	800343e <Port_Init+0x28e>
			{
				//10: Alternate function output Push-pull
				pin_config|=(0b10<<(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)+2));
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	440b      	add	r3, r1
 8003420:	3302      	adds	r3, #2
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fe8d 	bl	8003144 <get_position>
 800342a:	4603      	mov	r3, r0
 800342c:	3302      	adds	r3, #2
 800342e:	2202      	movs	r2, #2
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	461a      	mov	r2, r3
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	4313      	orrs	r3, r2
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	e049      	b.n	80034d2 <Port_Init+0x322>
			}
			else if(ConfigPtr->PortPin[Pin_Index].PortPinMode==PORT_PIN_MODE_ADC)
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	440b      	add	r3, r1
 800344c:	3305      	adds	r3, #5
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d03e      	beq.n	80034d2 <Port_Init+0x322>
			{
				//
			}
			else
			{
				if(ConfigPtr->PortPin[Pin_Index].Pin_Driven_Mode==GPIO_Pin_Driven_Mode_PP)
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	440b      	add	r3, r1
 8003462:	3309      	adds	r3, #9
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d11e      	bne.n	80034a8 <Port_Init+0x2f8>
				{
					//00: General purpose output push-pull
					pin_config&=~(0b11<<(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)+2));
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	440b      	add	r3, r1
 8003478:	3302      	adds	r3, #2
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fe61 	bl	8003144 <get_position>
 8003482:	4603      	mov	r3, r0
 8003484:	3302      	adds	r3, #2
 8003486:	2203      	movs	r2, #3
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	4013      	ands	r3, r2
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	e01c      	b.n	80034d2 <Port_Init+0x322>
 8003498:	20000198 	.word	0x20000198
 800349c:	40010800 	.word	0x40010800
 80034a0:	40010c00 	.word	0x40010c00
 80034a4:	40011000 	.word	0x40011000
				}
				else
				{
					//01: General purpose output Open-drain
					pin_config|=(0b01<<(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)+2));
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	440b      	add	r3, r1
 80034b6:	3302      	adds	r3, #2
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fe42 	bl	8003144 <get_position>
 80034c0:	4603      	mov	r3, r0
 80034c2:	3302      	adds	r3, #2
 80034c4:	2201      	movs	r2, #1
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]
				}
			}
			// Port Pin Level value from Port pin list.
			if(ConfigPtr->PortPin[Pin_Index].PortPinLevelValue==STD_HIGH)
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	440b      	add	r3, r1
 80034e0:	3304      	adds	r3, #4
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	f040 8094 	bne.w	8003612 <Port_Init+0x462>
			{
				GPIO_Current->ODR|=1<<pos;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	7efa      	ldrb	r2, [r7, #27]
 80034f0:	2101      	movs	r1, #1
 80034f2:	fa01 f202 	lsl.w	r2, r1, r2
 80034f6:	431a      	orrs	r2, r3
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	60da      	str	r2, [r3, #12]
 80034fc:	e089      	b.n	8003612 <Port_Init+0x462>
			else
			{
				//
			}
		}
		else if(ConfigPtr->PortPin[Pin_Index].PortPinDirection==PORT_PIN_IN)
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	440b      	add	r3, r1
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d17f      	bne.n	8003612 <Port_Init+0x462>
		{
			//Pin driven mode
			if(ConfigPtr->PortPin[Pin_Index].PortPinMode==PORT_PIN_MODE_CAN)
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	440b      	add	r3, r1
 8003520:	3305      	adds	r3, #5
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d11e      	bne.n	8003566 <Port_Init+0x3b6>
			{
				//10: Input with pull-up / pull-down
				pin_config|=(0b01<<(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)+2));
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	440b      	add	r3, r1
 8003536:	3302      	adds	r3, #2
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff fe02 	bl	8003144 <get_position>
 8003540:	4603      	mov	r3, r0
 8003542:	3302      	adds	r3, #2
 8003544:	2201      	movs	r2, #1
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	461a      	mov	r2, r3
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]
				//  port bit configuration table px_ODR =1
				GPIO_Current->ODR|=1<<pos;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	7efa      	ldrb	r2, [r7, #27]
 8003558:	2101      	movs	r1, #1
 800355a:	fa01 f202 	lsl.w	r2, r1, r2
 800355e:	431a      	orrs	r2, r3
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	60da      	str	r2, [r3, #12]
 8003564:	e055      	b.n	8003612 <Port_Init+0x462>
			}
			else if(ConfigPtr->PortPin[Pin_Index].PortPinMode==PORT_PIN_MODE_ADC)
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	440b      	add	r3, r1
 8003574:	3305      	adds	r3, #5
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d116      	bne.n	80035aa <Port_Init+0x3fa>
			{
				//00: Analog mode
				pin_config&=~(0b11<<(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)+2));
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	440b      	add	r3, r1
 800358a:	3302      	adds	r3, #2
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fdd8 	bl	8003144 <get_position>
 8003594:	4603      	mov	r3, r0
 8003596:	3302      	adds	r3, #2
 8003598:	2203      	movs	r2, #3
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43db      	mvns	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	4013      	ands	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	e033      	b.n	8003612 <Port_Init+0x462>
			}
			else
			{
				if(ConfigPtr->PortPin[Pin_Index].Pull_UP==TRUE)
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	440b      	add	r3, r1
 80035b8:	3307      	adds	r3, #7
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d128      	bne.n	8003612 <Port_Init+0x462>
				{
					//10: Input with pull-up / pull-down
					pin_config|=(0b10<<(get_position(ConfigPtr->PortPin[Pin_Index].PortPinId)+2));
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	440b      	add	r3, r1
 80035ce:	3302      	adds	r3, #2
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fdb6 	bl	8003144 <get_position>
 80035d8:	4603      	mov	r3, r0
 80035da:	3302      	adds	r3, #2
 80035dc:	2202      	movs	r2, #2
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
					//  port bit configuration table px_ODR =1
					if(ConfigPtr->PortPin[Pin_Index].PortPinLevelValue==STD_HIGH)
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	440b      	add	r3, r1
 80035f8:	3304      	adds	r3, #4
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d108      	bne.n	8003612 <Port_Init+0x462>
					{
						GPIO_Current->ODR|=1<<pos;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	7efa      	ldrb	r2, [r7, #27]
 8003606:	2101      	movs	r1, #1
 8003608:	fa01 f202 	lsl.w	r2, r1, r2
 800360c:	431a      	orrs	r2, r3
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	60da      	str	r2, [r3, #12]
		}
		else
		{
			//
		}
		*configregister|=pin_config;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	431a      	orrs	r2, r3
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	601a      	str	r2, [r3, #0]
	for(int Pin_Index=0;Pin_Index<PortNumberOfPortPins;Pin_Index++)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3301      	adds	r3, #1
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b1f      	cmp	r3, #31
 8003628:	f77f addd 	ble.w	80031e6 <Port_Init+0x36>
	}
	/*
	 [SWS_Port_00002] The function Port_Init shall initialize all variables used by the
	 PORT driver module to an initial state.
	 */
	Port_Status=PORT_INITIALIZED;
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <Port_Init+0x48c>)
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
}
 8003632:	bf00      	nop
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000195 	.word	0x20000195

08003640 <Pwm_Init>:
 * Parameters (out)  	: None
 * Return value     	: None
 * Description       	: Service for PWM initialization
 ********************************************************************************/
void Pwm_Init (const Pwm_ConfigType* ConfigPtr)
{
 8003640:	b5b0      	push	{r4, r5, r7, lr}
 8003642:	b08a      	sub	sp, #40	; 0x28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
	uint32 Max_Counter=0;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
	uint32 Duty_cycle=0;
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]
	Pwm_Config=*ConfigPtr;
 8003650:	4abb      	ldr	r2, [pc, #748]	; (8003940 <Pwm_Init+0x300>)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4610      	mov	r0, r2
 8003656:	4619      	mov	r1, r3
 8003658:	2350      	movs	r3, #80	; 0x50
 800365a:	461a      	mov	r2, r3
 800365c:	f001 f8ca 	bl	80047f4 <memcpy>
	/*
	 [SWS_Pwm_00118] If development error detection is enabled, calling the routine
	 Pwm_Init while the PWM driver and hardware are already initialized will cause a development
	 error PWM_E_ALREADY_INITIALIZED. The desired functionality shall be left without any action.
	 */
	if(PWM_State==PWM_INITIALIZED)
 8003660:	4bb8      	ldr	r3, [pc, #736]	; (8003944 <Pwm_Init+0x304>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d105      	bne.n	8003674 <Pwm_Init+0x34>
	{
		/*
		 [SWS_Pwm_00121] A re-initialization of the Pwm driver by executing the
		 Pwm_Init() function requires a de-initialization before by executing a Pwm_DeInit().
		*/
		Det_ReportError(PWM_VERSION_ID,PwmIndex_Zero, PWM_INIT_ID, PWM_E_ALREADY_INITIALIZED);
 8003668:	2314      	movs	r3, #20
 800366a:	2200      	movs	r2, #0
 800366c:	2100      	movs	r1, #0
 800366e:	2025      	movs	r0, #37	; 0x25
 8003670:	f7fd ffd4 	bl	800161c <Det_ReportError>
	else
	{
		//
	}
	//API Pwm_GetVersionInfo is called with a NULL parameter.
	if(ConfigPtr==NULL_PTR)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d105      	bne.n	8003686 <Pwm_Init+0x46>
	{
		Det_ReportError(PWM_VERSION_ID,PwmIndex_Zero, PWM_INIT_ID, PWM_E_PARAM_POINTER);
 800367a:	2315      	movs	r3, #21
 800367c:	2200      	movs	r2, #0
 800367e:	2100      	movs	r1, #0
 8003680:	2025      	movs	r0, #37	; 0x25
 8003682:	f7fd ffcb 	bl	800161c <Det_ReportError>
		//
	}
#endif
	//enable interrupt
	//NVIC_IRQ28_TIM2_Enable();
	for(int ch_index=0;ch_index<=Max_Num_CH;ch_index++)
 8003686:	2300      	movs	r3, #0
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
 800368a:	e015      	b.n	80036b8 <Pwm_Init+0x78>
	{
		TIM2->DIER|=1<<(Pwm_Config.Config_Pwm.Channel_Config[ch_index].PwmChannelId);
 800368c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003690:	68d9      	ldr	r1, [r3, #12]
 8003692:	48ab      	ldr	r0, [pc, #684]	; (8003940 <Pwm_Init+0x300>)
 8003694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4403      	add	r3, r0
 80036a0:	3301      	adds	r3, #1
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	2301      	movs	r3, #1
 80036a8:	4093      	lsls	r3, r2
 80036aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036ae:	430b      	orrs	r3, r1
 80036b0:	60d3      	str	r3, [r2, #12]
	for(int ch_index=0;ch_index<=Max_Num_CH;ch_index++)
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	3301      	adds	r3, #1
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	dde6      	ble.n	800368c <Pwm_Init+0x4c>
	}
	/*
	 [SWS_Pwm_00052] The function Pwm_Init shall disable all notifications.
	 */
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 80036be:	2300      	movs	r3, #0
 80036c0:	623b      	str	r3, [r7, #32]
 80036c2:	e00f      	b.n	80036e4 <Pwm_Init+0xa4>
	{
		Flag_Notifications|=0b11<<ch_index;
 80036c4:	2203      	movs	r2, #3
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	b25a      	sxtb	r2, r3
 80036ce:	4b9e      	ldr	r3, [pc, #632]	; (8003948 <Pwm_Init+0x308>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	b25b      	sxtb	r3, r3
 80036d4:	4313      	orrs	r3, r2
 80036d6:	b25b      	sxtb	r3, r3
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4b9b      	ldr	r3, [pc, #620]	; (8003948 <Pwm_Init+0x308>)
 80036dc:	701a      	strb	r2, [r3, #0]
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	3301      	adds	r3, #1
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	ddec      	ble.n	80036c4 <Pwm_Init+0x84>
	}
	// Only counter overflow/underflow generates an update interrupt
	TIM2->CR1|=1<<2;
 80036ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036f4:	f043 0304 	orr.w	r3, r3, #4
 80036f8:	6013      	str	r3, [r2, #0]
	// Auto-reload preload enable
	TIM2->CR1|=1<<7;
 80036fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003708:	6013      	str	r3, [r2, #0]
	// output state of the PWM after the signal is stopped
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 800370a:	2300      	movs	r3, #0
 800370c:	61fb      	str	r3, [r7, #28]
 800370e:	e036      	b.n	800377e <Pwm_Init+0x13e>
	{
		if(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmIdleState==PWM_HIGH)
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	3304      	adds	r3, #4
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10e      	bne.n	8003744 <Pwm_Init+0x104>
		{
			//1: OC1 active low.
			TIM2->CCER|=1<<(1+(ch_index*4));
 8003726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	0092      	lsls	r2, r2, #2
 8003730:	3201      	adds	r2, #1
 8003732:	2101      	movs	r1, #1
 8003734:	fa01 f202 	lsl.w	r2, r1, r2
 8003738:	4611      	mov	r1, r2
 800373a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800373e:	430b      	orrs	r3, r1
 8003740:	6213      	str	r3, [r2, #32]
 8003742:	e019      	b.n	8003778 <Pwm_Init+0x138>
		}
		else if(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmIdleState==PWM_LOW)
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	3304      	adds	r3, #4
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d10e      	bne.n	8003778 <Pwm_Init+0x138>
		{
			//0: OC1 active high.
			TIM2->CCER&=~(1<<(1+(ch_index*4)));
 800375a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	0092      	lsls	r2, r2, #2
 8003764:	3201      	adds	r2, #1
 8003766:	2101      	movs	r1, #1
 8003768:	fa01 f202 	lsl.w	r2, r1, r2
 800376c:	43d2      	mvns	r2, r2
 800376e:	4611      	mov	r1, r2
 8003770:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003774:	400b      	ands	r3, r1
 8003776:	6213      	str	r3, [r2, #32]
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	3301      	adds	r3, #1
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	2b03      	cmp	r3, #3
 8003782:	ddc5      	ble.n	8003710 <Pwm_Init+0xd0>
		{
			//Error
		}
	}
	//Defines the starting polarity of each PWM channel.
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 8003784:	2300      	movs	r3, #0
 8003786:	61bb      	str	r3, [r7, #24]
 8003788:	e142      	b.n	8003a10 <Pwm_Init+0x3d0>
	{
		if(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmPolarity==PWM_HIGH)
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	3310      	adds	r3, #16
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f040 808f 	bne.w	80038c0 <Pwm_Init+0x280>
		{
			if(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmIdleState==PWM_LOW)
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3304      	adds	r3, #4
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d13b      	bne.n	8003830 <Pwm_Init+0x1f0>
			{
				//110: PWM mode_1 channel x is active as long as TIMx_CNT<TIMx_CCR1 else inactive
				switch(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmChannelId)
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	3301      	adds	r3, #1
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	f200 8116 	bhi.w	80039fc <Pwm_Init+0x3bc>
 80037d0:	a201      	add	r2, pc, #4	; (adr r2, 80037d8 <Pwm_Init+0x198>)
 80037d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d6:	bf00      	nop
 80037d8:	080037e9 	.word	0x080037e9
 80037dc:	080037fb 	.word	0x080037fb
 80037e0:	0800380d 	.word	0x0800380d
 80037e4:	0800381f 	.word	0x0800381f
				{
				case PwmChannelId_0:
					TIM2->CCMR1 |=13<<3;
 80037e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037f2:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 80037f6:	6193      	str	r3, [r2, #24]
					break;
 80037f8:	e107      	b.n	8003a0a <Pwm_Init+0x3ca>
				case PwmChannelId_1:
					TIM2->CCMR1 |=13<<11;
 80037fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003804:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8003808:	6193      	str	r3, [r2, #24]
					break;
 800380a:	e0fe      	b.n	8003a0a <Pwm_Init+0x3ca>
				case PwmChannelId_2:
					TIM2->CCMR2 |=13<<3;
 800380c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003816:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 800381a:	61d3      	str	r3, [r2, #28]
					break;
 800381c:	e0f5      	b.n	8003a0a <Pwm_Init+0x3ca>
				case PwmChannelId_3:
					TIM2->CCMR2 |=13<<11;
 800381e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003828:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 800382c:	61d3      	str	r3, [r2, #28]
					break;
 800382e:	e0ec      	b.n	8003a0a <Pwm_Init+0x3ca>
				default:
					//Error
					break;
				}
			}
			else if(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmIdleState==PWM_HIGH)
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	3304      	adds	r3, #4
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f040 80e1 	bne.w	8003a0a <Pwm_Init+0x3ca>
			{
				//111: PWM mode_2 channel 1 is inactive as long as TIMx_CNT<TIMx_CCR1 else active
				switch(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmChannelId)
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	3301      	adds	r3, #1
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b03      	cmp	r3, #3
 800385c:	f200 80d0 	bhi.w	8003a00 <Pwm_Init+0x3c0>
 8003860:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <Pwm_Init+0x228>)
 8003862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003866:	bf00      	nop
 8003868:	08003879 	.word	0x08003879
 800386c:	0800388b 	.word	0x0800388b
 8003870:	0800389d 	.word	0x0800389d
 8003874:	080038af 	.word	0x080038af
				{
				case PwmChannelId_0:
					TIM2->CCMR1 |=15<<3;
 8003878:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003882:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 8003886:	6193      	str	r3, [r2, #24]
					break;
 8003888:	e0bf      	b.n	8003a0a <Pwm_Init+0x3ca>
				case PwmChannelId_1:
					TIM2->CCMR1 |=15<<11;
 800388a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003894:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8003898:	6193      	str	r3, [r2, #24]
					break;
 800389a:	e0b6      	b.n	8003a0a <Pwm_Init+0x3ca>
				case PwmChannelId_2:
					TIM2->CCMR2 |=15<<3;
 800389c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038a6:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 80038aa:	61d3      	str	r3, [r2, #28]
					break;
 80038ac:	e0ad      	b.n	8003a0a <Pwm_Init+0x3ca>
				case PwmChannelId_3:
					TIM2->CCMR2 |=15<<11;
 80038ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038b8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 80038bc:	61d3      	str	r3, [r2, #28]
					break;
 80038be:	e0a4      	b.n	8003a0a <Pwm_Init+0x3ca>
			else
			{
				//Error
			}
		}
		else if(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmPolarity==PWM_LOW)
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	3310      	adds	r3, #16
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	f040 8099 	bne.w	8003a0a <Pwm_Init+0x3ca>
		{
			//111: PWM mode_2 channel 1 is inactive as long as TIMx_CNT<TIMx_CCR1 else active
			if(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmIdleState==PWM_HIGH)
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3304      	adds	r3, #4
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d140      	bne.n	8003970 <Pwm_Init+0x330>
			{
				//110: PWM mode_1 channel x is active as long as TIMx_CNT<TIMx_CCR1 else inactive
				switch(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmChannelId)
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	3301      	adds	r3, #1
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b03      	cmp	r3, #3
 8003902:	d87f      	bhi.n	8003a04 <Pwm_Init+0x3c4>
 8003904:	a201      	add	r2, pc, #4	; (adr r2, 800390c <Pwm_Init+0x2cc>)
 8003906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390a:	bf00      	nop
 800390c:	0800391d 	.word	0x0800391d
 8003910:	0800392f 	.word	0x0800392f
 8003914:	0800394d 	.word	0x0800394d
 8003918:	0800395f 	.word	0x0800395f
				{
				case PwmChannelId_0:
					TIM2->CCMR1 |=13<<3;
 800391c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003926:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 800392a:	6193      	str	r3, [r2, #24]
					break;
 800392c:	e06d      	b.n	8003a0a <Pwm_Init+0x3ca>
				case PwmChannelId_1:
					TIM2->CCMR1 |=13<<11;
 800392e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003938:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 800393c:	6193      	str	r3, [r2, #24]
					break;
 800393e:	e064      	b.n	8003a0a <Pwm_Init+0x3ca>
 8003940:	20000798 	.word	0x20000798
 8003944:	2000019c 	.word	0x2000019c
 8003948:	2000019d 	.word	0x2000019d
				case PwmChannelId_2:
					TIM2->CCMR2 |=13<<3;
 800394c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003956:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 800395a:	61d3      	str	r3, [r2, #28]
					break;
 800395c:	e055      	b.n	8003a0a <Pwm_Init+0x3ca>
				case PwmChannelId_3:
					TIM2->CCMR2 |=13<<11;
 800395e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003968:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 800396c:	61d3      	str	r3, [r2, #28]
					break;
 800396e:	e04c      	b.n	8003a0a <Pwm_Init+0x3ca>
				default:
					//Error
					break;
				}
			}
			else if(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmIdleState==PWM_LOW)
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	3304      	adds	r3, #4
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d141      	bne.n	8003a0a <Pwm_Init+0x3ca>
			{
				//111: PWM mode_2 channel 1 is inactive as long as TIMx_CNT<TIMx_CCR1 else active
				switch(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmChannelId)
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	3301      	adds	r3, #1
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d835      	bhi.n	8003a08 <Pwm_Init+0x3c8>
 800399c:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <Pwm_Init+0x364>)
 800399e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a2:	bf00      	nop
 80039a4:	080039b5 	.word	0x080039b5
 80039a8:	080039c7 	.word	0x080039c7
 80039ac:	080039d9 	.word	0x080039d9
 80039b0:	080039eb 	.word	0x080039eb
				{
				case PwmChannelId_0:
					TIM2->CCMR1 |=15<<3;
 80039b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039be:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 80039c2:	6193      	str	r3, [r2, #24]
					break;
 80039c4:	e021      	b.n	8003a0a <Pwm_Init+0x3ca>
				case PwmChannelId_1:
					TIM2->CCMR1 |=15<<11;
 80039c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039d0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 80039d4:	6193      	str	r3, [r2, #24]
					break;
 80039d6:	e018      	b.n	8003a0a <Pwm_Init+0x3ca>
				case PwmChannelId_2:
					TIM2->CCMR2 |=15<<3;
 80039d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039e2:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 80039e6:	61d3      	str	r3, [r2, #28]
					break;
 80039e8:	e00f      	b.n	8003a0a <Pwm_Init+0x3ca>
				case PwmChannelId_3:
					TIM2->CCMR2 |=15<<11;
 80039ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039f4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 80039f8:	61d3      	str	r3, [r2, #28]
					break;
 80039fa:	e006      	b.n	8003a0a <Pwm_Init+0x3ca>
					break;
 80039fc:	bf00      	nop
 80039fe:	e004      	b.n	8003a0a <Pwm_Init+0x3ca>
					break;
 8003a00:	bf00      	nop
 8003a02:	e002      	b.n	8003a0a <Pwm_Init+0x3ca>
					break;
 8003a04:	bf00      	nop
 8003a06:	e000      	b.n	8003a0a <Pwm_Init+0x3ca>
				default:
					//Error
					break;
 8003a08:	bf00      	nop
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	f77f aeb9 	ble.w	800378a <Pwm_Init+0x14a>
		{
			//Error
		}
	}
	// set Prescalers (frequency is 1MH)
	TIM2->PSC =7;
 8003a18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a1c:	2207      	movs	r2, #7
 8003a1e:	629a      	str	r2, [r3, #40]	; 0x28
	//Value of period used for Initialization(in seconds)
	Max_Counter=1000000*ConfigPtr->Config_Pwm.Channel_Config[PwmChannelId_0].PwmPeriodDefault;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4942      	ldr	r1, [pc, #264]	; (8003b30 <Pwm_Init+0x4f0>)
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fc ff90 	bl	800094c <__aeabi_fmul>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fd f8dc 	bl	8000bec <__aeabi_f2uiz>
 8003a34:	4603      	mov	r3, r0
 8003a36:	60fb      	str	r3, [r7, #12]
	TIM2->ARR=Max_Counter;
 8003a38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	62d3      	str	r3, [r2, #44]	; 0x2c
	//Value of duty cycle used for Initialization 0 represents 0% 0x8000 represents 100%
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	e04c      	b.n	8003ae0 <Pwm_Init+0x4a0>
	{
		Duty_cycle=(ConfigPtr->Config_Pwm.Channel_Config[PwmChannelId_0].PwmDutycycleDefault/32768.0)*Max_Counter;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	885b      	ldrh	r3, [r3, #2]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fc fce2 	bl	8000414 <__aeabi_i2d>
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	4b37      	ldr	r3, [pc, #220]	; (8003b34 <Pwm_Init+0x4f4>)
 8003a56:	f7fc fe71 	bl	800073c <__aeabi_ddiv>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	460c      	mov	r4, r1
 8003a5e:	4625      	mov	r5, r4
 8003a60:	461c      	mov	r4, r3
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f7fc fcc6 	bl	80003f4 <__aeabi_ui2d>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	4629      	mov	r1, r5
 8003a70:	f7fc fd3a 	bl	80004e8 <__aeabi_dmul>
 8003a74:	4603      	mov	r3, r0
 8003a76:	460c      	mov	r4, r1
 8003a78:	4618      	mov	r0, r3
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	f7fc ff46 	bl	800090c <__aeabi_d2uiz>
 8003a80:	4603      	mov	r3, r0
 8003a82:	60bb      	str	r3, [r7, #8]
		switch(ConfigPtr->Config_Pwm.Channel_Config[ch_index].PwmChannelId)
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	3301      	adds	r3, #1
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d81e      	bhi.n	8003ad8 <Pwm_Init+0x498>
 8003a9a:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <Pwm_Init+0x460>)
 8003a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa0:	08003ab1 	.word	0x08003ab1
 8003aa4:	08003abb 	.word	0x08003abb
 8003aa8:	08003ac5 	.word	0x08003ac5
 8003aac:	08003acf 	.word	0x08003acf
		{
		case PwmChannelId_0:
			TIM2->CCR1=Duty_cycle;
 8003ab0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8003ab8:	e00f      	b.n	8003ada <Pwm_Init+0x49a>
		case PwmChannelId_1:
			TIM2->CCR2=Duty_cycle;
 8003aba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8003ac2:	e00a      	b.n	8003ada <Pwm_Init+0x49a>
		case PwmChannelId_2:
			TIM2->CCR3=Duty_cycle;
 8003ac4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8003acc:	e005      	b.n	8003ada <Pwm_Init+0x49a>
		case PwmChannelId_3:
			TIM2->CCR4=Duty_cycle;
 8003ace:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8003ad6:	e000      	b.n	8003ada <Pwm_Init+0x49a>
		default:
			//Error
			break;
 8003ad8:	bf00      	nop
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	3301      	adds	r3, #1
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	ddaf      	ble.n	8003a46 <Pwm_Init+0x406>
		}
	}
	//Compare x output enable
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	e00f      	b.n	8003b0c <Pwm_Init+0x4cc>
	{
		TIM2->CCER|=1<<(ch_index*4);
 8003aec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	0092      	lsls	r2, r2, #2
 8003af6:	2101      	movs	r1, #1
 8003af8:	fa01 f202 	lsl.w	r2, r1, r2
 8003afc:	4611      	mov	r1, r2
 8003afe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b02:	430b      	orrs	r3, r1
 8003b04:	6213      	str	r3, [r2, #32]
	for(int ch_index=0;ch_index<Max_Num_CH;ch_index++)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	613b      	str	r3, [r7, #16]
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	ddec      	ble.n	8003aec <Pwm_Init+0x4ac>
	}
	// Counter enable
	TIM2->CR1|=1<<0;
 8003b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	6013      	str	r3, [r2, #0]
	PWM_State=PWM_INITIALIZED;
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <Pwm_Init+0x4f8>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	3728      	adds	r7, #40	; 0x28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b30:	49742400 	.word	0x49742400
 8003b34:	40e00000 	.word	0x40e00000
 8003b38:	2000019c 	.word	0x2000019c

08003b3c <Pwm_SetDutyCycle>:
 * Parameters (out)  	: None
 * Return value     	: None
 * Description       	: Service sets the duty cycle of the PWM channel.
 ********************************************************************************/
void Pwm_SetDutyCycle (Pwm_ChannelType ChannelNumber,uint16 DutyCycle)
{
 8003b3c:	b5b0      	push	{r4, r5, r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	460a      	mov	r2, r1
 8003b46:	71fb      	strb	r3, [r7, #7]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	80bb      	strh	r3, [r7, #4]
	uint16 Duty_cycle=0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	81fb      	strh	r3, [r7, #14]
#if(PwmDevErrorDetect==TRUE)
	if(ChannelNumber<PwmChannelId_0||ChannelNumber>PwmChannelId_3)
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d905      	bls.n	8003b62 <Pwm_SetDutyCycle+0x26>
	{
		Det_ReportError(PWM_VERSION_ID,PwmIndex_Zero, PWM_SETDUTYCYCLE_ID, PWM_E_PARAM_CHANNEL);
 8003b56:	2312      	movs	r3, #18
 8003b58:	2202      	movs	r2, #2
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	2025      	movs	r0, #37	; 0x25
 8003b5e:	f7fd fd5d 	bl	800161c <Det_ReportError>
	 duty cycle.
	 Thus for 0% requested Duty Cycle the output will be the inverse of the configured
	 polarity parameter, and for 100% Duty Cycle the output will be equal to the
	 configured polarity parameter.
	 */
	Duty_cycle=(DutyCycle/32768.0)*TIM2->ARR;
 8003b62:	88bb      	ldrh	r3, [r7, #4]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fc fc55 	bl	8000414 <__aeabi_i2d>
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	4b31      	ldr	r3, [pc, #196]	; (8003c34 <Pwm_SetDutyCycle+0xf8>)
 8003b70:	f7fc fde4 	bl	800073c <__aeabi_ddiv>
 8003b74:	4603      	mov	r3, r0
 8003b76:	460c      	mov	r4, r1
 8003b78:	4625      	mov	r5, r4
 8003b7a:	461c      	mov	r4, r3
 8003b7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fc fc36 	bl	80003f4 <__aeabi_ui2d>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	4629      	mov	r1, r5
 8003b90:	f7fc fcaa 	bl	80004e8 <__aeabi_dmul>
 8003b94:	4603      	mov	r3, r0
 8003b96:	460c      	mov	r4, r1
 8003b98:	4618      	mov	r0, r3
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	f7fc feb6 	bl	800090c <__aeabi_d2uiz>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	81fb      	strh	r3, [r7, #14]
	//Value of duty cycle used for Initialization 0 represents 0% 0x8000 represents 100%
	switch(ChannelNumber)
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d81e      	bhi.n	8003be8 <Pwm_SetDutyCycle+0xac>
 8003baa:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <Pwm_SetDutyCycle+0x74>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003bc1 	.word	0x08003bc1
 8003bb4:	08003bcb 	.word	0x08003bcb
 8003bb8:	08003bd5 	.word	0x08003bd5
 8003bbc:	08003bdf 	.word	0x08003bdf
	{
	case PwmChannelId_0:
		TIM2->CCR1=Duty_cycle;
 8003bc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bc4:	89fb      	ldrh	r3, [r7, #14]
 8003bc6:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8003bc8:	e00f      	b.n	8003bea <Pwm_SetDutyCycle+0xae>
	case PwmChannelId_1:
		TIM2->CCR2=Duty_cycle;
 8003bca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bce:	89fb      	ldrh	r3, [r7, #14]
 8003bd0:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8003bd2:	e00a      	b.n	8003bea <Pwm_SetDutyCycle+0xae>
	case PwmChannelId_2:
		TIM2->CCR3=Duty_cycle;
 8003bd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bd8:	89fb      	ldrh	r3, [r7, #14]
 8003bda:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8003bdc:	e005      	b.n	8003bea <Pwm_SetDutyCycle+0xae>
	case PwmChannelId_3:
		TIM2->CCR4=Duty_cycle;
 8003bde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003be2:	89fb      	ldrh	r3, [r7, #14]
 8003be4:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8003be6:	e000      	b.n	8003bea <Pwm_SetDutyCycle+0xae>
	default:
		//Error
		break;
 8003be8:	bf00      	nop
	/*
	 [SWS_Pwm_20086] After the call of the function Pwm_SetOutputToIdle, channels
	 shall be reactivated using the Api Pwm_SetDutyCycle( ) to activate the PWM channel
	 with the old period.
	 */
	if((TIM2->CCER&(1<<ChannelNumber*4))==0)
 8003bea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	79fa      	ldrb	r2, [r7, #7]
 8003bf2:	0092      	lsls	r2, r2, #2
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10c      	bne.n	8003c1a <Pwm_SetDutyCycle+0xde>
	{
		TIM2->CCER|=1<<(ChannelNumber*4);
 8003c00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	79fa      	ldrb	r2, [r7, #7]
 8003c08:	0092      	lsls	r2, r2, #2
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c10:	4611      	mov	r1, r2
 8003c12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c16:	430b      	orrs	r3, r1
 8003c18:	6213      	str	r3, [r2, #32]
	else
	{
		//
	}
	//to update
	TIM2->EGR |=1<<0;
 8003c1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	6153      	str	r3, [r2, #20]
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bdb0      	pop	{r4, r5, r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40e00000 	.word	0x40e00000

08003c38 <Task1_Entry>:
		Dio_WriteChannel(channel_45,STD_HIGH);
	}
}

TASK(Task1)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
	while(1)
	{
		WaitEvent(0x10);
 8003c3c:	2010      	movs	r0, #16
 8003c3e:	f7fe fdbb 	bl	80027b8 <WaitEvent>
		ClearEvent(0x10);
 8003c42:	2010      	movs	r0, #16
 8003c44:	f7fe fd6c 	bl	8002720 <ClearEvent>
		Main_SWC();
 8003c48:	f000 fbca 	bl	80043e0 <Main_SWC>
		WaitEvent(0x10);
 8003c4c:	e7f6      	b.n	8003c3c <Task1_Entry+0x4>

08003c4e <Task3_Entry>:

	}
}

TASK(Task3)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	af00      	add	r7, sp, #0
	while(1)
	{
		WaitEvent(0X0F);
 8003c52:	200f      	movs	r0, #15
 8003c54:	f7fe fdb0 	bl	80027b8 <WaitEvent>
		LED_SWC();
 8003c58:	f000 fba6 	bl	80043a8 <LED_SWC>
		ClearEvent(0X0F);
 8003c5c:	200f      	movs	r0, #15
 8003c5e:	f7fe fd5f 	bl	8002720 <ClearEvent>
		WaitEvent(0X0F);
 8003c62:	e7f6      	b.n	8003c52 <Task3_Entry+0x4>

08003c64 <Task4_Entry>:
	}
}

TASK(Task4)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
	while(1)
	{
		WaitEvent(0X1F);
 8003c68:	201f      	movs	r0, #31
 8003c6a:	f7fe fda5 	bl	80027b8 <WaitEvent>
		Motor_SWC();
 8003c6e:	f000 fbf5 	bl	800445c <Motor_SWC>
		ClearEvent(0X1F);
 8003c72:	201f      	movs	r0, #31
 8003c74:	f7fe fd54 	bl	8002720 <ClearEvent>
		WaitEvent(0X1F);
 8003c78:	e7f6      	b.n	8003c68 <Task4_Entry+0x4>
	...

08003c7c <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_LED_Warning_LED_Warning>:
FunctionPtr_BSW_SWC_RP_Get_Distance_Call_Ultrasonic Rte_Call_BSW_SWC_RP_Get_Distance_Call_Ultrasonic_Delegate = 0;



void Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_LED_Warning_LED_Warning (my_uint8 LED_Warning)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_BSW_SWC)->BSW_SWC_Runnable_PP_LED_Warning_LED_Warning->value = LED_Warning;
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_LED_Warning_LED_Warning+0x24>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	79fa      	ldrb	r2, [r7, #7]
 8003c8c:	701a      	strb	r2, [r3, #0]
	SetEvent(&Task3,0X0F);
 8003c8e:	210f      	movs	r1, #15
 8003c90:	4804      	ldr	r0, [pc, #16]	; (8003ca4 <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_LED_Warning_LED_Warning+0x28>)
 8003c92:	f7fe fce9 	bl	8002668 <SetEvent>
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	08004990 	.word	0x08004990
 8003ca4:	20000708 	.word	0x20000708

08003ca8 <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_Motor_Speed_Motor_Speed>:
my_uint8* Rte_IWriteRef_BSW_SWC_BSW_SWC_Runnable_PP_LED_Warning_LED_Warning(void)
{
	return &(Rte_Inst_BSW_SWC)->BSW_SWC_Runnable_PP_LED_Warning_LED_Warning->value;
}
void Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_Motor_Speed_Motor_Speed (my_uint8 Motor_Speed)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_BSW_SWC)->BSW_SWC_Runnable_PP_Motor_Speed_Motor_Speed->value = Motor_Speed;
 8003cb2:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_Motor_Speed_Motor_Speed+0x24>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	79fa      	ldrb	r2, [r7, #7]
 8003cb8:	701a      	strb	r2, [r3, #0]
	SetEvent(&Task4,0X1F);
 8003cba:	211f      	movs	r1, #31
 8003cbc:	4804      	ldr	r0, [pc, #16]	; (8003cd0 <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_Motor_Speed_Motor_Speed+0x28>)
 8003cbe:	f7fe fcd3 	bl	8002668 <SetEvent>
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	08004990 	.word	0x08004990
 8003cd0:	20000630 	.word	0x20000630

08003cd4 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning>:
Std_ReturnType DNPW_SWC_RP_Get_Distance_Call_Ultrasonic_Buffer_retcode = RTE_E_OK;
FunctionPtr_DNPW_SWC_RP_Get_Distance_Call_Ultrasonic Rte_Call_DNPW_SWC_RP_Get_Distance_Call_Ultrasonic_Delegate = 0;


void Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning (my_uint8 LED_Warning)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_DNPW_SWC)->DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning->value = LED_Warning;
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning+0x24>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	79fa      	ldrb	r2, [r7, #7]
 8003ce4:	701a      	strb	r2, [r3, #0]
	SetEvent(&Task3,0X0F);
 8003ce6:	210f      	movs	r1, #15
 8003ce8:	4804      	ldr	r0, [pc, #16]	; (8003cfc <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning+0x28>)
 8003cea:	f7fe fcbd 	bl	8002668 <SetEvent>
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	0800499c 	.word	0x0800499c
 8003cfc:	20000708 	.word	0x20000708

08003d00 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_Motor_Speed_Motor_Speed>:
my_uint8* Rte_IWriteRef_DNPW_SWC_DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning(void)
{
	return &(Rte_Inst_DNPW_SWC)->DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning->value;
}
void Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_Motor_Speed_Motor_Speed (my_uint8 Motor_Speed)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_DNPW_SWC)->DNPW_SWC_Runnable_PP_Motor_Speed_Motor_Speed->value = Motor_Speed;
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_Motor_Speed_Motor_Speed+0x24>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	79fa      	ldrb	r2, [r7, #7]
 8003d10:	701a      	strb	r2, [r3, #0]
	SetEvent(&Task4,0X1F);
 8003d12:	211f      	movs	r1, #31
 8003d14:	4804      	ldr	r0, [pc, #16]	; (8003d28 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_Motor_Speed_Motor_Speed+0x28>)
 8003d16:	f7fe fca7 	bl	8002668 <SetEvent>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	0800499c 	.word	0x0800499c
 8003d28:	20000630 	.word	0x20000630

08003d2c <Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_LED_Warning_LED_Warning>:

Std_ReturnType EEBL_SWC_RP_Get_Distance_Call_Ultrasonic_Buffer_retcode = RTE_E_OK;


void Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_LED_Warning_LED_Warning (my_uint8 LED_Warning)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_EEBL_SWC)->EEBL_SWC_Runnable_PP_LED_Warning_LED_Warning->value = LED_Warning;
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_LED_Warning_LED_Warning+0x24>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	79fa      	ldrb	r2, [r7, #7]
 8003d3c:	701a      	strb	r2, [r3, #0]
	SetEvent(&Task3,0X0F);
 8003d3e:	210f      	movs	r1, #15
 8003d40:	4804      	ldr	r0, [pc, #16]	; (8003d54 <Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_LED_Warning_LED_Warning+0x28>)
 8003d42:	f7fe fc91 	bl	8002668 <SetEvent>
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	080049a8 	.word	0x080049a8
 8003d54:	20000708 	.word	0x20000708

08003d58 <Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_Motor_Speed_Motor_Speed>:
my_uint8* Rte_IWriteRef_EEBL_SWC_EEBL_SWC_Runnable_PP_LED_Warning_LED_Warning(void)
{
	return &(Rte_Inst_EEBL_SWC)->EEBL_SWC_Runnable_PP_LED_Warning_LED_Warning->value;
}
void Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_Motor_Speed_Motor_Speed (my_uint8 Motor_Speed)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_EEBL_SWC)->EEBL_SWC_Runnable_PP_Motor_Speed_Motor_Speed->value = Motor_Speed;
 8003d62:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_Motor_Speed_Motor_Speed+0x24>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	79fa      	ldrb	r2, [r7, #7]
 8003d68:	701a      	strb	r2, [r3, #0]
	SetEvent(&Task4,0X1F);
 8003d6a:	211f      	movs	r1, #31
 8003d6c:	4804      	ldr	r0, [pc, #16]	; (8003d80 <Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_Motor_Speed_Motor_Speed+0x28>)
 8003d6e:	f7fe fc7b 	bl	8002668 <SetEvent>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	080049a8 	.word	0x080049a8
 8003d80:	20000630 	.word	0x20000630

08003d84 <Rte_Call_EEBL_SWC_RP_Get_Distance_Call_Ultrasonic>:
my_uint8* Rte_IWriteRef_EEBL_SWC_EEBL_SWC_Runnable_PP_LCD_LCD_Warning(void)
{
	return &(Rte_Inst_EEBL_SWC)->EEBL_SWC_Runnable_PP_LCD_LCD_Warning->value;
}
Std_ReturnType Rte_Call_EEBL_SWC_RP_Get_Distance_Call_Ultrasonic (my_uint16* Distance)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	Std_ReturnType __result = EEBL_SWC_RP_Get_Distance_Call_Ultrasonic_Buffer_retcode;
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <Rte_Call_EEBL_SWC_RP_Get_Distance_Call_Ultrasonic+0x38>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	73fb      	strb	r3, [r7, #15]
	if ( Rte_Call_EEBL_SWC_RP_Get_Distance_Call_Ultrasonic_Delegate != 0 ) {
 8003d92:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <Rte_Call_EEBL_SWC_RP_Get_Distance_Call_Ultrasonic+0x3c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <Rte_Call_EEBL_SWC_RP_Get_Distance_Call_Ultrasonic+0x22>
		__result = Rte_Call_EEBL_SWC_RP_Get_Distance_Call_Ultrasonic_Delegate(Distance);
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <Rte_Call_EEBL_SWC_RP_Get_Distance_Call_Ultrasonic+0x3c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4798      	blx	r3
 8003da2:	4603      	mov	r3, r0
 8003da4:	73fb      	strb	r3, [r7, #15]
	}
	__result=Ultrasonic_SWC(Distance);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fb84 	bl	80044b4 <Ultrasonic_SWC>
 8003dac:	4603      	mov	r3, r0
 8003dae:	73fb      	strb	r3, [r7, #15]
	return __result;
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	200001a4 	.word	0x200001a4
 8003dc0:	200001a0 	.word	0x200001a0

08003dc4 <Rte_IWrite_Empty_For_Test_Empty_For_Test_Runnable_PP_CAN_Frame_CAN_Frame>:




void Rte_IWrite_Empty_For_Test_Empty_For_Test_Runnable_PP_CAN_Frame_CAN_Frame (const my_uint8* CAN_Frame)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	memcpy((Rte_Inst_Empty_For_Test)->Empty_For_Test_Runnable_PP_CAN_Frame_CAN_Frame->value, CAN_Frame, sizeof(my_uint8)*8);
 8003dcc:	4b07      	ldr	r3, [pc, #28]	; (8003dec <Rte_IWrite_Empty_For_Test_Empty_For_Test_Runnable_PP_CAN_Frame_CAN_Frame+0x28>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fd0d 	bl	80047f4 <memcpy>
	SetEvent(&Task1, 0x10);
 8003dda:	2110      	movs	r1, #16
 8003ddc:	4804      	ldr	r0, [pc, #16]	; (8003df0 <Rte_IWrite_Empty_For_Test_Empty_For_Test_Runnable_PP_CAN_Frame_CAN_Frame+0x2c>)
 8003dde:	f7fe fc43 	bl	8002668 <SetEvent>
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	080049b4 	.word	0x080049b4
 8003df0:	20000678 	.word	0x20000678

08003df4 <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_LED_Warning_LED_Warning>:
Std_ReturnType FCW_SWC_RP_Get_Distance_Call_Ultrasonic_Buffer_retcode = RTE_E_OK;

FunctionPtr_FCW_SWC_RP_Get_Distance_Call_Ultrasonic Rte_Call_FCW_SWC_RP_Get_Distance_Call_Ultrasonic_Delegate = 0;

void Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_LED_Warning_LED_Warning (my_uint8 LED_Warning)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_FCW_SWC)->FCW_SWC_Runnable_PP_LED_Warning_LED_Warning->value = LED_Warning;
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_LED_Warning_LED_Warning+0x24>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	79fa      	ldrb	r2, [r7, #7]
 8003e04:	701a      	strb	r2, [r3, #0]
	SetEvent(&Task3,0X0F);
 8003e06:	210f      	movs	r1, #15
 8003e08:	4804      	ldr	r0, [pc, #16]	; (8003e1c <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_LED_Warning_LED_Warning+0x28>)
 8003e0a:	f7fe fc2d 	bl	8002668 <SetEvent>
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	080049b8 	.word	0x080049b8
 8003e1c:	20000708 	.word	0x20000708

08003e20 <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_Motor_Speed_Motor_Speed>:
my_uint8* Rte_IWriteRef_FCW_SWC_FCW_SWC_Runnable_PP_LED_Warning_LED_Warning(void)
{
	return &(Rte_Inst_FCW_SWC)->FCW_SWC_Runnable_PP_LED_Warning_LED_Warning->value;
}
void Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_Motor_Speed_Motor_Speed (my_uint8 Motor_Speed)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_FCW_SWC)->FCW_SWC_Runnable_PP_Motor_Speed_Motor_Speed->value = Motor_Speed;
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_Motor_Speed_Motor_Speed+0x24>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	79fa      	ldrb	r2, [r7, #7]
 8003e30:	701a      	strb	r2, [r3, #0]
	SetEvent(&Task4,0X1F);
 8003e32:	211f      	movs	r1, #31
 8003e34:	4804      	ldr	r0, [pc, #16]	; (8003e48 <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_Motor_Speed_Motor_Speed+0x28>)
 8003e36:	f7fe fc17 	bl	8002668 <SetEvent>
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	080049b8 	.word	0x080049b8
 8003e48:	20000630 	.word	0x20000630

08003e4c <Rte_Call_FCW_SWC_RP_Get_Distance_Call_Ultrasonic>:
my_uint8* Rte_IWriteRef_FCW_SWC_FCW_SWC_Runnable_PP_LCD_LCD_Warning(void)
{
	return &(Rte_Inst_FCW_SWC)->FCW_SWC_Runnable_PP_LCD_LCD_Warning->value;
}
Std_ReturnType Rte_Call_FCW_SWC_RP_Get_Distance_Call_Ultrasonic (my_uint16* Distance)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
	Std_ReturnType __result = FCW_SWC_RP_Get_Distance_Call_Ultrasonic_Buffer_retcode;
 8003e54:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <Rte_Call_FCW_SWC_RP_Get_Distance_Call_Ultrasonic+0x38>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	73fb      	strb	r3, [r7, #15]
	if ( Rte_Call_FCW_SWC_RP_Get_Distance_Call_Ultrasonic_Delegate != 0 ) {
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <Rte_Call_FCW_SWC_RP_Get_Distance_Call_Ultrasonic+0x3c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <Rte_Call_FCW_SWC_RP_Get_Distance_Call_Ultrasonic+0x22>
		__result = Rte_Call_FCW_SWC_RP_Get_Distance_Call_Ultrasonic_Delegate(Distance);
 8003e62:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <Rte_Call_FCW_SWC_RP_Get_Distance_Call_Ultrasonic+0x3c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	4798      	blx	r3
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	73fb      	strb	r3, [r7, #15]
	}
	__result=Ultrasonic_SWC(Distance);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fb20 	bl	80044b4 <Ultrasonic_SWC>
 8003e74:	4603      	mov	r3, r0
 8003e76:	73fb      	strb	r3, [r7, #15]
	return __result;
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	200001a5 	.word	0x200001a5
 8003e88:	200001a8 	.word	0x200001a8

08003e8c <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LED_Warning_LED_Warning>:
Std_ReturnType IMA_SWC_RP_Get_Distance_Call_Ultrasonic_Buffer_retcode = RTE_E_OK;

FunctionPtr_IMA_SWC_RP_Get_Distance_Call_Ultrasonic Rte_Call_IMA_SWC_RP_Get_Distance_Call_Ultrasonic_Delegate = 0;

void Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LED_Warning_LED_Warning (my_uint8 LED_Warning)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_IMA_SWC)->IMA_SWC_Runnable_PP_LED_Warning_LED_Warning->value = LED_Warning;
 8003e96:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LED_Warning_LED_Warning+0x24>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	79fa      	ldrb	r2, [r7, #7]
 8003e9c:	701a      	strb	r2, [r3, #0]
	SetEvent(&Task3,0X0F);
 8003e9e:	210f      	movs	r1, #15
 8003ea0:	4804      	ldr	r0, [pc, #16]	; (8003eb4 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LED_Warning_LED_Warning+0x28>)
 8003ea2:	f7fe fbe1 	bl	8002668 <SetEvent>
}
 8003ea6:	bf00      	nop
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	080049c4 	.word	0x080049c4
 8003eb4:	20000708 	.word	0x20000708

08003eb8 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed>:
my_uint8* Rte_IWriteRef_IMA_SWC_IMA_SWC_Runnable_PP_LED_Warning_LED_Warning(void)
{
	return &(Rte_Inst_IMA_SWC)->IMA_SWC_Runnable_PP_LED_Warning_LED_Warning->value;
}
void Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed (my_uint8 Motor_Speed)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_IMA_SWC)->IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed->value = Motor_Speed;
 8003ec2:	4b06      	ldr	r3, [pc, #24]	; (8003edc <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed+0x24>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	79fa      	ldrb	r2, [r7, #7]
 8003ec8:	701a      	strb	r2, [r3, #0]
	SetEvent(&Task4,0X1F);
 8003eca:	211f      	movs	r1, #31
 8003ecc:	4804      	ldr	r0, [pc, #16]	; (8003ee0 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed+0x28>)
 8003ece:	f7fe fbcb 	bl	8002668 <SetEvent>
}
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	080049c4 	.word	0x080049c4
 8003ee0:	20000630 	.word	0x20000630

08003ee4 <Rte_IRead_LED_SWC_LED_SWC_Runnable_RP_LED_Warning_LED_Warning>:




my_uint8 Rte_IRead_LED_SWC_LED_SWC_Runnable_RP_LED_Warning_LED_Warning (void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
	return (Rte_Inst_LED_SWC)->LED_SWC_Runnable_RP_LED_Warning_LED_Warning->value;
 8003ee8:	4b03      	ldr	r3, [pc, #12]	; (8003ef8 <Rte_IRead_LED_SWC_LED_SWC_Runnable_RP_LED_Warning_LED_Warning+0x14>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	080049d0 	.word	0x080049d0

08003efc <Rte_IRead_Main_SWC_Main_SWC_Runnable_RP_CAN_Frame_CAN_Frame>:
FunctionPtr_Main_SWC_RP_Call_DNPW_Call_Subsystem Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem_Delegate = 0;
FunctionPtr_Main_SWC_RP_Call_FCW_Call_Subsystem Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem_Delegate = 0;
FunctionPtr_Main_SWC_RP_Call_IMA_Call_Subsystem Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem_Delegate = 0;

const my_uint8* Rte_IRead_Main_SWC_Main_SWC_Runnable_RP_CAN_Frame_CAN_Frame (void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
	return (Rte_Inst_Main_SWC)->Main_SWC_Runnable_RP_CAN_Frame_CAN_Frame->value;
 8003f00:	4b02      	ldr	r3, [pc, #8]	; (8003f0c <Rte_IRead_Main_SWC_Main_SWC_Runnable_RP_CAN_Frame_CAN_Frame+0x10>)
 8003f02:	681b      	ldr	r3, [r3, #0]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	080049d4 	.word	0x080049d4

08003f10 <Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem>:
Std_ReturnType Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem (const my_uint8* CAN_Frame)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	Std_ReturnType __result = Main_SWC_RP_Call_BSW_Call_Subsystem_Buffer_retcode;
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem+0x38>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	73fb      	strb	r3, [r7, #15]
	if ( Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem_Delegate != 0 ) {
 8003f1e:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem+0x3c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem+0x22>
		__result = Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem_Delegate(CAN_Frame);
 8003f26:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem+0x3c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	4798      	blx	r3
 8003f2e:	4603      	mov	r3, r0
 8003f30:	73fb      	strb	r3, [r7, #15]
	}
	__result=BSW_SWC(CAN_Frame);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f898 	bl	8004068 <BSW_SWC>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	73fb      	strb	r3, [r7, #15]
	return __result;
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	200001ac 	.word	0x200001ac
 8003f4c:	200001b4 	.word	0x200001b4

08003f50 <Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem>:
Std_ReturnType Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem (const my_uint8* CAN_Frame)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	Std_ReturnType __result = Main_SWC_RP_Call_EEBL_Call_Subsystem_Buffer_retcode;
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem+0x38>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	73fb      	strb	r3, [r7, #15]
	if ( Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem_Delegate != 0 ) {
 8003f5e:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem+0x3c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem+0x22>
		__result = Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem_Delegate(CAN_Frame);
 8003f66:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem+0x3c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	4798      	blx	r3
 8003f6e:	4603      	mov	r3, r0
 8003f70:	73fb      	strb	r3, [r7, #15]
	}
	__result=EEBL_SWC(CAN_Frame);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f8e3 	bl	800413e <EEBL_SWC>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	73fb      	strb	r3, [r7, #15]
	return __result;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	200001ad 	.word	0x200001ad
 8003f8c:	200001b8 	.word	0x200001b8

08003f90 <Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem>:
Std_ReturnType Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem (const my_uint8* CAN_Frame)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	Std_ReturnType __result = Main_SWC_RP_Call_DNPW_Call_Subsystem_Buffer_retcode;
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem+0x38>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	73fb      	strb	r3, [r7, #15]
	if ( Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem_Delegate != 0 ) {
 8003f9e:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem+0x3c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem+0x22>
		__result = Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem_Delegate(CAN_Frame);
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem+0x3c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	4798      	blx	r3
 8003fae:	4603      	mov	r3, r0
 8003fb0:	73fb      	strb	r3, [r7, #15]
	}
	__result=DNPW_SWC(CAN_Frame);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f88e 	bl	80040d4 <DNPW_SWC>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	73fb      	strb	r3, [r7, #15]
	return __result;
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	200001ae 	.word	0x200001ae
 8003fcc:	200001bc 	.word	0x200001bc

08003fd0 <Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem>:
Std_ReturnType Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem (const my_uint8* CAN_Frame)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	Std_ReturnType __result = Main_SWC_RP_Call_FCW_Call_Subsystem_Buffer_retcode;
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem+0x38>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	73fb      	strb	r3, [r7, #15]
	if ( Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem_Delegate != 0 ) {
 8003fde:	4b0b      	ldr	r3, [pc, #44]	; (800400c <Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem+0x3c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem+0x22>
		__result = Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem_Delegate(CAN_Frame);
 8003fe6:	4b09      	ldr	r3, [pc, #36]	; (800400c <Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem+0x3c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	4798      	blx	r3
 8003fee:	4603      	mov	r3, r0
 8003ff0:	73fb      	strb	r3, [r7, #15]
	}
	__result=FCW_SWC(CAN_Frame);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f8da 	bl	80041ac <FCW_SWC>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	73fb      	strb	r3, [r7, #15]
	return __result;
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200001af 	.word	0x200001af
 800400c:	200001c0 	.word	0x200001c0

08004010 <Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem>:
Std_ReturnType Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem (const my_uint8* CAN_Frame)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	Std_ReturnType __result = Main_SWC_RP_Call_IMA_Call_Subsystem_Buffer_retcode;
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem+0x38>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	73fb      	strb	r3, [r7, #15]
	if ( Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem_Delegate != 0 ) {
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem+0x3c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem+0x22>
		__result = Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem_Delegate(CAN_Frame);
 8004026:	4b09      	ldr	r3, [pc, #36]	; (800404c <Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem+0x3c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	4798      	blx	r3
 800402e:	4603      	mov	r3, r0
 8004030:	73fb      	strb	r3, [r7, #15]
	}
	__result=IMA_SWC(CAN_Frame);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f91c 	bl	8004270 <IMA_SWC>
 8004038:	4603      	mov	r3, r0
 800403a:	73fb      	strb	r3, [r7, #15]
	return __result;
 800403c:	7bfb      	ldrb	r3, [r7, #15]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	200001b0 	.word	0x200001b0
 800404c:	200001c4 	.word	0x200001c4

08004050 <Rte_IRead_Motor_SWC_Motor_SWC_Runnable_RP_Motor_Speed_Motor_Speed>:




my_uint8 Rte_IRead_Motor_SWC_Motor_SWC_Runnable_RP_Motor_Speed_Motor_Speed (void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
	return (Rte_Inst_Motor_SWC)->Motor_SWC_Runnable_RP_Motor_Speed_Motor_Speed->value;
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <Rte_IRead_Motor_SWC_Motor_SWC_Runnable_RP_Motor_Speed_Motor_Speed+0x14>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	781b      	ldrb	r3, [r3, #0]
}
 800405a:	4618      	mov	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	080049d8 	.word	0x080049d8

08004068 <BSW_SWC>:
my_uint16 Dis=0;
/*******************************************************
 **********************Runnable*************************
 *******************************************************/
Std_ReturnType BSW_SWC(const my_uint8* CAN_Frame)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
	Std_ReturnType Status=E_OK;
 8004070:	2300      	movs	r3, #0
 8004072:	72fb      	strb	r3, [r7, #11]
	for(int i=0;i<2;i++)
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	e00b      	b.n	8004092 <BSW_SWC+0x2a>
		FRAME[i]=CAN_Frame[i];
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	4413      	add	r3, r2
 8004080:	7819      	ldrb	r1, [r3, #0]
 8004082:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <BSW_SWC+0x68>)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	460a      	mov	r2, r1
 800408a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<2;i++)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3301      	adds	r3, #1
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b01      	cmp	r3, #1
 8004096:	ddf0      	ble.n	800407a <BSW_SWC+0x12>
	//Status=Rte_Call_BSW_SWC_RP_Get_Distance_Call_Ultrasonic(&Dis);
	switch (FRAME[1])
 8004098:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <BSW_SWC+0x68>)
 800409a:	785b      	ldrb	r3, [r3, #1]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <BSW_SWC+0x4a>
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d10d      	bne.n	80040c0 <BSW_SWC+0x58>
	{
		case TRUE:
			Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_LED_Warning_LED_Warning(LED_ON);
 80040a4:	2001      	movs	r0, #1
 80040a6:	f7ff fde9 	bl	8003c7c <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_LED_Warning_LED_Warning>
			Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_Motor_Speed_Motor_Speed(Stop);
 80040aa:	2000      	movs	r0, #0
 80040ac:	f7ff fdfc 	bl	8003ca8 <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
			break;
 80040b0:	e009      	b.n	80040c6 <BSW_SWC+0x5e>
		case FALSE:
			Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_LED_Warning_LED_Warning(LED_OFF);
 80040b2:	2000      	movs	r0, #0
 80040b4:	f7ff fde2 	bl	8003c7c <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_LED_Warning_LED_Warning>
			Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_Motor_Speed_Motor_Speed(HIGH_Speed);
 80040b8:	2002      	movs	r0, #2
 80040ba:	f7ff fdf5 	bl	8003ca8 <Rte_IWrite_BSW_SWC_BSW_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
			break;
 80040be:	e002      	b.n	80040c6 <BSW_SWC+0x5e>
		default:
			Status=E_NOT_OK;
 80040c0:	2301      	movs	r3, #1
 80040c2:	72fb      	strb	r3, [r7, #11]
			break;
 80040c4:	bf00      	nop
	{
		Dio_WriteChannel(channel_45,STD_HIGH);
	}
	return Status;
	*/
}
 80040c6:	bf00      	nop
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	200001c8 	.word	0x200001c8

080040d4 <DNPW_SWC>:
#define Super_Speed          3
#define Stop                 2


Std_ReturnType DNPW_SWC(const my_uint8* CAN_Frame)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
	const my_uint8* Frame= CAN_Frame;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	60fb      	str	r3, [r7, #12]
	//  my_uint8 Motor_Speed;
	//  my_uint8 LED_Warning;
	//  my_uint8 LCD_Warning;
	//  my_uint8 CAN_Frame[]={/* Id,ALL_Zones, LON_OFFSET , RV_ZONE,RV_DIRECTION*/};
	    my_uint8 DNPW_WARNING = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	72fb      	strb	r3, [r7, #11]



	if((Frame[3]== AHED_LEFT )&&(Frame[4] == REVERSE))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3303      	adds	r3, #3
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d118      	bne.n	8004120 <DNPW_SWC+0x4c>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3304      	adds	r3, #4
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d113      	bne.n	8004120 <DNPW_SWC+0x4c>
	{
		if(Frame[2] < Frame[1])
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3302      	adds	r3, #2
 80040fc:	781a      	ldrb	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3301      	adds	r3, #1
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d212      	bcs.n	800412e <DNPW_SWC+0x5a>
		{
			DNPW_WARNING =1;
 8004108:	2301      	movs	r3, #1
 800410a:	72fb      	strb	r3, [r7, #11]
			if(DNPW_WARNING){
 800410c:	7afb      	ldrb	r3, [r7, #11]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00d      	beq.n	800412e <DNPW_SWC+0x5a>

				Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning(LED_ON);
 8004112:	2001      	movs	r0, #1
 8004114:	f7ff fdde 	bl	8003cd4 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning>
				Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_Motor_Speed_Motor_Speed (LOW_Speed);
 8004118:	2000      	movs	r0, #0
 800411a:	f7ff fdf1 	bl	8003d00 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
		if(Frame[2] < Frame[1])
 800411e:	e006      	b.n	800412e <DNPW_SWC+0x5a>
			}
		}
	}
	else
	{
		Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning(LED_OFF);
 8004120:	2000      	movs	r0, #0
 8004122:	f7ff fdd7 	bl	8003cd4 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LED_Warning_LED_Warning>
		Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_Motor_Speed_Motor_Speed (HIGH_Speed);
 8004126:	2001      	movs	r0, #1
 8004128:	f7ff fdea 	bl	8003d00 <Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
 800412c:	e000      	b.n	8004130 <DNPW_SWC+0x5c>
		if(Frame[2] < Frame[1])
 800412e:	bf00      	nop
	}

	Std_ReturnType Stutas=E_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	72bb      	strb	r3, [r7, #10]
	//Rte_IWrite_DNPW_SWC_DNPW_SWC_Runnable_PP_LCD_LCD_Warning (LCD_Warning);
	return Stutas;
 8004134:	7abb      	ldrb	r3, [r7, #10]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <EEBL_SWC>:
#define LOW_Speed            1
#define HIGH_Speed           2
#define Super_Speed          3

Std_ReturnType EEBL_SWC(const my_uint8* CAN_Frame)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b086      	sub	sp, #24
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
	Std_ReturnType Status=E_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	757b      	strb	r3, [r7, #21]
		//my_uint8 Motor_Speed;
		//my_uint8 LED_Warning;
		//my_uint8 LCD_Warning;
		const my_uint8* Frame = CAN_Frame ;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	613b      	str	r3, [r7, #16]
		my_uint16 Distance = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	81fb      	strh	r3, [r7, #14]
		Rte_Call_EEBL_SWC_RP_Get_Distance_Call_Ultrasonic(&Distance);
 8004152:	f107 030e 	add.w	r3, r7, #14
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff fe14 	bl	8003d84 <Rte_Call_EEBL_SWC_RP_Get_Distance_Call_Ultrasonic>
		my_uint16 Number_Of_Periodic_Alarms = 5 ;
 800415c:	2305      	movs	r3, #5
 800415e:	82fb      	strh	r3, [r7, #22]
		while(--Number_Of_Periodic_Alarms)
 8004160:	e018      	b.n	8004194 <EEBL_SWC+0x56>
		{
			// Todo : should go throw the RTE
			WaitEvent(0x01);
 8004162:	2001      	movs	r0, #1
 8004164:	f7fe fb28 	bl	80027b8 <WaitEvent>
			ClearEvent(0x01);
 8004168:	2001      	movs	r0, #1
 800416a:	f7fe fad9 	bl	8002720 <ClearEvent>
			Rte_Call_EEBL_SWC_RP_Get_Distance_Call_Ultrasonic(&Distance);
 800416e:	f107 030e 	add.w	r3, r7, #14
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fe06 	bl	8003d84 <Rte_Call_EEBL_SWC_RP_Get_Distance_Call_Ultrasonic>
			if(Frame[1] < Distance)
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	3301      	adds	r3, #1
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	b29a      	uxth	r2, r3
 8004180:	89fb      	ldrh	r3, [r7, #14]
 8004182:	429a      	cmp	r2, r3
 8004184:	d203      	bcs.n	800418e <EEBL_SWC+0x50>
			{
				Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_LED_Warning_LED_Warning(LED_ON);
 8004186:	2001      	movs	r0, #1
 8004188:	f7ff fdd0 	bl	8003d2c <Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_LED_Warning_LED_Warning>
 800418c:	e002      	b.n	8004194 <EEBL_SWC+0x56>
			}
			else
			{
				Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_Motor_Speed_Motor_Speed(Stop);
 800418e:	2000      	movs	r0, #0
 8004190:	f7ff fde2 	bl	8003d58 <Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
		while(--Number_Of_Periodic_Alarms)
 8004194:	8afb      	ldrh	r3, [r7, #22]
 8004196:	3b01      	subs	r3, #1
 8004198:	82fb      	strh	r3, [r7, #22]
 800419a:	8afb      	ldrh	r3, [r7, #22]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e0      	bne.n	8004162 <EEBL_SWC+0x24>
		}

		//Rte_IWrite_EEBL_SWC_EEBL_SWC_Runnable_PP_LCD_LCD_Warning(LCD_Warning);


		return Status;
 80041a0:	7d7b      	ldrb	r3, [r7, #21]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <FCW_SWC>:
#define LOW_Speed            1
#define HIGH_Speed           2


Std_ReturnType FCW_SWC(const my_uint8* CAN_Frame)
{
 80041ac:	b590      	push	{r4, r7, lr}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	Std_ReturnType Status=E_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	757b      	strb	r3, [r7, #21]
	//my_uint8 Motor_Speed;
	//my_uint8 LED_Warning;
	//my_uint8 LCD_Warning;
	const my_uint8* Frame = CAN_Frame ;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	613b      	str	r3, [r7, #16]
	my_uint16 Distance = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	81fb      	strh	r3, [r7, #14]
	Rte_Call_FCW_SWC_RP_Get_Distance_Call_Ultrasonic(&Distance);
 80041c0:	f107 030e 	add.w	r3, r7, #14
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fe41 	bl	8003e4c <Rte_Call_FCW_SWC_RP_Get_Distance_Call_Ultrasonic>
	my_uint16 Number_Of_Periodic_Alarms = (0.5*Frame[1]*1000)/Periodic_Duration ;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	3301      	adds	r3, #1
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fc f91f 	bl	8000414 <__aeabi_i2d>
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	4b22      	ldr	r3, [pc, #136]	; (8004264 <FCW_SWC+0xb8>)
 80041dc:	f7fc f984 	bl	80004e8 <__aeabi_dmul>
 80041e0:	4603      	mov	r3, r0
 80041e2:	460c      	mov	r4, r1
 80041e4:	4618      	mov	r0, r3
 80041e6:	4621      	mov	r1, r4
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	4b1e      	ldr	r3, [pc, #120]	; (8004268 <FCW_SWC+0xbc>)
 80041ee:	f7fc f97b 	bl	80004e8 <__aeabi_dmul>
 80041f2:	4603      	mov	r3, r0
 80041f4:	460c      	mov	r4, r1
 80041f6:	4618      	mov	r0, r3
 80041f8:	4621      	mov	r1, r4
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	4b1b      	ldr	r3, [pc, #108]	; (800426c <FCW_SWC+0xc0>)
 8004200:	f7fc fa9c 	bl	800073c <__aeabi_ddiv>
 8004204:	4603      	mov	r3, r0
 8004206:	460c      	mov	r4, r1
 8004208:	4618      	mov	r0, r3
 800420a:	4621      	mov	r1, r4
 800420c:	f7fc fb7e 	bl	800090c <__aeabi_d2uiz>
 8004210:	4603      	mov	r3, r0
 8004212:	82fb      	strh	r3, [r7, #22]
	while(--Number_Of_Periodic_Alarms)
 8004214:	e014      	b.n	8004240 <FCW_SWC+0x94>
	{
		// Todo : should go throw the RTE , button
		WaitEvent(0x08);
 8004216:	2008      	movs	r0, #8
 8004218:	f7fe face 	bl	80027b8 <WaitEvent>
		ClearEvent(0x08);
 800421c:	2008      	movs	r0, #8
 800421e:	f7fe fa7f 	bl	8002720 <ClearEvent>
		Rte_Call_FCW_SWC_RP_Get_Distance_Call_Ultrasonic(&Distance);
 8004222:	f107 030e 	add.w	r3, r7, #14
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fe10 	bl	8003e4c <Rte_Call_FCW_SWC_RP_Get_Distance_Call_Ultrasonic>
		if(Distance > Distance_Threshold)
 800422c:	89fb      	ldrh	r3, [r7, #14]
 800422e:	2b32      	cmp	r3, #50	; 0x32
 8004230:	d903      	bls.n	800423a <FCW_SWC+0x8e>
		{
			Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_LED_Warning_LED_Warning(LED_ON);
 8004232:	2001      	movs	r0, #1
 8004234:	f7ff fdde 	bl	8003df4 <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_LED_Warning_LED_Warning>
 8004238:	e002      	b.n	8004240 <FCW_SWC+0x94>
		}
		else
		{
			Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_Motor_Speed_Motor_Speed(LOW_Speed);
 800423a:	2001      	movs	r0, #1
 800423c:	f7ff fdf0 	bl	8003e20 <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
	while(--Number_Of_Periodic_Alarms)
 8004240:	8afb      	ldrh	r3, [r7, #22]
 8004242:	3b01      	subs	r3, #1
 8004244:	82fb      	strh	r3, [r7, #22]
 8004246:	8afb      	ldrh	r3, [r7, #22]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e4      	bne.n	8004216 <FCW_SWC+0x6a>
		}
	}
	if(!Number_Of_Periodic_Alarms)
 800424c:	8afb      	ldrh	r3, [r7, #22]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d102      	bne.n	8004258 <FCW_SWC+0xac>
	{
		Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_Motor_Speed_Motor_Speed(LOW_Speed);
 8004252:	2001      	movs	r0, #1
 8004254:	f7ff fde4 	bl	8003e20 <Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
	}

	//Rte_IWrite_FCW_SWC_FCW_SWC_Runnable_PP_LCD_LCD_Warning(LCD_Warning);


	return Status;
 8004258:	7d7b      	ldrb	r3, [r7, #21]
}
 800425a:	4618      	mov	r0, r3
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	bd90      	pop	{r4, r7, pc}
 8004262:	bf00      	nop
 8004264:	3fe00000 	.word	0x3fe00000
 8004268:	408f4000 	.word	0x408f4000
 800426c:	406f4000 	.word	0x406f4000

08004270 <IMA_SWC>:
#define Time_Of_RemoteV            Frame[2]
#define Speed_OF_HostV             Frame[3]
#define Speed_Of_RemoteV           Frame[4]

Std_ReturnType IMA_SWC(const my_uint8* CAN_Frame)
{
 8004270:	b590      	push	{r4, r7, lr}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	Std_ReturnType Status=E_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	737b      	strb	r3, [r7, #13]
	boolean Button_set=FALSE;
 800427c:	2300      	movs	r3, #0
 800427e:	733b      	strb	r3, [r7, #12]
	//my_uint8 Motor_Speed;
	//my_uint8 LED_Warning;
	//my_uint8 LCD_Warning;
	const my_uint8* Frame = CAN_Frame ;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	60bb      	str	r3, [r7, #8]
	my_uint16 Number_Of_Periodic_Alarms = (0.5*Time_OF_HostV*1000)/Periodic_Duration ;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	3301      	adds	r3, #1
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fc f8c2 	bl	8000414 <__aeabi_i2d>
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	4b41      	ldr	r3, [pc, #260]	; (800439c <IMA_SWC+0x12c>)
 8004296:	f7fc f927 	bl	80004e8 <__aeabi_dmul>
 800429a:	4603      	mov	r3, r0
 800429c:	460c      	mov	r4, r1
 800429e:	4618      	mov	r0, r3
 80042a0:	4621      	mov	r1, r4
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	4b3e      	ldr	r3, [pc, #248]	; (80043a0 <IMA_SWC+0x130>)
 80042a8:	f7fc f91e 	bl	80004e8 <__aeabi_dmul>
 80042ac:	4603      	mov	r3, r0
 80042ae:	460c      	mov	r4, r1
 80042b0:	4618      	mov	r0, r3
 80042b2:	4621      	mov	r1, r4
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	4b3a      	ldr	r3, [pc, #232]	; (80043a4 <IMA_SWC+0x134>)
 80042ba:	f7fc fa3f 	bl	800073c <__aeabi_ddiv>
 80042be:	4603      	mov	r3, r0
 80042c0:	460c      	mov	r4, r1
 80042c2:	4618      	mov	r0, r3
 80042c4:	4621      	mov	r1, r4
 80042c6:	f7fc fb21 	bl	800090c <__aeabi_d2uiz>
 80042ca:	4603      	mov	r3, r0
 80042cc:	81fb      	strh	r3, [r7, #14]

	while(--Number_Of_Periodic_Alarms)
 80042ce:	e00f      	b.n	80042f0 <IMA_SWC+0x80>
	{
		// Todo : should go throw the RTE
		Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LED_Warning_LED_Warning(LED_ON);
 80042d0:	2001      	movs	r0, #1
 80042d2:	f7ff fddb 	bl	8003e8c <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LED_Warning_LED_Warning>
		WaitEvent(0x02);
 80042d6:	2002      	movs	r0, #2
 80042d8:	f7fe fa6e 	bl	80027b8 <WaitEvent>
		ClearEvent(0x02);
 80042dc:	2002      	movs	r0, #2
 80042de:	f7fe fa1f 	bl	8002720 <ClearEvent>

		if(Button_set == TRUE)
 80042e2:	7b3b      	ldrb	r3, [r7, #12]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d103      	bne.n	80042f0 <IMA_SWC+0x80>
		{
			Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LED_Warning_LED_Warning(LED_OFF);
 80042e8:	2000      	movs	r0, #0
 80042ea:	f7ff fdcf 	bl	8003e8c <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LED_Warning_LED_Warning>
			break;
 80042ee:	e005      	b.n	80042fc <IMA_SWC+0x8c>
	while(--Number_Of_Periodic_Alarms)
 80042f0:	89fb      	ldrh	r3, [r7, #14]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	81fb      	strh	r3, [r7, #14]
 80042f6:	89fb      	ldrh	r3, [r7, #14]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e9      	bne.n	80042d0 <IMA_SWC+0x60>
		}

	}
	Number_Of_Periodic_Alarms=0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	81fb      	strh	r3, [r7, #14]
	if(!Number_Of_Periodic_Alarms)
 8004300:	89fb      	ldrh	r3, [r7, #14]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d144      	bne.n	8004390 <IMA_SWC+0x120>
	{
		if(Time_OF_HostV > Time_Of_RemoteV)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	3301      	adds	r3, #1
 800430a:	781a      	ldrb	r2, [r3, #0]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	3302      	adds	r3, #2
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d91e      	bls.n	8004354 <IMA_SWC+0xe4>
		{
			if(Speed_OF_HostV < Speed_Of_RemoteV)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	3303      	adds	r3, #3
 800431a:	781a      	ldrb	r2, [r3, #0]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	3304      	adds	r3, #4
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d203      	bcs.n	800432e <IMA_SWC+0xbe>
			{
				Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed(LOW_Speed);
 8004326:	2001      	movs	r0, #1
 8004328:	f7ff fdc6 	bl	8003eb8 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
 800432c:	e030      	b.n	8004390 <IMA_SWC+0x120>
			}
			else
			{
				if((Time_OF_HostV-Time_Of_RemoteV) > Time_Threshold )
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	3301      	adds	r3, #1
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	3302      	adds	r3, #2
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004342:	dd03      	ble.n	800434c <IMA_SWC+0xdc>
				{
					Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed(Super_Speed);
 8004344:	2003      	movs	r0, #3
 8004346:	f7ff fdb7 	bl	8003eb8 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
 800434a:	e021      	b.n	8004390 <IMA_SWC+0x120>
				}
				else
				{
					Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed(Stop);
 800434c:	2000      	movs	r0, #0
 800434e:	f7ff fdb3 	bl	8003eb8 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
 8004352:	e01d      	b.n	8004390 <IMA_SWC+0x120>
				}
			}
		}
		else
		{
			if(Speed_OF_HostV > Speed_Of_RemoteV)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	3303      	adds	r3, #3
 8004358:	781a      	ldrb	r2, [r3, #0]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	3304      	adds	r3, #4
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d903      	bls.n	800436c <IMA_SWC+0xfc>
			{
				Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed(HIGH_Speed);
 8004364:	2002      	movs	r0, #2
 8004366:	f7ff fda7 	bl	8003eb8 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
 800436a:	e011      	b.n	8004390 <IMA_SWC+0x120>
			}
			else
			{
				if((Time_Of_RemoteV-Time_OF_HostV) > Time_Threshold )
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	3302      	adds	r3, #2
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	3301      	adds	r3, #1
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004380:	dd03      	ble.n	800438a <IMA_SWC+0x11a>
				{
					Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed(Stop);
 8004382:	2000      	movs	r0, #0
 8004384:	f7ff fd98 	bl	8003eb8 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed>
 8004388:	e002      	b.n	8004390 <IMA_SWC+0x120>
				}
				else
				{
					Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed(Super_Speed);
 800438a:	2003      	movs	r0, #3
 800438c:	f7ff fd94 	bl	8003eb8 <Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_Motor_Speed_Motor_Speed>


	//Rte_IWrite_IMA_SWC_IMA_SWC_Runnable_PP_LCD_LCD_Warning(LCD_Warning);


	return Status;
 8004390:	7b7b      	ldrb	r3, [r7, #13]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	bd90      	pop	{r4, r7, pc}
 800439a:	bf00      	nop
 800439c:	3fe00000 	.word	0x3fe00000
 80043a0:	408f4000 	.word	0x408f4000
 80043a4:	40490000 	.word	0x40490000

080043a8 <LED_SWC>:

/*******************************************************
 **********************Runnable*************************
 *******************************************************/
void LED_SWC(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
	uint8 LED_Status;
	LED_Status=Rte_IRead_LED_SWC_LED_SWC_Runnable_RP_LED_Warning_LED_Warning();
 80043ae:	f7ff fd99 	bl	8003ee4 <Rte_IRead_LED_SWC_LED_SWC_Runnable_RP_LED_Warning_LED_Warning>
 80043b2:	4603      	mov	r3, r0
 80043b4:	71fb      	strb	r3, [r7, #7]
	switch (LED_Status)
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d007      	beq.n	80043cc <LED_SWC+0x24>
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d000      	beq.n	80043c2 <LED_SWC+0x1a>
			break;
		case LED_OFF:
			Dio_WriteChannel(channel_45,STD_HIGH);
			break;
		default:
			break;
 80043c0:	e009      	b.n	80043d6 <LED_SWC+0x2e>
			Dio_WriteChannel(channel_45,STD_LOW);
 80043c2:	2100      	movs	r1, #0
 80043c4:	202d      	movs	r0, #45	; 0x2d
 80043c6:	f7fd fc57 	bl	8001c78 <Dio_WriteChannel>
			break;
 80043ca:	e004      	b.n	80043d6 <LED_SWC+0x2e>
			Dio_WriteChannel(channel_45,STD_HIGH);
 80043cc:	2101      	movs	r1, #1
 80043ce:	202d      	movs	r0, #45	; 0x2d
 80043d0:	f7fd fc52 	bl	8001c78 <Dio_WriteChannel>
			break;
 80043d4:	bf00      	nop
	}
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <Main_SWC>:
const uint8* Frame=NULL_PTR;
/*******************************************************
 **********************Runnable*************************
 *******************************************************/
void Main_SWC(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
	Frame=Rte_IRead_Main_SWC_Main_SWC_Runnable_RP_CAN_Frame_CAN_Frame();
 80043e4:	f7ff fd8a 	bl	8003efc <Rte_IRead_Main_SWC_Main_SWC_Runnable_RP_CAN_Frame_CAN_Frame>
 80043e8:	4602      	mov	r2, r0
 80043ea:	4b1b      	ldr	r3, [pc, #108]	; (8004458 <Main_SWC+0x78>)
 80043ec:	601a      	str	r2, [r3, #0]
	switch(Frame[0])
 80043ee:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <Main_SWC+0x78>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d82a      	bhi.n	8004450 <Main_SWC+0x70>
 80043fa:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <Main_SWC+0x20>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	08004415 	.word	0x08004415
 8004404:	08004421 	.word	0x08004421
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004439 	.word	0x08004439
 8004410:	08004445 	.word	0x08004445
	{
	case 1:
		Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem(Frame);
 8004414:	4b10      	ldr	r3, [pc, #64]	; (8004458 <Main_SWC+0x78>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fd79 	bl	8003f10 <Rte_Call_Main_SWC_RP_Call_BSW_Call_Subsystem>
		break;
 800441e:	e018      	b.n	8004452 <Main_SWC+0x72>
	case 2:
		Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem(Frame);
 8004420:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <Main_SWC+0x78>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fdb3 	bl	8003f90 <Rte_Call_Main_SWC_RP_Call_DNPW_Call_Subsystem>
		break;
 800442a:	e012      	b.n	8004452 <Main_SWC+0x72>
	case 3:
		Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem(Frame);
 800442c:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <Main_SWC+0x78>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fded 	bl	8004010 <Rte_Call_Main_SWC_RP_Call_IMA_Call_Subsystem>
		break;
 8004436:	e00c      	b.n	8004452 <Main_SWC+0x72>
	case 4:
		Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem(Frame);
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <Main_SWC+0x78>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fd87 	bl	8003f50 <Rte_Call_Main_SWC_RP_Call_EEBL_Call_Subsystem>
		break;
 8004442:	e006      	b.n	8004452 <Main_SWC+0x72>
	case 5:
		Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem(Frame);
 8004444:	4b04      	ldr	r3, [pc, #16]	; (8004458 <Main_SWC+0x78>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fdc1 	bl	8003fd0 <Rte_Call_Main_SWC_RP_Call_FCW_Call_Subsystem>
		break;
 800444e:	e000      	b.n	8004452 <Main_SWC+0x72>
	default:
		break;
 8004450:	bf00      	nop
	}
}
 8004452:	bf00      	nop
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	200001cc 	.word	0x200001cc

0800445c <Motor_SWC>:
#define Super_Speed          3
/*******************************************************
 **********************Runnable*************************
 *******************************************************/
void Motor_SWC(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
	uint8 Speed;
	uint16 Dutycycle;
	Speed=Rte_IRead_Motor_SWC_Motor_SWC_Runnable_RP_Motor_Speed_Motor_Speed();
 8004462:	f7ff fdf5 	bl	8004050 <Rte_IRead_Motor_SWC_Motor_SWC_Runnable_RP_Motor_Speed_Motor_Speed>
 8004466:	4603      	mov	r3, r0
 8004468:	71fb      	strb	r3, [r7, #7]
	Dutycycle=Speed*6553;
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	b29b      	uxth	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	0052      	lsls	r2, r2, #1
 8004472:	441a      	add	r2, r3
 8004474:	0092      	lsls	r2, r2, #2
 8004476:	441a      	add	r2, r3
 8004478:	4611      	mov	r1, r2
 800447a:	0189      	lsls	r1, r1, #6
 800447c:	1a8a      	subs	r2, r1, r2
 800447e:	00d2      	lsls	r2, r2, #3
 8004480:	4413      	add	r3, r2
 8004482:	80bb      	strh	r3, [r7, #4]
	Pwm_SetDutyCycle(PwmChannelId_0,Dutycycle);
 8004484:	88bb      	ldrh	r3, [r7, #4]
 8004486:	4619      	mov	r1, r3
 8004488:	2000      	movs	r0, #0
 800448a:	f7ff fb57 	bl	8003b3c <Pwm_SetDutyCycle>
	Pwm_SetDutyCycle(PwmChannelId_1,Dutycycle);
 800448e:	88bb      	ldrh	r3, [r7, #4]
 8004490:	4619      	mov	r1, r3
 8004492:	2001      	movs	r0, #1
 8004494:	f7ff fb52 	bl	8003b3c <Pwm_SetDutyCycle>
	Pwm_SetDutyCycle(PwmChannelId_2,Dutycycle);
 8004498:	88bb      	ldrh	r3, [r7, #4]
 800449a:	4619      	mov	r1, r3
 800449c:	2002      	movs	r0, #2
 800449e:	f7ff fb4d 	bl	8003b3c <Pwm_SetDutyCycle>
	Pwm_SetDutyCycle(PwmChannelId_3,Dutycycle);
 80044a2:	88bb      	ldrh	r3, [r7, #4]
 80044a4:	4619      	mov	r1, r3
 80044a6:	2003      	movs	r0, #3
 80044a8:	f7ff fb48 	bl	8003b3c <Pwm_SetDutyCycle>
}
 80044ac:	bf00      	nop
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <Ultrasonic_SWC>:
	for(int i=0 ;i<ms;i++)
		for(int x=0;x<50;x++);
}

Std_ReturnType Ultrasonic_SWC(my_uint16* Distance)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
	Std_ReturnType Stutas=E_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	73fb      	strb	r3, [r7, #15]
	my_uint16 Dis;
	Icu_StartSignalMeasurement(Icu_Channel_0);
 80044c0:	2000      	movs	r0, #0
 80044c2:	f7fd fdd7 	bl	8002074 <Icu_StartSignalMeasurement>
	Dio_WriteChannel(channel_29,STD_HIGH);
 80044c6:	2101      	movs	r1, #1
 80044c8:	201d      	movs	r0, #29
 80044ca:	f7fd fbd5 	bl	8001c78 <Dio_WriteChannel>
	delay_ms(10);
 80044ce:	200a      	movs	r0, #10
 80044d0:	f7fd fa1a 	bl	8001908 <delay_ms>
	Dio_WriteChannel(channel_29,STD_LOW);
 80044d4:	2100      	movs	r1, #0
 80044d6:	201d      	movs	r0, #29
 80044d8:	f7fd fbce 	bl	8001c78 <Dio_WriteChannel>
	while(1)
	{
		Dis=Icu_GetTimeElapsed(Icu_Channel_0);
 80044dc:	2000      	movs	r0, #0
 80044de:	f7fd fe29 	bl	8002134 <Icu_GetTimeElapsed>
 80044e2:	4603      	mov	r3, r0
 80044e4:	81bb      	strh	r3, [r7, #12]
		if(Dis!=0)break;
 80044e6:	89bb      	ldrh	r3, [r7, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d100      	bne.n	80044ee <Ultrasonic_SWC+0x3a>
		Dis=Icu_GetTimeElapsed(Icu_Channel_0);
 80044ec:	e7f6      	b.n	80044dc <Ultrasonic_SWC+0x28>
		if(Dis!=0)break;
 80044ee:	bf00      	nop
	}
	*Distance=Dis/58;
 80044f0:	89bb      	ldrh	r3, [r7, #12]
 80044f2:	4a07      	ldr	r2, [pc, #28]	; (8004510 <Ultrasonic_SWC+0x5c>)
 80044f4:	fba2 2303 	umull	r2, r3, r2, r3
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	801a      	strh	r2, [r3, #0]
	Icu_StopSignalMeasurement(Icu_Channel_0);
 8004500:	2000      	movs	r0, #0
 8004502:	f7fd fde9 	bl	80020d8 <Icu_StopSignalMeasurement>
	return Stutas;
 8004506:	7bfb      	ldrb	r3, [r7, #15]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	8d3dcb09 	.word	0x8d3dcb09

08004514 <EcuM_Init>:
*  # Description		:	Initializes the ECU state manager and carries out the startup procedure. The function will never return.
 * ############################################################################
 * @return None
 */
void EcuM_Init (void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_Enable();
 8004518:	4b1e      	ldr	r3, [pc, #120]	; (8004594 <EcuM_Init+0x80>)
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	4a1d      	ldr	r2, [pc, #116]	; (8004594 <EcuM_Init+0x80>)
 800451e:	f043 0304 	orr.w	r3, r3, #4
 8004522:	6193      	str	r3, [r2, #24]
	RCC_TIM2_CLK_Enable();
 8004524:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <EcuM_Init+0x80>)
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	4a1a      	ldr	r2, [pc, #104]	; (8004594 <EcuM_Init+0x80>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	61d3      	str	r3, [r2, #28]
	RCC_TIM3_CLK_Enable();
 8004530:	4b18      	ldr	r3, [pc, #96]	; (8004594 <EcuM_Init+0x80>)
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	4a17      	ldr	r2, [pc, #92]	; (8004594 <EcuM_Init+0x80>)
 8004536:	f043 0302 	orr.w	r3, r3, #2
 800453a:	61d3      	str	r3, [r2, #28]
	RCC_GPIOB_CLK_Enable();
 800453c:	4b15      	ldr	r3, [pc, #84]	; (8004594 <EcuM_Init+0x80>)
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	4a14      	ldr	r2, [pc, #80]	; (8004594 <EcuM_Init+0x80>)
 8004542:	f043 0308 	orr.w	r3, r3, #8
 8004546:	6193      	str	r3, [r2, #24]
	RCC_GPIOC_CLK_Enable();
 8004548:	4b12      	ldr	r3, [pc, #72]	; (8004594 <EcuM_Init+0x80>)
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	4a11      	ldr	r2, [pc, #68]	; (8004594 <EcuM_Init+0x80>)
 800454e:	f043 0310 	orr.w	r3, r3, #16
 8004552:	6193      	str	r3, [r2, #24]
	RCC_USART1_CLK_Enable();
 8004554:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <EcuM_Init+0x80>)
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	4a0e      	ldr	r2, [pc, #56]	; (8004594 <EcuM_Init+0x80>)
 800455a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800455e:	6193      	str	r3, [r2, #24]
	RCC_TIM4_CLK_Enable();
 8004560:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <EcuM_Init+0x80>)
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	4a0b      	ldr	r2, [pc, #44]	; (8004594 <EcuM_Init+0x80>)
 8004566:	f043 0304 	orr.w	r3, r3, #4
 800456a:	61d3      	str	r3, [r2, #28]
	Port_Init(&Port);
 800456c:	480a      	ldr	r0, [pc, #40]	; (8004598 <EcuM_Init+0x84>)
 800456e:	f7fe fe1f 	bl	80031b0 <Port_Init>
	Bluetooth_Init();
 8004572:	f7fd f863 	bl	800163c <Bluetooth_Init>
	Icu_Init(&ICU_Config);
 8004576:	4809      	ldr	r0, [pc, #36]	; (800459c <EcuM_Init+0x88>)
 8004578:	f7fd fc7c 	bl	8001e74 <Icu_Init>
	Pwm_Init(&PWM_Config);
 800457c:	4808      	ldr	r0, [pc, #32]	; (80045a0 <EcuM_Init+0x8c>)
 800457e:	f7ff f85f 	bl	8003640 <Pwm_Init>
	Can_Init(&Can);
 8004582:	4808      	ldr	r0, [pc, #32]	; (80045a4 <EcuM_Init+0x90>)
 8004584:	f7fc fbaa 	bl	8000cdc <Can_Init>
	Can_Filter();
 8004588:	f000 f80e 	bl	80045a8 <Can_Filter>
	Os_Init();
 800458c:	f7fe fd4a 	bl	8003024 <Os_Init>
}
 8004590:	bf00      	nop
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40021000 	.word	0x40021000
 8004598:	08004850 	.word	0x08004850
 800459c:	2000007c 	.word	0x2000007c
 80045a0:	20000094 	.word	0x20000094
 80045a4:	20000000 	.word	0x20000000

080045a8 <Can_Filter>:
/**
 * @brief This function configures a CAN filter to accept or reject incoming messages based on defined criteria.
 * @return None 
 */
void Can_Filter(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
	//Configuration Filter Bank 0
	CAN_Filter_Config_t Filter_Config;
	Filter_Config.Filter_Bank=CAN_Filter_Bank_0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
	Filter_Config.Filter_FIFO_Assignment=CAN_Filter_FIFO_Assignment_FIFO0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]
	Filter_Config.Filter_ID=0XFFFFFFFF;
 80045b6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ba:	603b      	str	r3, [r7, #0]
	Filter_Config.Filter_Mask_ID=0X00000000;
 80045bc:	2300      	movs	r3, #0
 80045be:	607b      	str	r3, [r7, #4]
	Filter_Config.Filter_Mode=CAN_Filter_Mode_Mask;
 80045c0:	2300      	movs	r3, #0
 80045c2:	613b      	str	r3, [r7, #16]
	Filter_Config.Filter_Scale=CAN_Filter_Scale_32;
 80045c4:	2301      	movs	r3, #1
 80045c6:	617b      	str	r3, [r7, #20]
	MCAL_CAN_Config_Filter(&Filter_Config);
 80045c8:	463b      	mov	r3, r7
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fc ff0a 	bl	80013e4 <MCAL_CAN_Config_Filter>
	Can_SetControllerMode(CONTROLLER_ZERO,CAN_CS_STARTED);
 80045d0:	2101      	movs	r1, #1
 80045d2:	2000      	movs	r0, #0
 80045d4:	f7fc fc7a 	bl	8000ecc <Can_SetControllerMode>
}
 80045d8:	bf00      	nop
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <AlarmCallback_Alarm0>:
DeclareAlarm(2);
AlarmBaseType Info_0;
//DeclareCounter(0);

void AlarmCallback_Alarm0(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
	SetEvent(&Task1, 0x01);
 80045e4:	2101      	movs	r1, #1
 80045e6:	4802      	ldr	r0, [pc, #8]	; (80045f0 <AlarmCallback_Alarm0+0x10>)
 80045e8:	f7fe f83e 	bl	8002668 <SetEvent>
	//ActivateTask(&Task1_Led_ON);
}
 80045ec:	bf00      	nop
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000678 	.word	0x20000678

080045f4 <AlarmCallback_Alarm1>:
void AlarmCallback_Alarm1(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
	//SetEvent(&Task2_Led_OFF, 0xf1);
	SetEvent(&Task1, 0x08);
 80045f8:	2108      	movs	r1, #8
 80045fa:	4802      	ldr	r0, [pc, #8]	; (8004604 <AlarmCallback_Alarm1+0x10>)
 80045fc:	f7fe f834 	bl	8002668 <SetEvent>
	//ActivateTask(&Task2_Led_OFF);
}
 8004600:	bf00      	nop
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20000678 	.word	0x20000678

08004608 <AlarmCallback_Alarm2>:
void AlarmCallback_Alarm2(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
	//SetEvent(&Task2_Led_OFF, 0xf1);
	SetEvent(&Task1, 0x02);
 800460c:	2102      	movs	r1, #2
 800460e:	4802      	ldr	r0, [pc, #8]	; (8004618 <AlarmCallback_Alarm2+0x10>)
 8004610:	f7fe f82a 	bl	8002668 <SetEvent>
	//ActivateTask(&Task2_Led_OFF);
}
 8004614:	bf00      	nop
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20000678 	.word	0x20000678

0800461c <main>:
int main(void)
{
 800461c:	b598      	push	{r3, r4, r7, lr}
 800461e:	af00      	add	r7, sp, #0
	//Task1_Entry();
	DefineCounter(0,2000,1,10);
 8004620:	4b42      	ldr	r3, [pc, #264]	; (800472c <main+0x110>)
 8004622:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	4b40      	ldr	r3, [pc, #256]	; (800472c <main+0x110>)
 800462a:	2201      	movs	r2, #1
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	4b3f      	ldr	r3, [pc, #252]	; (800472c <main+0x110>)
 8004630:	220a      	movs	r2, #10
 8004632:	609a      	str	r2, [r3, #8]
 8004634:	4b3e      	ldr	r3, [pc, #248]	; (8004730 <main+0x114>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	4a3e      	ldr	r2, [pc, #248]	; (8004734 <main+0x118>)
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	4413      	add	r3, r2
 800463e:	4a3b      	ldr	r2, [pc, #236]	; (800472c <main+0x110>)
 8004640:	461c      	mov	r4, r3
 8004642:	4613      	mov	r3, r2
 8004644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800464a:	4b39      	ldr	r3, [pc, #228]	; (8004730 <main+0x114>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	4619      	mov	r1, r3
 8004650:	4b39      	ldr	r3, [pc, #228]	; (8004738 <main+0x11c>)
 8004652:	2200      	movs	r2, #0
 8004654:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8004658:	4b35      	ldr	r3, [pc, #212]	; (8004730 <main+0x114>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	3301      	adds	r3, #1
 800465e:	b2da      	uxtb	r2, r3
 8004660:	4b33      	ldr	r3, [pc, #204]	; (8004730 <main+0x114>)
 8004662:	701a      	strb	r2, [r3, #0]
	DefineAlarm(0,20,250,0);
 8004664:	4b35      	ldr	r3, [pc, #212]	; (800473c <main+0x120>)
 8004666:	2200      	movs	r2, #0
 8004668:	741a      	strb	r2, [r3, #16]
 800466a:	4b34      	ldr	r3, [pc, #208]	; (800473c <main+0x120>)
 800466c:	2214      	movs	r2, #20
 800466e:	615a      	str	r2, [r3, #20]
 8004670:	4b32      	ldr	r3, [pc, #200]	; (800473c <main+0x120>)
 8004672:	22fa      	movs	r2, #250	; 0xfa
 8004674:	619a      	str	r2, [r3, #24]
 8004676:	4a31      	ldr	r2, [pc, #196]	; (800473c <main+0x120>)
 8004678:	4b2c      	ldr	r3, [pc, #176]	; (800472c <main+0x110>)
 800467a:	4614      	mov	r4, r2
 800467c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800467e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004682:	4b2f      	ldr	r3, [pc, #188]	; (8004740 <main+0x124>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	4619      	mov	r1, r3
 8004688:	4b2e      	ldr	r3, [pc, #184]	; (8004744 <main+0x128>)
 800468a:	4a2c      	ldr	r2, [pc, #176]	; (800473c <main+0x120>)
 800468c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8004690:	4b2b      	ldr	r3, [pc, #172]	; (8004740 <main+0x124>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	3301      	adds	r3, #1
 8004696:	b2da      	uxtb	r2, r3
 8004698:	4b29      	ldr	r3, [pc, #164]	; (8004740 <main+0x124>)
 800469a:	701a      	strb	r2, [r3, #0]
	DefineAlarm(1,15,250,0);
 800469c:	4b2a      	ldr	r3, [pc, #168]	; (8004748 <main+0x12c>)
 800469e:	2201      	movs	r2, #1
 80046a0:	741a      	strb	r2, [r3, #16]
 80046a2:	4b29      	ldr	r3, [pc, #164]	; (8004748 <main+0x12c>)
 80046a4:	220f      	movs	r2, #15
 80046a6:	615a      	str	r2, [r3, #20]
 80046a8:	4b27      	ldr	r3, [pc, #156]	; (8004748 <main+0x12c>)
 80046aa:	22fa      	movs	r2, #250	; 0xfa
 80046ac:	619a      	str	r2, [r3, #24]
 80046ae:	4a26      	ldr	r2, [pc, #152]	; (8004748 <main+0x12c>)
 80046b0:	4b1e      	ldr	r3, [pc, #120]	; (800472c <main+0x110>)
 80046b2:	4614      	mov	r4, r2
 80046b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80046ba:	4b21      	ldr	r3, [pc, #132]	; (8004740 <main+0x124>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	4619      	mov	r1, r3
 80046c0:	4b20      	ldr	r3, [pc, #128]	; (8004744 <main+0x128>)
 80046c2:	4a21      	ldr	r2, [pc, #132]	; (8004748 <main+0x12c>)
 80046c4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80046c8:	4b1d      	ldr	r3, [pc, #116]	; (8004740 <main+0x124>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	3301      	adds	r3, #1
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <main+0x124>)
 80046d2:	701a      	strb	r2, [r3, #0]
	DefineAlarm(2,25,50,0);
 80046d4:	4b1d      	ldr	r3, [pc, #116]	; (800474c <main+0x130>)
 80046d6:	2202      	movs	r2, #2
 80046d8:	741a      	strb	r2, [r3, #16]
 80046da:	4b1c      	ldr	r3, [pc, #112]	; (800474c <main+0x130>)
 80046dc:	2219      	movs	r2, #25
 80046de:	615a      	str	r2, [r3, #20]
 80046e0:	4b1a      	ldr	r3, [pc, #104]	; (800474c <main+0x130>)
 80046e2:	2232      	movs	r2, #50	; 0x32
 80046e4:	619a      	str	r2, [r3, #24]
 80046e6:	4a19      	ldr	r2, [pc, #100]	; (800474c <main+0x130>)
 80046e8:	4b10      	ldr	r3, [pc, #64]	; (800472c <main+0x110>)
 80046ea:	4614      	mov	r4, r2
 80046ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80046f2:	4b13      	ldr	r3, [pc, #76]	; (8004740 <main+0x124>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	4619      	mov	r1, r3
 80046f8:	4b12      	ldr	r3, [pc, #72]	; (8004744 <main+0x128>)
 80046fa:	4a14      	ldr	r2, [pc, #80]	; (800474c <main+0x130>)
 80046fc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8004700:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <main+0x124>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	3301      	adds	r3, #1
 8004706:	b2da      	uxtb	r2, r3
 8004708:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <main+0x124>)
 800470a:	701a      	strb	r2, [r3, #0]
	//DefineAlarm(1,50,999,0);
	PduInfo.id=0x15;
 800470c:	4b10      	ldr	r3, [pc, #64]	; (8004750 <main+0x134>)
 800470e:	2215      	movs	r2, #21
 8004710:	601a      	str	r2, [r3, #0]
	PduInfo.sdu=Data;
 8004712:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <main+0x134>)
 8004714:	4a0f      	ldr	r2, [pc, #60]	; (8004754 <main+0x138>)
 8004716:	605a      	str	r2, [r3, #4]
	PduInfo.swPduHandle=5;
 8004718:	4b0d      	ldr	r3, [pc, #52]	; (8004750 <main+0x134>)
 800471a:	2205      	movs	r2, #5
 800471c:	721a      	strb	r2, [r3, #8]
	PduInfo.length=8;
 800471e:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <main+0x134>)
 8004720:	2208      	movs	r2, #8
 8004722:	725a      	strb	r2, [r3, #9]
	EcuM_Init();
 8004724:	f7ff fef6 	bl	8004514 <EcuM_Init>
    //Can_Init(&Can);
    //Configuration Pdu
	//Can_Write(Hth,&PduInfo);
	while(1)
 8004728:	e7fe      	b.n	8004728 <main+0x10c>
 800472a:	bf00      	nop
 800472c:	20000840 	.word	0x20000840
 8004730:	20000194 	.word	0x20000194
 8004734:	200002ec 	.word	0x200002ec
 8004738:	2000038c 	.word	0x2000038c
 800473c:	200007fc 	.word	0x200007fc
 8004740:	20000164 	.word	0x20000164
 8004744:	2000013c 	.word	0x2000013c
 8004748:	20000818 	.word	0x20000818
 800474c:	2000085c 	.word	0x2000085c
 8004750:	20000834 	.word	0x20000834
 8004754:	200000e4 	.word	0x200000e4

08004758 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004758:	480d      	ldr	r0, [pc, #52]	; (8004790 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800475a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800475c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004760:	480c      	ldr	r0, [pc, #48]	; (8004794 <LoopForever+0x6>)
  ldr r1, =_edata
 8004762:	490d      	ldr	r1, [pc, #52]	; (8004798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004764:	4a0d      	ldr	r2, [pc, #52]	; (800479c <LoopForever+0xe>)
  movs r3, #0
 8004766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004768:	e002      	b.n	8004770 <LoopCopyDataInit>

0800476a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800476a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800476c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800476e:	3304      	adds	r3, #4

08004770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004774:	d3f9      	bcc.n	800476a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004776:	4a0a      	ldr	r2, [pc, #40]	; (80047a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004778:	4c0a      	ldr	r4, [pc, #40]	; (80047a4 <LoopForever+0x16>)
  movs r3, #0
 800477a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800477c:	e001      	b.n	8004782 <LoopFillZerobss>

0800477e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800477e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004780:	3204      	adds	r2, #4

08004782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004784:	d3fb      	bcc.n	800477e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004786:	f000 f811 	bl	80047ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800478a:	f7ff ff47 	bl	800461c <main>

0800478e <LoopForever>:

LoopForever:
    b LoopForever
 800478e:	e7fe      	b.n	800478e <LoopForever>
  ldr   r0, =_estack
 8004790:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004798:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 800479c:	080049e4 	.word	0x080049e4
  ldr r2, =_sbss
 80047a0:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 80047a4:	20000878 	.word	0x20000878

080047a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80047a8:	e7fe      	b.n	80047a8 <ADC1_2_IRQHandler>
	...

080047ac <__libc_init_array>:
 80047ac:	b570      	push	{r4, r5, r6, lr}
 80047ae:	2500      	movs	r5, #0
 80047b0:	4e0c      	ldr	r6, [pc, #48]	; (80047e4 <__libc_init_array+0x38>)
 80047b2:	4c0d      	ldr	r4, [pc, #52]	; (80047e8 <__libc_init_array+0x3c>)
 80047b4:	1ba4      	subs	r4, r4, r6
 80047b6:	10a4      	asrs	r4, r4, #2
 80047b8:	42a5      	cmp	r5, r4
 80047ba:	d109      	bne.n	80047d0 <__libc_init_array+0x24>
 80047bc:	f000 f826 	bl	800480c <_init>
 80047c0:	2500      	movs	r5, #0
 80047c2:	4e0a      	ldr	r6, [pc, #40]	; (80047ec <__libc_init_array+0x40>)
 80047c4:	4c0a      	ldr	r4, [pc, #40]	; (80047f0 <__libc_init_array+0x44>)
 80047c6:	1ba4      	subs	r4, r4, r6
 80047c8:	10a4      	asrs	r4, r4, #2
 80047ca:	42a5      	cmp	r5, r4
 80047cc:	d105      	bne.n	80047da <__libc_init_array+0x2e>
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047d4:	4798      	blx	r3
 80047d6:	3501      	adds	r5, #1
 80047d8:	e7ee      	b.n	80047b8 <__libc_init_array+0xc>
 80047da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047de:	4798      	blx	r3
 80047e0:	3501      	adds	r5, #1
 80047e2:	e7f2      	b.n	80047ca <__libc_init_array+0x1e>
 80047e4:	080049dc 	.word	0x080049dc
 80047e8:	080049dc 	.word	0x080049dc
 80047ec:	080049dc 	.word	0x080049dc
 80047f0:	080049e0 	.word	0x080049e0

080047f4 <memcpy>:
 80047f4:	b510      	push	{r4, lr}
 80047f6:	1e43      	subs	r3, r0, #1
 80047f8:	440a      	add	r2, r1
 80047fa:	4291      	cmp	r1, r2
 80047fc:	d100      	bne.n	8004800 <memcpy+0xc>
 80047fe:	bd10      	pop	{r4, pc}
 8004800:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004804:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004808:	e7f7      	b.n	80047fa <memcpy+0x6>
	...

0800480c <_init>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	bf00      	nop
 8004810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004812:	bc08      	pop	{r3}
 8004814:	469e      	mov	lr, r3
 8004816:	4770      	bx	lr

08004818 <_fini>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	bf00      	nop
 800481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481e:	bc08      	pop	{r3}
 8004820:	469e      	mov	lr, r3
 8004822:	4770      	bx	lr
